(function() {var implementors = {};
implementors["addr2line"] = [{"text":"impl&lt;R&gt; Freeze for Context&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Freeze for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Freeze for Frame&lt;'ctx, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Location&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Freeze for Adler32","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl Freeze for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Freeze for AHasher","synthetic":true,"types":[]},{"text":"impl Freeze for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Freeze for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Freeze for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Freeze for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Searcher","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O&gt; Freeze for Id&lt;O&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Additive","synthetic":true,"types":[]},{"text":"impl Freeze for Multiplicative","synthetic":true,"types":[]}];
implementors["alsa_sys"] = [{"text":"impl Freeze for snd_dlsym_link","synthetic":true,"types":[]},{"text":"impl Freeze for snd_devname_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_channel_area_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_sync_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_chmap_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_chmap_query_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_scope_ops_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_read_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_tread_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_aes_iec958_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_mixer_selem_regopt","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_addr_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_connect_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_real_time_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_timestamp_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_ev_note_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_ev_ctrl_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_ev_raw8_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_ev_raw32_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_ev_ext_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_result_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_queue_skew_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_ev_queue_control_t","synthetic":true,"types":[]},{"text":"impl Freeze for Union_Unnamed9","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for Union_Unnamed10","synthetic":true,"types":[]},{"text":"impl&lt;Storage, Align&gt; Freeze for __BindgenBitfieldUnit&lt;Storage, Align&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Align: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Storage: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for _snd_pcm_audio_tstamp_config","synthetic":true,"types":[]},{"text":"impl Freeze for _snd_pcm_audio_tstamp_report","synthetic":true,"types":[]},{"text":"impl Freeze for snd_async_handler_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_shm_area","synthetic":true,"types":[]},{"text":"impl Freeze for snd_input_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_output_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_config_t","synthetic":true,"types":[]},{"text":"impl Freeze for Struct__snd_config_iterator","synthetic":true,"types":[]},{"text":"impl Freeze for snd_config_update_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_hw_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_sw_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_access_mask_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_format_mask_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_subformat_mask_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_scope_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_pcm_hook_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_rawmidi_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_rawmidi_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_rawmidi_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_rawmidi_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_ginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_gparams_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_gstatus_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_query_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_timer_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_hwdep_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_hwdep_dsp_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_hwdep_dsp_image_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_hwdep_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_ctl_card_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_ctl_elem_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_ctl_elem_list_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_ctl_elem_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_ctl_elem_value_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_ctl_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_ctl_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_sctl_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_hctl_elem_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_hctl_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_mixer_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_mixer_class_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_mixer_elem_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_mixer_selem_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_system_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_client_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_client_pool_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_port_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_port_subscribe_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_query_subscribe_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_queue_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_queue_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_queue_tempo_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_queue_timer_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_seq_remove_events_t","synthetic":true,"types":[]},{"text":"impl Freeze for snd_midi_event_t","synthetic":true,"types":[]}];
implementors["amethyst"] = [{"text":"impl&lt;S, T, E, R&gt; Freeze for ApplicationBuilder&lt;S, T, E, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, E&nbsp;=&nbsp;StateEvent&lt;StringBindings&gt;, R&nbsp;=&nbsp;StateEventReader&lt;StringBindings&gt;&gt; !Freeze for CoreApplication&lt;'a, T, E, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CallbackQueue","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for GameData&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for GameDataBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Logger","synthetic":true,"types":[]},{"text":"impl Freeze for LoggerConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for StateData&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, E&gt; Freeze for StateMachine&lt;'a, T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;StringBindings&gt; !Freeze for StateEventReader&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StdoutLog","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Freeze for Trans&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StateEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_animation"] = [{"text":"impl&lt;'a, I, T&gt; Freeze for AnimationBundle&lt;'a, I, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SamplingBundle&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VertexSkinningBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for AnimatablePrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AnimationHierarchyPrefab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AnimationPrefab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for AnimationSetPrefab&lt;I, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Animation&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AnimationControl&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for AnimationControlSet&lt;I, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AnimationHierarchy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for AnimationSet&lt;I, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RestState&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sampler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SamplerControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SamplerControlSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Joint","synthetic":true,"types":[]},{"text":"impl Freeze for JointPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for Skin","synthetic":true,"types":[]},{"text":"impl Freeze for SkinPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for SkinnablePrefab","synthetic":true,"types":[]},{"text":"impl !Freeze for VertexSkinningSystem","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for AnimationControlSystem&lt;I, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SamplerInterpolationSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MaterialChannel","synthetic":true,"types":[]},{"text":"impl Freeze for MaterialPrimitive","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AnimationCommand&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BlendMethod","synthetic":true,"types":[]},{"text":"impl Freeze for ControlState","synthetic":true,"types":[]},{"text":"impl Freeze for DeferStartRelation","synthetic":true,"types":[]},{"text":"impl Freeze for EndControl","synthetic":true,"types":[]},{"text":"impl Freeze for StepDirection","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteRenderChannel","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteRenderPrimitive","synthetic":true,"types":[]},{"text":"impl Freeze for TransformChannel","synthetic":true,"types":[]},{"text":"impl Freeze for UiTransformChannel","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SamplerPrimitive&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_assets"] = [{"text":"impl&lt;D&gt; Freeze for FormatValue&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Cache&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RonFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for AssetLoaderSystemData&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Loader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Prefab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for PrefabLoader&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for PrefabLoaderSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrefabLoaderSystemDesc&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ProgressCounter","synthetic":true,"types":[]},{"text":"impl Freeze for HotReloadBundle","synthetic":true,"types":[]},{"text":"impl Freeze for HotReloadStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for HotReloadSystem","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for SingleFile&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Directory","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Freeze for AssetStorage&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized&gt; Freeze for Handle&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Processor&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for WeakHandle&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Freeze for AssetPrefab&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Completion","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ProcessingState&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_audio"] = [{"text":"impl Freeze for AudioBundle","synthetic":true,"types":[]},{"text":"impl !Freeze for AudioEmitter","synthetic":true,"types":[]},{"text":"impl Freeze for AudioListener","synthetic":true,"types":[]},{"text":"impl Freeze for AudioPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for FlacFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Mp3Format","synthetic":true,"types":[]},{"text":"impl Freeze for OggFormat","synthetic":true,"types":[]},{"text":"impl Freeze for WavFormat","synthetic":true,"types":[]},{"text":"impl !Freeze for AudioSink","synthetic":true,"types":[]},{"text":"impl Freeze for Source","synthetic":true,"types":[]},{"text":"impl Freeze for AudioSystem","synthetic":true,"types":[]},{"text":"impl Freeze for AudioSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for DjSystem&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Freeze for DjSystemDesc&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DecoderError","synthetic":true,"types":[]},{"text":"impl Freeze for Output","synthetic":true,"types":[]},{"text":"impl Freeze for OutputIterator","synthetic":true,"types":[]}];
implementors["amethyst_config"] = [{"text":"impl Freeze for ConfigError","synthetic":true,"types":[]}];
implementors["amethyst_controls"] = [{"text":"impl&lt;T&gt; Freeze for ArcBallControlBundle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FlyControlBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ArcBallControlTag","synthetic":true,"types":[]},{"text":"impl Freeze for ControlTagPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for FlyControlTag","synthetic":true,"types":[]},{"text":"impl Freeze for HideCursor","synthetic":true,"types":[]},{"text":"impl Freeze for WindowFocus","synthetic":true,"types":[]},{"text":"impl Freeze for ArcBallRotationSystem","synthetic":true,"types":[]},{"text":"impl Freeze for CursorHideSystem","synthetic":true,"types":[]},{"text":"impl Freeze for CursorHideSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FlyMovementSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FlyMovementSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for FreeRotationSystem","synthetic":true,"types":[]},{"text":"impl Freeze for FreeRotationSystemDesc","synthetic":true,"types":[]},{"text":"impl !Freeze for MouseFocusUpdateSystem","synthetic":true,"types":[]},{"text":"impl Freeze for MouseFocusUpdateSystemDesc","synthetic":true,"types":[]}];
implementors["amethyst_core"] = [{"text":"impl&lt;S, V&gt; Freeze for Pausable&lt;S, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Hidden","synthetic":true,"types":[]},{"text":"impl Freeze for HiddenPropagate","synthetic":true,"types":[]},{"text":"impl !Freeze for HideHierarchySystem","synthetic":true,"types":[]},{"text":"impl Freeze for HideHierarchySystemDesc","synthetic":true,"types":[]},{"text":"impl Freeze for Named","synthetic":true,"types":[]},{"text":"impl Freeze for Axis2","synthetic":true,"types":[]},{"text":"impl Freeze for Axis3","synthetic":true,"types":[]},{"text":"impl Freeze for AddBarrier","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for AddSystem&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; Freeze for AddSystemDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for AddThreadLocal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; Freeze for AddThreadLocalDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for AddBundle&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FrameRateLimitConfig","synthetic":true,"types":[]},{"text":"impl Freeze for FrameLimiter","synthetic":true,"types":[]},{"text":"impl Freeze for FrameRateLimitStrategy","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Plane&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Ray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl Freeze for Stopwatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TransformBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Parent","synthetic":true,"types":[]},{"text":"impl Freeze for Transform","synthetic":true,"types":[]},{"text":"impl Freeze for TransformSystemDesc","synthetic":true,"types":[]},{"text":"impl !Freeze for TransformSystem","synthetic":true,"types":[]}];
implementors["amethyst_dynamic_ui"] = [{"text":"impl&lt;C&gt; Freeze for DynamicUiBundle&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SizeConstraints","synthetic":true,"types":[]},{"text":"impl Freeze for ModalData","synthetic":true,"types":[]},{"text":"impl Freeze for NoCustomElements","synthetic":true,"types":[]},{"text":"impl Freeze for UiExtraTextData","synthetic":true,"types":[]},{"text":"impl Freeze for ImageButtonData","synthetic":true,"types":[]},{"text":"impl Freeze for I18nData","synthetic":true,"types":[]},{"text":"impl Freeze for Rect","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for LayoutElement&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Fonts","synthetic":true,"types":[]},{"text":"impl !Freeze for Textures","synthetic":true,"types":[]},{"text":"impl Freeze for WidgetConstraintBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for PaddableConstraintBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Padding","synthetic":true,"types":[]},{"text":"impl Freeze for WidgetConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for PaddableConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for LayoutVars","synthetic":true,"types":[]},{"text":"impl Freeze for Layout","synthetic":true,"types":[]},{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for ExactFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariableEditable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EditVariable","synthetic":true,"types":[]},{"text":"impl Freeze for LAYOUT","synthetic":true,"types":[]},{"text":"impl Freeze for VarType","synthetic":true,"types":[]},{"text":"impl Freeze for CenteredLayout","synthetic":true,"types":[]},{"text":"impl Freeze for LinearLayoutData","synthetic":true,"types":[]},{"text":"impl Freeze for LinearLayout","synthetic":true,"types":[]},{"text":"impl Freeze for FlowDirection","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for ItemAlignment","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraButtonData","synthetic":true,"types":[]},{"text":"impl Freeze for UiCachedImage","synthetic":true,"types":[]},{"text":"impl Freeze for UiCachedText","synthetic":true,"types":[]},{"text":"impl Freeze for FontFamilyPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for HtmlTextData","synthetic":true,"types":[]},{"text":"impl Freeze for CalculatedDimensions","synthetic":true,"types":[]},{"text":"impl Freeze for LayoutIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for Tinted","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for DynamicUiFormat&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DynamicLayout","synthetic":true,"types":[]},{"text":"impl Freeze for DynamicLayoutData","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Freeze for DynamicUiLoader&lt;'a, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UiTextPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for ResizeSystem","synthetic":true,"types":[]},{"text":"impl Freeze for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonTintAction","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonTintRetrigger","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonTintActionType","synthetic":true,"types":[]},{"text":"impl Freeze for LimnSolver","synthetic":true,"types":[]},{"text":"impl Freeze for LayoutManager","synthetic":true,"types":[]},{"text":"impl Freeze for UiFmodRetrigger","synthetic":true,"types":[]},{"text":"impl !Freeze for UiFmodSystem","synthetic":true,"types":[]},{"text":"impl Freeze for UiFmodSystemDesc","synthetic":true,"types":[]},{"text":"impl Freeze for SoundEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl Freeze for Styles","synthetic":true,"types":[]},{"text":"impl Freeze for FontFamily","synthetic":true,"types":[]},{"text":"impl Freeze for HtmlText","synthetic":true,"types":[]},{"text":"impl !Freeze for UiButtonTintSystem","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonTintSystemDesc","synthetic":true,"types":[]}];
implementors["amethyst_error"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Causes&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["amethyst_fmod"] = [{"text":"impl Freeze for FmodBundle","synthetic":true,"types":[]},{"text":"impl Freeze for EventDescription","synthetic":true,"types":[]},{"text":"impl Freeze for EventInstance","synthetic":true,"types":[]},{"text":"impl Freeze for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SoundBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for System","synthetic":true,"types":[]},{"text":"impl Freeze for Attributes3D","synthetic":true,"types":[]},{"text":"impl Freeze for CoreSystem","synthetic":true,"types":[]},{"text":"impl Freeze for DriverInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Bank","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateSystem","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for StopMode","synthetic":true,"types":[]}];
implementors["amethyst_input"] = [{"text":"impl&lt;T&gt; Freeze for Bindings&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StringBindings","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for InputBundle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for InputHandler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for InputSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for InputSystemDesc&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Axis","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BindingError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BindingsFileError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Button","synthetic":true,"types":[]},{"text":"impl Freeze for ControllerAxis","synthetic":true,"types":[]},{"text":"impl Freeze for ControllerButton","synthetic":true,"types":[]},{"text":"impl Freeze for ControllerEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for InputEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MouseAxis","synthetic":true,"types":[]},{"text":"impl Freeze for ScrollDirection","synthetic":true,"types":[]}];
implementors["amethyst_locale"] = [{"text":"impl Freeze for LocaleFormat","synthetic":true,"types":[]},{"text":"impl !Freeze for Locale","synthetic":true,"types":[]}];
implementors["amethyst_network"] = [{"text":"impl !Freeze for Message","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkSimulationTime","synthetic":true,"types":[]},{"text":"impl Freeze for NetworkSimulationTimeSystem","synthetic":true,"types":[]},{"text":"impl Freeze for TransportResource","synthetic":true,"types":[]},{"text":"impl !Freeze for NetworkSimulationEvent","synthetic":true,"types":[]},{"text":"impl Freeze for DeliveryRequirement","synthetic":true,"types":[]},{"text":"impl Freeze for UrgencyRequirement","synthetic":true,"types":[]},{"text":"impl Freeze for LaminarNetworkBundle","synthetic":true,"types":[]},{"text":"impl Freeze for LaminarSocketResource","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNetworkBundle","synthetic":true,"types":[]},{"text":"impl Freeze for TcpStreamManagementSystem","synthetic":true,"types":[]},{"text":"impl Freeze for TcpConnectionListenerSystem","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNetworkResource","synthetic":true,"types":[]},{"text":"impl Freeze for UdpNetworkBundle","synthetic":true,"types":[]},{"text":"impl Freeze for UdpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl Freeze for UdpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl Freeze for UdpSocketResource","synthetic":true,"types":[]}];
implementors["amethyst_rendy"] = [{"text":"impl&lt;B&gt; Freeze for RenderingBundle&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ActiveCamera","synthetic":true,"types":[]},{"text":"impl Freeze for Camera","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Material","synthetic":true,"types":[]},{"text":"impl Freeze for MaterialDefaults","synthetic":true,"types":[]},{"text":"impl Freeze for RenderToWindow","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for RenderBase3D&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RenderFlat2D","synthetic":true,"types":[]},{"text":"impl Freeze for RenderDebugLines","synthetic":true,"types":[]},{"text":"impl Freeze for RenderSkybox","synthetic":true,"types":[]},{"text":"impl Freeze for Sprite","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteRender","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteSheet","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteSheetFormat","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for MeshProcessorSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, G&gt; Freeze for RenderingSystem&lt;B, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for TextureProcessorSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Transparent","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for MeshPrefab&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TexturePrefab","synthetic":true,"types":[]},{"text":"impl Freeze for Mesh","synthetic":true,"types":[]},{"text":"impl Freeze for Texture","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeDetection","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for DrawBase3DDesc&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for DrawBase3D&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for DrawBase3DTransparentDesc&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for DrawBase3DTransparent&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DrawDebugLinesDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DrawDebugLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FlatPassDef","synthetic":true,"types":[]},{"text":"impl Freeze for DrawFlat2DDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DrawFlat2D&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DrawFlat2DTransparentDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DrawFlat2DTransparent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PbrPassDef","synthetic":true,"types":[]},{"text":"impl Freeze for ShadedPassDef","synthetic":true,"types":[]},{"text":"impl Freeze for DrawSkyboxDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DrawSkybox&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, C&gt; Freeze for TwoLevelBatch&lt;PK, SK, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, D&gt; Freeze for OrderedTwoLevelBatch&lt;PK, SK, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; Freeze for OneLevelBatch&lt;PK, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; Freeze for OrderedOneLevelBatch&lt;PK, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for RenderPlan&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TargetMetadata","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for TargetPlanContext&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOptions","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for TargetPlanOutputs&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TargetImage","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for OutputColor&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for RenderableAction&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RenderOrder","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for ActiveCameraPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for CameraPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for DebugLine","synthetic":true,"types":[]},{"text":"impl Freeze for DebugLinesParams","synthetic":true,"types":[]},{"text":"impl Freeze for DebugLinesComponent","synthetic":true,"types":[]},{"text":"impl Freeze for DebugLines","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for GraphicsPrefab&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ObjFormat","synthetic":true,"types":[]},{"text":"impl Freeze for MaterialPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for TextureGenerator","synthetic":true,"types":[]},{"text":"impl Freeze for DirectionalLight","synthetic":true,"types":[]},{"text":"impl Freeze for PointLight","synthetic":true,"types":[]},{"text":"impl Freeze for SpotLight","synthetic":true,"types":[]},{"text":"impl Freeze for SunLight","synthetic":true,"types":[]},{"text":"impl Freeze for LightPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for Light","synthetic":true,"types":[]},{"text":"impl Freeze for TextureOffset","synthetic":true,"types":[]},{"text":"impl Freeze for TexAlbedo","synthetic":true,"types":[]},{"text":"impl Freeze for TexEmission","synthetic":true,"types":[]},{"text":"impl Freeze for TexNormal","synthetic":true,"types":[]},{"text":"impl Freeze for TexMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Freeze for TexAmbientOcclusion","synthetic":true,"types":[]},{"text":"impl Freeze for TexCavity","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for PipelineDescBuilder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for PipelinesBuilder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AmbientColor","synthetic":true,"types":[]},{"text":"impl Freeze for Tint","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for ShapePrefab&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ShapeUpload&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InternalShape","synthetic":true,"types":[]},{"text":"impl Freeze for Shape","synthetic":true,"types":[]},{"text":"impl Freeze for JointWeights","synthetic":true,"types":[]},{"text":"impl Freeze for JointIds","synthetic":true,"types":[]},{"text":"impl Freeze for JointCombined","synthetic":true,"types":[]},{"text":"impl Freeze for JointTransforms","synthetic":true,"types":[]},{"text":"impl Freeze for JointTransformsPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for TextureCoordinates","synthetic":true,"types":[]},{"text":"impl Freeze for SpritePosition","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteList","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteGrid","synthetic":true,"types":[]},{"text":"impl Freeze for Sprites","synthetic":true,"types":[]},{"text":"impl !Freeze for SpriteSheetLoadedSet","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteRenderPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteScenePrefab","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteSheetPrefab","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteSheetReference","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteVisibility","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteVisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for EnvironmentSub&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for FlatEnvironmentSub&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MaterialId","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for MaterialSub&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SkinningSub&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TextureId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for TextureSub&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for DynamicUniform&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for IndexData&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Freeze for VertexData&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, V, T&gt; Freeze for DynamicVertexData&lt;B, V, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CameraGatherer","synthetic":true,"types":[]},{"text":"impl Freeze for AmbientGatherer","synthetic":true,"types":[]},{"text":"impl Freeze for MeshData","synthetic":true,"types":[]},{"text":"impl Freeze for TextureData","synthetic":true,"types":[]},{"text":"impl Freeze for BackendVariant","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for VisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl Freeze for BoundingSphere","synthetic":true,"types":[]},{"text":"impl Freeze for Frustum","synthetic":true,"types":[]},{"text":"impl Freeze for TextureOffset","synthetic":true,"types":[]},{"text":"impl Freeze for ViewArgs","synthetic":true,"types":[]},{"text":"impl Freeze for Tint","synthetic":true,"types":[]},{"text":"impl Freeze for VertexArgs","synthetic":true,"types":[]},{"text":"impl Freeze for JointsOffset","synthetic":true,"types":[]},{"text":"impl Freeze for SkinnedVertexArgs","synthetic":true,"types":[]},{"text":"impl Freeze for PointLight","synthetic":true,"types":[]},{"text":"impl Freeze for DirectionalLight","synthetic":true,"types":[]},{"text":"impl Freeze for SpotLight","synthetic":true,"types":[]},{"text":"impl Freeze for Environment","synthetic":true,"types":[]},{"text":"impl Freeze for Material","synthetic":true,"types":[]},{"text":"impl Freeze for SpriteArgs","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for LookupBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; Freeze for TapCountIterator&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_ui"] = [{"text":"impl Freeze for BlinkSystem","synthetic":true,"types":[]},{"text":"impl&lt;T, C, W, G&gt; Freeze for UiBundle&lt;T, C, W, G&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UiButton","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonAction","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonActionRetrigger","synthetic":true,"types":[]},{"text":"impl&lt;G, I&gt; Freeze for UiButtonBuilder&lt;G, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I&gt; Freeze for UiButtonBuilderResources&lt;'a, G, I&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for UiButtonSystem","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DragWidgetSystemDesc&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Draggable","synthetic":true,"types":[]},{"text":"impl Freeze for Interactable","synthetic":true,"types":[]},{"text":"impl Freeze for UiEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UiMouseSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for EventRetriggerSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EventRetriggerSystemDesc&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FontAsset","synthetic":true,"types":[]},{"text":"impl Freeze for TtfFormat","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UiGlyphsSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UiGlyphsSystemDesc&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UiLabel","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for UiLabelBuilder&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for UiLabelBuilderResources&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for UiTransformSystem","synthetic":true,"types":[]},{"text":"impl Freeze for UiTransformSystemDesc","synthetic":true,"types":[]},{"text":"impl Freeze for Mask","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DrawUi&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DrawUiDesc","synthetic":true,"types":[]},{"text":"impl Freeze for RenderUi","synthetic":true,"types":[]},{"text":"impl Freeze for TextEditingPrefab","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for UiButtonData&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, W&gt; Freeze for UiCreator&lt;'a, C, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for UiFormat&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UiImagePrefab","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, W&gt; Freeze for UiLoader&lt;'a, C, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UiTextData","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for UiTransformData&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for ResizeSystem","synthetic":true,"types":[]},{"text":"impl Freeze for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl Freeze for UiResize","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for Selectable&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Selected","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; !Freeze for SelectionKeyboardSystem&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for SelectionKeyboardSystemDesc&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; !Freeze for SelectionMouseSystem&lt;G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Freeze for SelectionMouseSystemDesc&lt;G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for CacheSelectionOrderSystem&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CachedSelectionOrder","synthetic":true,"types":[]},{"text":"impl Freeze for UiPlaySoundAction","synthetic":true,"types":[]},{"text":"impl Freeze for UiSoundRetrigger","synthetic":true,"types":[]},{"text":"impl !Freeze for UiSoundSystem","synthetic":true,"types":[]},{"text":"impl Freeze for UiSoundSystemDesc","synthetic":true,"types":[]},{"text":"impl Freeze for TextEditing","synthetic":true,"types":[]},{"text":"impl !Freeze for TextEditingMouseSystem","synthetic":true,"types":[]},{"text":"impl Freeze for TextEditingMouseSystemDesc","synthetic":true,"types":[]},{"text":"impl Freeze for TextSection","synthetic":true,"types":[]},{"text":"impl Freeze for UiMultipartText","synthetic":true,"types":[]},{"text":"impl Freeze for UiText","synthetic":true,"types":[]},{"text":"impl !Freeze for TextEditingInputSystem","synthetic":true,"types":[]},{"text":"impl Freeze for TextEditingInputSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UiFinder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UiTransform","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Freeze for Widgets&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UiButtonActionType","synthetic":true,"types":[]},{"text":"impl Freeze for UiEventType","synthetic":true,"types":[]},{"text":"impl Freeze for UiImage","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for ScaleMode","synthetic":true,"types":[]},{"text":"impl Freeze for Stretch","synthetic":true,"types":[]},{"text":"impl Freeze for NoCustomUi","synthetic":true,"types":[]},{"text":"impl Freeze for UiImageLoadPrefab","synthetic":true,"types":[]},{"text":"impl&lt;C, W, G&gt; Freeze for UiWidget&lt;C, W, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LineMode","synthetic":true,"types":[]}];
implementors["amethyst_utils"] = [{"text":"impl Freeze for AutoFov","synthetic":true,"types":[]},{"text":"impl Freeze for AutoFovSystem","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for CircularBuffer&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FpsCounter","synthetic":true,"types":[]},{"text":"impl Freeze for FpsCounterSystem","synthetic":true,"types":[]},{"text":"impl Freeze for FpsCounterBundle","synthetic":true,"types":[]},{"text":"impl Freeze for CameraOrthoWorldCoordinates","synthetic":true,"types":[]},{"text":"impl Freeze for CameraOrtho","synthetic":true,"types":[]},{"text":"impl Freeze for CameraOrthoSystem","synthetic":true,"types":[]},{"text":"impl Freeze for CameraNormalizeMode","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Removal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; Freeze for BasicScenePrefab&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Tag&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TagFinder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DestroyAtTime","synthetic":true,"types":[]},{"text":"impl Freeze for DestroyInTime","synthetic":true,"types":[]},{"text":"impl Freeze for DestroyAtTimeSystem","synthetic":true,"types":[]},{"text":"impl Freeze for DestroyInTimeSystem","synthetic":true,"types":[]}];
implementors["amethyst_window"] = [{"text":"impl Freeze for WindowBundle","synthetic":true,"types":[]},{"text":"impl Freeze for DisplayConfig","synthetic":true,"types":[]},{"text":"impl Freeze for MonitorIdent","synthetic":true,"types":[]},{"text":"impl Freeze for ScreenDimensions","synthetic":true,"types":[]},{"text":"impl !Freeze for EventsLoopSystem","synthetic":true,"types":[]},{"text":"impl Freeze for WindowSystem","synthetic":true,"types":[]}];
implementors["andrew"] = [{"text":"impl&lt;'a&gt; Freeze for Canvas&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Endian","synthetic":true,"types":[]},{"text":"impl Freeze for Line","synthetic":true,"types":[]},{"text":"impl Freeze for Sides","synthetic":true,"types":[]},{"text":"impl Freeze for Rectangle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FontConfig","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Freeze for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Freeze for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Freeze for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; !Freeze for Atom&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !Freeze for AtomSetOnce&lt;P&gt;","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Freeze for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; Freeze for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PrintFmt","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Freeze for PodCastError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl !Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for BytesMut","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cassowary"] = [{"text":"impl Freeze for Variable","synthetic":true,"types":[]},{"text":"impl Freeze for Term","synthetic":true,"types":[]},{"text":"impl Freeze for Expression","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for PartialConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for Solver","synthetic":true,"types":[]},{"text":"impl Freeze for RelationalOperator","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedRelation","synthetic":true,"types":[]},{"text":"impl Freeze for AddConstraintError","synthetic":true,"types":[]},{"text":"impl Freeze for RemoveConstraintError","synthetic":true,"types":[]},{"text":"impl Freeze for AddEditVariableError","synthetic":true,"types":[]},{"text":"impl Freeze for RemoveEditVariableError","synthetic":true,"types":[]},{"text":"impl Freeze for SuggestValueError","synthetic":true,"types":[]}];
implementors["cgmath"] = [{"text":"impl&lt;S&gt; Freeze for Matrix2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Matrix3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Matrix4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Quaternion&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Vector1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Vector2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Vector3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Vector4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Deg&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Rad&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Euler&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Point1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Point2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Point3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Basis2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Basis3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; Freeze for Decomposed&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as VectorSpace&gt;::Scalar: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for PerspectiveFov&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Perspective&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Ortho&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["claxon"] = [{"text":"impl&lt;R&gt; Freeze for FlacReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FlacReaderOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FlacSamples&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StereoSamples&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FrameReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufferedReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Bitstream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StreamInfo","synthetic":true,"types":[]},{"text":"impl Freeze for SeekPoint","synthetic":true,"types":[]},{"text":"impl Freeze for SeekTable","synthetic":true,"types":[]},{"text":"impl Freeze for VorbisComment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Tags&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GetTag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MetadataBlockReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataBlock","synthetic":true,"types":[]}];
implementors["clipboard"] = [{"text":"impl Freeze for Primary","synthetic":true,"types":[]},{"text":"impl Freeze for Clipboard","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;Clipboard&gt; !Freeze for X11ClipboardContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NopClipboardContext","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl Freeze for NeuQuant","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl Freeze for ColoredString","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for Styles","synthetic":true,"types":[]},{"text":"impl !Freeze for ShouldColorize","synthetic":true,"types":[]},{"text":"impl Freeze for SHOULD_COLORIZE","synthetic":true,"types":[]}];
implementors["colorful"] = [{"text":"impl Freeze for Colorado","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for ColorMode","synthetic":true,"types":[]},{"text":"impl Freeze for Symbol","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl Freeze for CString","synthetic":true,"types":[]},{"text":"impl Freeze for RGB","synthetic":true,"types":[]},{"text":"impl Freeze for HSL","synthetic":true,"types":[]}];
implementors["cpal"] = [{"text":"impl Freeze for HostUnavailable","synthetic":true,"types":[]},{"text":"impl Freeze for BackendSpecificError","synthetic":true,"types":[]},{"text":"impl Freeze for Device","synthetic":true,"types":[]},{"text":"impl Freeze for Devices","synthetic":true,"types":[]},{"text":"impl !Freeze for EventLoop","synthetic":true,"types":[]},{"text":"impl Freeze for Host","synthetic":true,"types":[]},{"text":"impl Freeze for SupportedInputFormats","synthetic":true,"types":[]},{"text":"impl Freeze for SupportedOutputFormats","synthetic":true,"types":[]},{"text":"impl Freeze for StreamId","synthetic":true,"types":[]},{"text":"impl Freeze for SampleRate","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for SupportedFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for InputBuffer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for OutputBuffer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DevicesError","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceNameError","synthetic":true,"types":[]},{"text":"impl Freeze for SupportedFormatsError","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultFormatError","synthetic":true,"types":[]},{"text":"impl Freeze for BuildStreamError","synthetic":true,"types":[]},{"text":"impl Freeze for PlayStreamError","synthetic":true,"types":[]},{"text":"impl Freeze for PauseStreamError","synthetic":true,"types":[]},{"text":"impl Freeze for StreamError","synthetic":true,"types":[]},{"text":"impl Freeze for HostId","synthetic":true,"types":[]},{"text":"impl Freeze for SampleFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StreamData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnknownTypeInputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnknownTypeOutputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Host","synthetic":true,"types":[]},{"text":"impl Freeze for Device","synthetic":true,"types":[]},{"text":"impl !Freeze for EventLoop","synthetic":true,"types":[]},{"text":"impl Freeze for StreamId","synthetic":true,"types":[]},{"text":"impl Freeze for Devices","synthetic":true,"types":[]}];
implementors["crc"] = [{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryReadyError","synthetic":true,"types":[]},{"text":"impl Freeze for TrySelectError","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Freeze for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T&gt; !Freeze for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T, P&gt; Freeze for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; Freeze for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Collector","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !Freeze for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; Freeze for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for AtomicCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Parker","synthetic":true,"types":[]},{"text":"impl Freeze for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ShardedLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Freeze for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Freeze for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Freeze for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["deflate"] = [{"text":"impl Freeze for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Freeze for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dlib"] = [{"text":"impl Freeze for DlError","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Freeze for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Logger","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for WriteStyle","synthetic":true,"types":[]},{"text":"impl !Freeze for Filter","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for StyledValue&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Formatter","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampPrecision","synthetic":true,"types":[]}];
implementors["erased_serde"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T&gt; Freeze for Angle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Box2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for HomogeneousVector&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Unit&gt; Freeze for Length&lt;T, Unit&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NonEmpty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Point2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Point3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for Scale&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for Transform2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for Transform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BoolVector2D","synthetic":true,"types":[]},{"text":"impl Freeze for BoolVector3D","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Vector2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Vector3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Box3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Rect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for RigidTransform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for Rotation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for Rotation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for SideOffsets2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Size2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Size3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for Translation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Freeze for Translation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownUnit","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Freeze for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Freeze for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fern"] = [{"text":"impl Freeze for Dispatch","synthetic":true,"types":[]},{"text":"impl !Freeze for Output","synthetic":true,"types":[]},{"text":"impl Freeze for Panic","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FormatCallback&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InitError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WithFgColor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColoredLevelConfig","synthetic":true,"types":[]}];
implementors["float_ord"] = [{"text":"impl&lt;T&gt; Freeze for FloatOrd&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fluent_bundle"] = [{"text":"impl&lt;'m&gt; Freeze for FluentMessage&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FluentResource","synthetic":true,"types":[]},{"text":"impl Freeze for FluentError","synthetic":true,"types":[]},{"text":"impl&lt;'bundle, R, M&gt; Freeze for Scope&lt;'bundle, R, M&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResolverError","synthetic":true,"types":[]},{"text":"impl Freeze for FluentNumberOptions","synthetic":true,"types":[]},{"text":"impl Freeze for FluentNumber","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; Freeze for DisplayableNode&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FluentNumberStyle","synthetic":true,"types":[]},{"text":"impl Freeze for FluentNumberCurrencyDisplayStyle","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; Freeze for DisplayableNodeType&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; Freeze for FluentValue&lt;'source&gt;","synthetic":true,"types":[]}];
implementors["fluent_langneg"] = [{"text":"impl Freeze for NegotiationStrategy","synthetic":true,"types":[]}];
implementors["fluent_syntax"] = [{"text":"impl&lt;'ast&gt; Freeze for Resource&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Message&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Term&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Pattern&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Attribute&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Identifier&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Variant&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for CallArguments&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for NamedArgument&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for ResourceEntry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Entry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for PatternElement&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for VariantKey&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Comment&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for InlineExpression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Freeze for Expression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParserError","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]}];
implementors["fmod_sys"] = [{"text":"impl Freeze for FMOD_SYSTEM","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SOUND","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CHANNELCONTROL","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CHANNEL","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CHANNELGROUP","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SOUNDGROUP","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_REVERB3D","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSPCONNECTION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_POLYGON","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_GEOMETRY","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SYNCPOINT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_ASYNCREADINFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_VECTOR","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_3D_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_GUID","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_PLUGINLIST","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_TAG","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CREATESOUNDEXINFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_REVERB_PROPERTIES","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_ERRORCALLBACK_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CODEC_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CODEC_WAVEFORMAT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CODEC_STATE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_BUFFER_ARRAY","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_COMPLEX","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_FLOAT_MAPPING","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_DESC_FLOAT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_DESC_INT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_DESC_BOOL","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_DESC_DATA","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_DESC","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_OVERALLGAIN","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_3DATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_SIDECHAIN","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_FFT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_STATE_DFT_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_STATE_PAN_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_STATE_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_STATE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_METERING_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_OUTPUT_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_OUTPUT_STATE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_OUTPUT_OBJECT3DINFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_SYSTEM","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_EVENTDESCRIPTION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_EVENTINSTANCE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_BUS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_VCA","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_BANK","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_COMMANDREPLAY","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_BANK_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_PARAMETER_ID","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_PARAMETER_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_USER_PROPERTY","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_CPU_USAGE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_BUFFER_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_BUFFER_USAGE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_SOUND_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_COMMAND_INFO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_MEMORY_USAGE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_DESC__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_RESULT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CHANNELCONTROL_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_OUTPUTTYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DEBUG_MODE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SPEAKER","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CHANNELORDER","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_PLUGINTYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SOUND_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SOUND_FORMAT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_OPENSTATE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_SOUNDGROUP_BEHAVIOR","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CHANNELCONTROL_CALLBACK_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_CHANNELCONTROL_DSP_INDEX","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_ERRORCALLBACK_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_RESAMPLER","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSPCONNECTION_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_TAGTYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_TAGDATATYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_OSCILLATOR","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_LOWPASS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_ITLOWPASS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_HIGHPASS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_ECHO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_FADER","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_FLANGE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_DISTORTION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_NORMALIZE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_LIMITER","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMEQ","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_MULTIBAND_EQ","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PITCHSHIFT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_CHORUS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_ITECHO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_COMPRESSOR","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_SFXREVERB","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_LOWPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_DELAY","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_TREMOLO","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_SEND","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_RETURN","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_HIGHPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PAN_2D_STEREO_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PAN_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PAN_3D_ROLLOFF_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PAN","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_THREE_EQ","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_FFT_WINDOW","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_FFT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_ENVELOPEFOLLOWER","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_CONVOLUTION_REVERB","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_CHANNELMIX_OUTPUT","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_CHANNELMIX","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_TRANSCEIVER_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_TRANSCEIVER","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_OBJECTPAN","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PROCESS_OPERATION","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PAN_SURROUND_FLAGS","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_DSP_PARAMETER_DATA_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_LOADING_STATE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_LOAD_MEMORY_MODE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_USER_PROPERTY_TYPE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_EVENT_PROPERTY","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_PLAYBACK_STATE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_STOP_MODE","synthetic":true,"types":[]},{"text":"impl Freeze for FMOD_STUDIO_INSTANCETYPE","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Freeze for FnvHasher","synthetic":true,"types":[]}];
implementors["font_kit"] = [{"text":"impl Freeze for Canvas","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for RasterizationOptions","synthetic":true,"types":[]},{"text":"impl Freeze for FontLoadingError","synthetic":true,"types":[]},{"text":"impl Freeze for GlyphLoadingError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectionError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Family&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FamilyHandle","synthetic":true,"types":[]},{"text":"impl Freeze for FamilyName","synthetic":true,"types":[]},{"text":"impl Freeze for FileType","synthetic":true,"types":[]},{"text":"impl Freeze for Handle","synthetic":true,"types":[]},{"text":"impl Freeze for HintingOptions","synthetic":true,"types":[]},{"text":"impl Freeze for FontTransform","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; Freeze for FallbackResult&lt;Font&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; Freeze for FallbackFont&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Font","synthetic":true,"types":[]},{"text":"impl Freeze for Metrics","synthetic":true,"types":[]},{"text":"impl Freeze for Properties","synthetic":true,"types":[]},{"text":"impl Freeze for Weight","synthetic":true,"types":[]},{"text":"impl Freeze for Stretch","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl Freeze for FontconfigSource","synthetic":true,"types":[]},{"text":"impl Freeze for FsSource","synthetic":true,"types":[]},{"text":"impl Freeze for MemSource","synthetic":true,"types":[]},{"text":"impl Freeze for MultiSource","synthetic":true,"types":[]}];
implementors["fontconfig"] = [{"text":"impl Freeze for struct__FcMatrix","synthetic":true,"types":[]},{"text":"impl Freeze for struct__FcObjectType","synthetic":true,"types":[]},{"text":"impl Freeze for struct__FcConstant","synthetic":true,"types":[]},{"text":"impl Freeze for struct__FcValue","synthetic":true,"types":[]},{"text":"impl Freeze for struct__FcFontSet","synthetic":true,"types":[]},{"text":"impl Freeze for struct__FcObjectSet","synthetic":true,"types":[]}];
implementors["freetype"] = [{"text":"impl&lt;T&gt; Freeze for __BindgenUnionField&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FT_MemoryRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_StreamRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_StreamDesc_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Vector_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_BBox_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Bitmap_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Outline_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Outline_Funcs_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_RasterRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Span_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Raster_Params_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Raster_Funcs_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_UnitVector_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Matrix_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Data_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Generic_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_ListNodeRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_ListRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Glyph_Metrics_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Bitmap_Size_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_LibraryRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_ModuleRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_DriverRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_RendererRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_FaceRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_SizeRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_GlyphSlotRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_CharMapRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Face_InternalRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Size_InternalRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Size_Metrics_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_SubGlyphRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Slot_InternalRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Parameter_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Open_Args_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Size_RequestRec_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Module_Class_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Pixel_Mode_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Glyph_Format_","synthetic":true,"types":[]},{"text":"impl Freeze for _bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Freeze for _bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Encoding_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Size_Request_Type_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Render_Mode_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Kerning_Mode_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_LcdFilter_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Sfnt_Tag_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_TrueTypeEngineType_","synthetic":true,"types":[]},{"text":"impl Freeze for FT_Orientation_","synthetic":true,"types":[]},{"text":"impl Freeze for TT_OS2","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl Freeze for FxHasher","synthetic":true,"types":[]},{"text":"impl Freeze for FxHasher64","synthetic":true,"types":[]},{"text":"impl Freeze for FxHasher32","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, U&gt; Freeze for GenericArray&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, N&gt; Freeze for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ArrayLength&lt;T&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["genmesh"] = [{"text":"impl&lt;T&gt; Freeze for Line&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Quad&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Triangle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; Freeze for VerticesIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; Freeze for TriangulateIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Freeze for LruIndexer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Neighbors&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Vertex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Polygon&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, V&gt; Freeze for SharedVertexIterator&lt;'a, T, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, V&gt; Freeze for IndexedPolygonIterator&lt;'a, T, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Circle","synthetic":true,"types":[]},{"text":"impl Freeze for Cone","synthetic":true,"types":[]},{"text":"impl Freeze for Cube","synthetic":true,"types":[]},{"text":"impl Freeze for Cylinder","synthetic":true,"types":[]},{"text":"impl Freeze for IcoSphere","synthetic":true,"types":[]},{"text":"impl Freeze for Plane","synthetic":true,"types":[]},{"text":"impl Freeze for SphereUv","synthetic":true,"types":[]},{"text":"impl Freeze for Torus","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["gfx_backend_empty"] = [{"text":"impl Freeze for PhysicalDevice","synthetic":true,"types":[]},{"text":"impl Freeze for RawCommandQueue","synthetic":true,"types":[]},{"text":"impl Freeze for Device","synthetic":true,"types":[]},{"text":"impl Freeze for QueueFamily","synthetic":true,"types":[]},{"text":"impl Freeze for RawCommandPool","synthetic":true,"types":[]},{"text":"impl Freeze for RawCommandBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptorPool","synthetic":true,"types":[]},{"text":"impl Freeze for Surface","synthetic":true,"types":[]},{"text":"impl Freeze for Swapchain","synthetic":true,"types":[]},{"text":"impl Freeze for Instance","synthetic":true,"types":[]},{"text":"impl Freeze for Backend","synthetic":true,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl Freeze for Features","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Gpu&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Primitive","synthetic":true,"types":[]},{"text":"impl Freeze for IndexType","synthetic":true,"types":[]},{"text":"impl Freeze for SubmissionError","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryTypeId","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryType","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryProperties","synthetic":true,"types":[]},{"text":"impl Freeze for AdapterInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Adapter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PhysicalDevice: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceType","synthetic":true,"types":[]},{"text":"impl Freeze for Usage","synthetic":true,"types":[]},{"text":"impl Freeze for Access","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for IndexBufferView&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CreationError","synthetic":true,"types":[]},{"text":"impl Freeze for ViewCreationError","synthetic":true,"types":[]},{"text":"impl Freeze for ClearDepthStencil","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResolve","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBlit","synthetic":true,"types":[]},{"text":"impl Freeze for ClearDepthStencilRaw","synthetic":true,"types":[]},{"text":"impl Freeze for CommandBufferFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for CommandBufferInheritanceInfo&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Freeze for RenderSubpassCommon&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for RenderPassInlineEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for RenderPassSecondaryEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, S, R&gt; Freeze for SubpassCommandBuffer&lt;B, S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BufferCopy","synthetic":true,"types":[]},{"text":"impl Freeze for ImageCopy","synthetic":true,"types":[]},{"text":"impl Freeze for BufferImageCopy","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; Freeze for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ClearColorRaw","synthetic":true,"types":[]},{"text":"impl Freeze for ClearValueRaw","synthetic":true,"types":[]},{"text":"impl Freeze for ClearColor","synthetic":true,"types":[]},{"text":"impl Freeze for ClearValue","synthetic":true,"types":[]},{"text":"impl Freeze for AttachmentClear","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for SubpassContents","synthetic":true,"types":[]},{"text":"impl Freeze for OneShot","synthetic":true,"types":[]},{"text":"impl Freeze for MultiShot","synthetic":true,"types":[]},{"text":"impl Freeze for Primary","synthetic":true,"types":[]},{"text":"impl Freeze for Secondary","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceLost","synthetic":true,"types":[]},{"text":"impl Freeze for SurfaceLost","synthetic":true,"types":[]},{"text":"impl Freeze for WindowInUse","synthetic":true,"types":[]},{"text":"impl Freeze for OutOfMemory","synthetic":true,"types":[]},{"text":"impl Freeze for OomOrDeviceLost","synthetic":true,"types":[]},{"text":"impl Freeze for AllocationError","synthetic":true,"types":[]},{"text":"impl Freeze for BindError","synthetic":true,"types":[]},{"text":"impl Freeze for WaitFor","synthetic":true,"types":[]},{"text":"impl Freeze for ShaderError","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceCreationError","synthetic":true,"types":[]},{"text":"impl Freeze for HostExecutionError","synthetic":true,"types":[]},{"text":"impl Freeze for Aspects","synthetic":true,"types":[]},{"text":"impl Freeze for FormatDesc","synthetic":true,"types":[]},{"text":"impl Freeze for FormatBits","synthetic":true,"types":[]},{"text":"impl Freeze for Swizzle","synthetic":true,"types":[]},{"text":"impl Freeze for Properties","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFeature","synthetic":true,"types":[]},{"text":"impl Freeze for BufferFeature","synthetic":true,"types":[]},{"text":"impl Freeze for BaseFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Rg4Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba4Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra4Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for R5g6b5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for B5g6r5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for R5g5b5a1Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for B5g5r5a1Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for A1r5g5b5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for R8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for R8Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for R8Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for R8Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for R8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for R8Sint","synthetic":true,"types":[]},{"text":"impl Freeze for R8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Rg8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rg8Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rg8Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rg8Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rg8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg8Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb8Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb8Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb8Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb8Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr8Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr8Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr8Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr8Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba8Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba8Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba8Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba8Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra8Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra8Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra8Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra8Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr8Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr8Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr8Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr8Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for A2r10g10b10Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for A2r10g10b10Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for A2r10g10b10Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for A2r10g10b10Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for A2r10g10b10Uint","synthetic":true,"types":[]},{"text":"impl Freeze for A2r10g10b10Sint","synthetic":true,"types":[]},{"text":"impl Freeze for A2b10g10r10Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for A2b10g10r10Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for A2b10g10r10Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for A2b10g10r10Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for A2b10g10r10Uint","synthetic":true,"types":[]},{"text":"impl Freeze for A2b10g10r10Sint","synthetic":true,"types":[]},{"text":"impl Freeze for R16Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for R16Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for R16Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for R16Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for R16Uint","synthetic":true,"types":[]},{"text":"impl Freeze for R16Sint","synthetic":true,"types":[]},{"text":"impl Freeze for R16Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rg16Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rg16Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rg16Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rg16Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rg16Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg16Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg16Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb16Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb16Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb16Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb16Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb16Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb16Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb16Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba16Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba16Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba16Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba16Sscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba16Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba16Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba16Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for R32Uint","synthetic":true,"types":[]},{"text":"impl Freeze for R32Sint","synthetic":true,"types":[]},{"text":"impl Freeze for R32Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rg32Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg32Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg32Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb32Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb32Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb32Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba32Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba32Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba32Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for R64Uint","synthetic":true,"types":[]},{"text":"impl Freeze for R64Sint","synthetic":true,"types":[]},{"text":"impl Freeze for R64Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rg64Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg64Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rg64Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb64Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb64Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb64Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba64Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba64Sint","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba64Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for B10g11r11Ufloat","synthetic":true,"types":[]},{"text":"impl Freeze for E5b9g9r9Ufloat","synthetic":true,"types":[]},{"text":"impl Freeze for D16Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for X8D24Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for D32Sfloat","synthetic":true,"types":[]},{"text":"impl Freeze for S8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for D16UnormS8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for D24UnormS8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for D32SfloatS8Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Bc1RgbUnorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc1RgbSrgb","synthetic":true,"types":[]},{"text":"impl Freeze for Bc1RgbaUnorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc1RgbaSrgb","synthetic":true,"types":[]},{"text":"impl Freeze for Bc2Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc2Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Bc3Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc3Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Bc4Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc4Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc5Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc6hUfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Bc6hSfloat","synthetic":true,"types":[]},{"text":"impl Freeze for Bc7Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Bc7Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Etc2R8g8b8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Etc2R8g8b8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Etc2R8g8b8a1Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Etc2R8g8b8a1Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Etc2R8g8b8a8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Etc2R8g8b8a8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for EacR11Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for EacR11Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for EacR11g11Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for EacR11g11Snorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc4x4Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc4x4Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc5x4Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc5x4Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc5x5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc5x5Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc6x5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc6x5Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc6x6Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc6x6Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc8x5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc8x5Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc8x6Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc8x6Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc8x8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc8x8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x5Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x5Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x6Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x6Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x8Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x8Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x10Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc10x10Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc12x10Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc12x10Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Astc12x12Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Astc12x12Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Component","synthetic":true,"types":[]},{"text":"impl Freeze for ChannelType","synthetic":true,"types":[]},{"text":"impl Freeze for SurfaceType","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for Extent","synthetic":true,"types":[]},{"text":"impl Freeze for Offset","synthetic":true,"types":[]},{"text":"impl Freeze for ViewCapabilities","synthetic":true,"types":[]},{"text":"impl Freeze for Usage","synthetic":true,"types":[]},{"text":"impl Freeze for Lod","synthetic":true,"types":[]},{"text":"impl Freeze for PackedColor","synthetic":true,"types":[]},{"text":"impl Freeze for SamplerInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Access","synthetic":true,"types":[]},{"text":"impl Freeze for Subresource","synthetic":true,"types":[]},{"text":"impl Freeze for SubresourceLayers","synthetic":true,"types":[]},{"text":"impl Freeze for SubresourceRange","synthetic":true,"types":[]},{"text":"impl Freeze for FormatProperties","synthetic":true,"types":[]},{"text":"impl Freeze for SubresourceFootprint","synthetic":true,"types":[]},{"text":"impl Freeze for Tiling","synthetic":true,"types":[]},{"text":"impl Freeze for CreationError","synthetic":true,"types":[]},{"text":"impl Freeze for ViewError","synthetic":true,"types":[]},{"text":"impl Freeze for LayerError","synthetic":true,"types":[]},{"text":"impl Freeze for Filter","synthetic":true,"types":[]},{"text":"impl Freeze for Anisotropic","synthetic":true,"types":[]},{"text":"impl Freeze for CubeFace","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for ViewKind","synthetic":true,"types":[]},{"text":"impl Freeze for WrapMode","synthetic":true,"types":[]},{"text":"impl Freeze for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; Freeze for Reader&lt;'a, B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; Freeze for Writer&lt;'a, B, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Properties","synthetic":true,"types":[]},{"text":"impl Freeze for Dependencies","synthetic":true,"types":[]},{"text":"impl Freeze for Requirements","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for Barrier&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AttachmentOps","synthetic":true,"types":[]},{"text":"impl Freeze for Attachment","synthetic":true,"types":[]},{"text":"impl Freeze for SubpassDependency","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SubpassDesc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for Subpass&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AttachmentLoadOp","synthetic":true,"types":[]},{"text":"impl Freeze for AttachmentStoreOp","synthetic":true,"types":[]},{"text":"impl Freeze for SubpassRef","synthetic":true,"types":[]},{"text":"impl Freeze for CommandPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Freeze for CommandPool&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for ComputePipelineDesc&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptorSetLayoutBinding","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptorRangeDesc","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, WI&gt; Freeze for DescriptorSetWrite&lt;'a, B, WI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;WI: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for DescriptorSetCopy&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptorPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Rect","synthetic":true,"types":[]},{"text":"impl Freeze for ClearRect","synthetic":true,"types":[]},{"text":"impl Freeze for Viewport","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for GraphicsShaderSet&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BakedStates","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for GraphicsPipelineDesc&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DepthBias","synthetic":true,"types":[]},{"text":"impl Freeze for Rasterizer","synthetic":true,"types":[]},{"text":"impl Freeze for BlendDesc","synthetic":true,"types":[]},{"text":"impl Freeze for Multisampling","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Element&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for VertexBufferDesc","synthetic":true,"types":[]},{"text":"impl Freeze for AttributeDesc","synthetic":true,"types":[]},{"text":"impl Freeze for InputAssemblerDesc","synthetic":true,"types":[]},{"text":"impl Freeze for ColorMask","synthetic":true,"types":[]},{"text":"impl Freeze for BlendState","synthetic":true,"types":[]},{"text":"impl Freeze for ColorBlendDesc","synthetic":true,"types":[]},{"text":"impl Freeze for DepthTest","synthetic":true,"types":[]},{"text":"impl Freeze for StencilFace","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Sided&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StencilTest","synthetic":true,"types":[]},{"text":"impl Freeze for DepthStencilDesc","synthetic":true,"types":[]},{"text":"impl Freeze for Face","synthetic":true,"types":[]},{"text":"impl Freeze for PipelineStage","synthetic":true,"types":[]},{"text":"impl Freeze for ShaderStageFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for EntryPoint&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PipelineCreationFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SpecializationConstant","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Specialization&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptorType","synthetic":true,"types":[]},{"text":"impl Freeze for AllocationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for Descriptor&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PolygonMode","synthetic":true,"types":[]},{"text":"impl Freeze for FrontFace","synthetic":true,"types":[]},{"text":"impl Freeze for LogicOp","synthetic":true,"types":[]},{"text":"impl Freeze for VertexInputRate","synthetic":true,"types":[]},{"text":"impl Freeze for PrimitiveRestart","synthetic":true,"types":[]},{"text":"impl Freeze for Comparison","synthetic":true,"types":[]},{"text":"impl Freeze for Factor","synthetic":true,"types":[]},{"text":"impl Freeze for BlendOp","synthetic":true,"types":[]},{"text":"impl Freeze for StencilOp","synthetic":true,"types":[]},{"text":"impl Freeze for CreationError","synthetic":true,"types":[]},{"text":"impl Freeze for Stage","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for BasePipeline&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for State&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for Query&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ControlFlags","synthetic":true,"types":[]},{"text":"impl Freeze for ResultFlags","synthetic":true,"types":[]},{"text":"impl Freeze for PipelineStatistic","synthetic":true,"types":[]},{"text":"impl Freeze for CreationError","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl&lt;Ic, Iw, Is&gt; Freeze for Submission&lt;Ic, Iw, Is&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ic: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Is: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Iw: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Freeze for CommandQueue&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for QueueType","synthetic":true,"types":[]},{"text":"impl Freeze for General","synthetic":true,"types":[]},{"text":"impl Freeze for Graphics","synthetic":true,"types":[]},{"text":"impl Freeze for Compute","synthetic":true,"types":[]},{"text":"impl Freeze for Transfer","synthetic":true,"types":[]},{"text":"impl Freeze for GraphicsOrCompute","synthetic":true,"types":[]},{"text":"impl Freeze for QueueFamilyId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Freeze for QueueGroup&lt;B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Queues&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Extent2D","synthetic":true,"types":[]},{"text":"impl Freeze for SurfaceCapabilities","synthetic":true,"types":[]},{"text":"impl Freeze for CompositeAlpha","synthetic":true,"types":[]},{"text":"impl Freeze for SwapchainConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Suboptimal","synthetic":true,"types":[]},{"text":"impl Freeze for CreationError","synthetic":true,"types":[]},{"text":"impl Freeze for PresentMode","synthetic":true,"types":[]},{"text":"impl Freeze for AcquireError","synthetic":true,"types":[]},{"text":"impl Freeze for PresentError","synthetic":true,"types":[]},{"text":"impl Freeze for InitError","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl&lt;'a&gt; Freeze for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryLimit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Extension","synthetic":true,"types":[]},{"text":"impl Freeze for DisposalMethod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorOutput","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl Freeze for ExtensionData","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for LineEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugMacroOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for X86","synthetic":true,"types":[]},{"text":"impl Freeze for X86_64","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SectionId","synthetic":true,"types":[]},{"text":"impl Freeze for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl Freeze for DwUt","synthetic":true,"types":[]},{"text":"impl Freeze for DwCfa","synthetic":true,"types":[]},{"text":"impl Freeze for DwChildren","synthetic":true,"types":[]},{"text":"impl Freeze for DwTag","synthetic":true,"types":[]},{"text":"impl Freeze for DwAt","synthetic":true,"types":[]},{"text":"impl Freeze for DwForm","synthetic":true,"types":[]},{"text":"impl Freeze for DwAte","synthetic":true,"types":[]},{"text":"impl Freeze for DwLle","synthetic":true,"types":[]},{"text":"impl Freeze for DwDs","synthetic":true,"types":[]},{"text":"impl Freeze for DwEnd","synthetic":true,"types":[]},{"text":"impl Freeze for DwAccess","synthetic":true,"types":[]},{"text":"impl Freeze for DwVis","synthetic":true,"types":[]},{"text":"impl Freeze for DwVirtuality","synthetic":true,"types":[]},{"text":"impl Freeze for DwLang","synthetic":true,"types":[]},{"text":"impl Freeze for DwAddr","synthetic":true,"types":[]},{"text":"impl Freeze for DwId","synthetic":true,"types":[]},{"text":"impl Freeze for DwCc","synthetic":true,"types":[]},{"text":"impl Freeze for DwInl","synthetic":true,"types":[]},{"text":"impl Freeze for DwOrd","synthetic":true,"types":[]},{"text":"impl Freeze for DwDsc","synthetic":true,"types":[]},{"text":"impl Freeze for DwIdx","synthetic":true,"types":[]},{"text":"impl Freeze for DwDefaulted","synthetic":true,"types":[]},{"text":"impl Freeze for DwLns","synthetic":true,"types":[]},{"text":"impl Freeze for DwLne","synthetic":true,"types":[]},{"text":"impl Freeze for DwLnct","synthetic":true,"types":[]},{"text":"impl Freeze for DwMacro","synthetic":true,"types":[]},{"text":"impl Freeze for DwRle","synthetic":true,"types":[]},{"text":"impl Freeze for DwOp","synthetic":true,"types":[]},{"text":"impl Freeze for DwEhPe","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for EhHdrTable&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BaseAddresses","synthetic":true,"types":[]},{"text":"impl Freeze for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UninitializedUnwindContext&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; Freeze for RegisterRuleIter&lt;'iter, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; Freeze for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Abbreviations","synthetic":true,"types":[]},{"text":"impl Freeze for Abbreviation","synthetic":true,"types":[]},{"text":"impl Freeze for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; Freeze for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LineRow","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for OperationIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&nbsp;=&nbsp;&lt;R as Reader&gt;::Offset&gt; !Freeze for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; Freeze for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Freeze for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Freeze for EntriesCursor&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Freeze for EntriesTree&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Freeze for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Freeze for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Freeze for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Freeze for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ValueType","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["glsl_layout"] = [{"text":"impl&lt;T&gt; Freeze for Element&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AsStd140&gt;::Align: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for bmat2x2","synthetic":true,"types":[]},{"text":"impl Freeze for bmat2x3","synthetic":true,"types":[]},{"text":"impl Freeze for bmat2x4","synthetic":true,"types":[]},{"text":"impl Freeze for bmat3x2","synthetic":true,"types":[]},{"text":"impl Freeze for bmat3x3","synthetic":true,"types":[]},{"text":"impl Freeze for bmat3x4","synthetic":true,"types":[]},{"text":"impl Freeze for bmat4x2","synthetic":true,"types":[]},{"text":"impl Freeze for bmat4x3","synthetic":true,"types":[]},{"text":"impl Freeze for bmat4x4","synthetic":true,"types":[]},{"text":"impl Freeze for imat2x2","synthetic":true,"types":[]},{"text":"impl Freeze for imat2x3","synthetic":true,"types":[]},{"text":"impl Freeze for imat2x4","synthetic":true,"types":[]},{"text":"impl Freeze for imat3x2","synthetic":true,"types":[]},{"text":"impl Freeze for imat3x3","synthetic":true,"types":[]},{"text":"impl Freeze for imat3x4","synthetic":true,"types":[]},{"text":"impl Freeze for imat4x2","synthetic":true,"types":[]},{"text":"impl Freeze for imat4x3","synthetic":true,"types":[]},{"text":"impl Freeze for imat4x4","synthetic":true,"types":[]},{"text":"impl Freeze for umat2x2","synthetic":true,"types":[]},{"text":"impl Freeze for umat2x3","synthetic":true,"types":[]},{"text":"impl Freeze for umat2x4","synthetic":true,"types":[]},{"text":"impl Freeze for umat3x2","synthetic":true,"types":[]},{"text":"impl Freeze for umat3x3","synthetic":true,"types":[]},{"text":"impl Freeze for umat3x4","synthetic":true,"types":[]},{"text":"impl Freeze for umat4x2","synthetic":true,"types":[]},{"text":"impl Freeze for umat4x3","synthetic":true,"types":[]},{"text":"impl Freeze for umat4x4","synthetic":true,"types":[]},{"text":"impl Freeze for mat2x2","synthetic":true,"types":[]},{"text":"impl Freeze for mat2x3","synthetic":true,"types":[]},{"text":"impl Freeze for mat2x4","synthetic":true,"types":[]},{"text":"impl Freeze for mat3x2","synthetic":true,"types":[]},{"text":"impl Freeze for mat3x3","synthetic":true,"types":[]},{"text":"impl Freeze for mat3x4","synthetic":true,"types":[]},{"text":"impl Freeze for mat4x2","synthetic":true,"types":[]},{"text":"impl Freeze for mat4x3","synthetic":true,"types":[]},{"text":"impl Freeze for mat4x4","synthetic":true,"types":[]},{"text":"impl Freeze for dmat2x2","synthetic":true,"types":[]},{"text":"impl Freeze for dmat2x3","synthetic":true,"types":[]},{"text":"impl Freeze for dmat2x4","synthetic":true,"types":[]},{"text":"impl Freeze for dmat3x2","synthetic":true,"types":[]},{"text":"impl Freeze for dmat3x3","synthetic":true,"types":[]},{"text":"impl Freeze for dmat3x4","synthetic":true,"types":[]},{"text":"impl Freeze for dmat4x2","synthetic":true,"types":[]},{"text":"impl Freeze for dmat4x3","synthetic":true,"types":[]},{"text":"impl Freeze for dmat4x4","synthetic":true,"types":[]},{"text":"impl Freeze for boolean","synthetic":true,"types":[]},{"text":"impl Freeze for bvec2","synthetic":true,"types":[]},{"text":"impl Freeze for bvec3","synthetic":true,"types":[]},{"text":"impl Freeze for bvec4","synthetic":true,"types":[]},{"text":"impl Freeze for ivec2","synthetic":true,"types":[]},{"text":"impl Freeze for ivec3","synthetic":true,"types":[]},{"text":"impl Freeze for ivec4","synthetic":true,"types":[]},{"text":"impl Freeze for uvec2","synthetic":true,"types":[]},{"text":"impl Freeze for uvec3","synthetic":true,"types":[]},{"text":"impl Freeze for uvec4","synthetic":true,"types":[]},{"text":"impl Freeze for vec2","synthetic":true,"types":[]},{"text":"impl Freeze for vec3","synthetic":true,"types":[]},{"text":"impl Freeze for vec4","synthetic":true,"types":[]},{"text":"impl Freeze for dvec2","synthetic":true,"types":[]},{"text":"impl Freeze for dvec3","synthetic":true,"types":[]},{"text":"impl Freeze for dvec4","synthetic":true,"types":[]}];
implementors["gltf"] = [{"text":"impl&lt;'a&gt; Freeze for Animation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Accessor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Glb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Camera&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Image&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Material&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Mesh&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Primitive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Scene&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Skin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Texture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Gltf","synthetic":true,"types":[]},{"text":"impl Freeze for Document","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SparseIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ItemIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseIndicesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Sparse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexType","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Freeze for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Channel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Target&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Channels&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Rotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MorphTargetWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadOutputs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CastingIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for I8","synthetic":true,"types":[]},{"text":"impl Freeze for U8","synthetic":true,"types":[]},{"text":"impl Freeze for I16","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl Freeze for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CastingIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for I8","synthetic":true,"types":[]},{"text":"impl Freeze for U8","synthetic":true,"types":[]},{"text":"impl Freeze for I16","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl Freeze for F32","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ChunkType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for View&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Orthographic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Perspective&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Projection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ExtensionsUsed&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ExtensionsRequired&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Accessors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Animations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Buffers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Views&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cameras&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Images&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Lights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Materials&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Meshes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Scenes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Skins&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Textures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Light&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PbrMetallicRoughness&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NormalTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OcclusionTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bounds&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MorphTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Freeze for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MorphTargets&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Primitives&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Freeze for ReadMorphTargets&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadColors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadJoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadTexCoords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ReadWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CastingIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RgbU8","synthetic":true,"types":[]},{"text":"impl Freeze for RgbU16","synthetic":true,"types":[]},{"text":"impl Freeze for RgbF32","synthetic":true,"types":[]},{"text":"impl Freeze for RgbaU8","synthetic":true,"types":[]},{"text":"impl Freeze for RgbaU16","synthetic":true,"types":[]},{"text":"impl Freeze for RgbaF32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CastingIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for U32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CastingIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CastingIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for U8","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl Freeze for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CastingIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for U8","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl Freeze for F32","synthetic":true,"types":[]},{"text":"impl Freeze for Transform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Children&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Freeze for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Joints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Info&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Sampler&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["gltf_json"] = [{"text":"impl Freeze for Accessor","synthetic":true,"types":[]},{"text":"impl Freeze for Animation","synthetic":true,"types":[]},{"text":"impl Freeze for Asset","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl Freeze for Camera","synthetic":true,"types":[]},{"text":"impl Freeze for Image","synthetic":true,"types":[]},{"text":"impl Freeze for Material","synthetic":true,"types":[]},{"text":"impl Freeze for Mesh","synthetic":true,"types":[]},{"text":"impl Freeze for Node","synthetic":true,"types":[]},{"text":"impl Freeze for Scene","synthetic":true,"types":[]},{"text":"impl Freeze for Skin","synthetic":true,"types":[]},{"text":"impl Freeze for Texture","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Index&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Root","synthetic":true,"types":[]},{"text":"impl Freeze for IndexComponentType","synthetic":true,"types":[]},{"text":"impl Freeze for GenericComponentType","synthetic":true,"types":[]},{"text":"impl Freeze for ComponentType","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Indices","synthetic":true,"types":[]},{"text":"impl Freeze for Sparse","synthetic":true,"types":[]},{"text":"impl Freeze for Values","synthetic":true,"types":[]},{"text":"impl Freeze for Channel","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for Sampler","synthetic":true,"types":[]},{"text":"impl Freeze for Interpolation","synthetic":true,"types":[]},{"text":"impl Freeze for Property","synthetic":true,"types":[]},{"text":"impl Freeze for View","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for Orthographic","synthetic":true,"types":[]},{"text":"impl Freeze for Perspective","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Accessor","synthetic":true,"types":[]},{"text":"impl Freeze for Indices","synthetic":true,"types":[]},{"text":"impl Freeze for Sparse","synthetic":true,"types":[]},{"text":"impl Freeze for Values","synthetic":true,"types":[]},{"text":"impl Freeze for Animation","synthetic":true,"types":[]},{"text":"impl Freeze for Channel","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for Sampler","synthetic":true,"types":[]},{"text":"impl Freeze for Asset","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl Freeze for View","synthetic":true,"types":[]},{"text":"impl Freeze for Camera","synthetic":true,"types":[]},{"text":"impl Freeze for Orthographic","synthetic":true,"types":[]},{"text":"impl Freeze for Perspective","synthetic":true,"types":[]},{"text":"impl Freeze for Image","synthetic":true,"types":[]},{"text":"impl Freeze for Material","synthetic":true,"types":[]},{"text":"impl Freeze for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Freeze for NormalTexture","synthetic":true,"types":[]},{"text":"impl Freeze for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl Freeze for Mesh","synthetic":true,"types":[]},{"text":"impl Freeze for Primitive","synthetic":true,"types":[]},{"text":"impl Freeze for Root","synthetic":true,"types":[]},{"text":"impl Freeze for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl Freeze for Node","synthetic":true,"types":[]},{"text":"impl Freeze for Scene","synthetic":true,"types":[]},{"text":"impl Freeze for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl Freeze for Light","synthetic":true,"types":[]},{"text":"impl Freeze for Spot","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Skin","synthetic":true,"types":[]},{"text":"impl Freeze for Sampler","synthetic":true,"types":[]},{"text":"impl Freeze for Texture","synthetic":true,"types":[]},{"text":"impl Freeze for Info","synthetic":true,"types":[]},{"text":"impl Freeze for Void","synthetic":true,"types":[]},{"text":"impl Freeze for MimeType","synthetic":true,"types":[]},{"text":"impl Freeze for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Freeze for NormalTexture","synthetic":true,"types":[]},{"text":"impl Freeze for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl Freeze for AlphaCutoff","synthetic":true,"types":[]},{"text":"impl Freeze for EmissiveFactor","synthetic":true,"types":[]},{"text":"impl Freeze for PbrBaseColorFactor","synthetic":true,"types":[]},{"text":"impl Freeze for StrengthFactor","synthetic":true,"types":[]},{"text":"impl Freeze for AlphaMode","synthetic":true,"types":[]},{"text":"impl Freeze for Primitive","synthetic":true,"types":[]},{"text":"impl Freeze for MorphTarget","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for Semantic","synthetic":true,"types":[]},{"text":"impl Freeze for UnitQuaternion","synthetic":true,"types":[]},{"text":"impl Freeze for Sampler","synthetic":true,"types":[]},{"text":"impl Freeze for Info","synthetic":true,"types":[]},{"text":"impl Freeze for MagFilter","synthetic":true,"types":[]},{"text":"impl Freeze for MinFilter","synthetic":true,"types":[]},{"text":"impl Freeze for WrappingMode","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Checked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["glyph_brush"] = [{"text":"impl&lt;'a, H&gt; Freeze for GlyphBrushBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, V, H&gt; Freeze for GlyphBrush&lt;'font, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GlyphVertex","synthetic":true,"types":[]},{"text":"impl&lt;'font, H&nbsp;=&nbsp;RandomXxHashBuilder64&gt; !Freeze for GlyphCalculator&lt;'font, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'brush, 'font, H&gt; Freeze for GlyphCalculatorGuard&lt;'brush, 'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Freeze for GlyphCalculatorBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedVariedSection","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedSectionText","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariedSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Section&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Freeze for BrushAction&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BrushError","synthetic":true,"types":[]}];
implementors["glyph_brush_layout"] = [{"text":"impl Freeze for FontId","synthetic":true,"types":[]},{"text":"impl Freeze for SectionGeometry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SectionText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Freeze for Layout&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HorizontalAlign","synthetic":true,"types":[]},{"text":"impl Freeze for VerticalAlign","synthetic":true,"types":[]},{"text":"impl Freeze for LineBreak","synthetic":true,"types":[]},{"text":"impl Freeze for BuiltInLineBreaker","synthetic":true,"types":[]},{"text":"impl Freeze for GlyphChange","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Freeze for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["hibitset"] = [{"text":"impl !Freeze for AtomicBitSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BitIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for DrainBitIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BitParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for BitProducer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BitSetAll","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BitSet","synthetic":true,"types":[]}];
implementors["hound"] = [{"text":"impl&lt;R&gt; Freeze for WavReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S&gt; Freeze for WavIntoSamples&lt;R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'wr, R, S&gt; Freeze for WavSamples&lt;'wr, R, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'parent, W&gt; Freeze for SampleWriter16&lt;'parent, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WavWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WavSpec","synthetic":true,"types":[]},{"text":"impl Freeze for SampleFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Freeze for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; Freeze for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Freeze for Pixels&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Freeze for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Delay","synthetic":true,"types":[]},{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ColorType","synthetic":true,"types":[]},{"text":"impl Freeze for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFormat","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Freeze for DynamicImage","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedError","synthetic":true,"types":[]},{"text":"impl Freeze for EncodingError","synthetic":true,"types":[]},{"text":"impl Freeze for ParameterError","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingError","synthetic":true,"types":[]},{"text":"impl Freeze for LimitError","synthetic":true,"types":[]},{"text":"impl Freeze for ImageError","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for EnumeratePixels&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for EnumeratePixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for EnumerateRows&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for EnumerateRowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for Pixels&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for PixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for Rows&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for RowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Rect","synthetic":true,"types":[]},{"text":"impl Freeze for NeuQuant","synthetic":true,"types":[]},{"text":"impl Freeze for FilterType","synthetic":true,"types":[]},{"text":"impl Freeze for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Freeze for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Freeze for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Freeze for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for JpegEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PixelDensity","synthetic":true,"types":[]},{"text":"impl Freeze for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for FilterType","synthetic":true,"types":[]}];
implementors["inflate"] = [{"text":"impl&lt;W&gt; Freeze for InflateWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoderBuf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for InflateStream","synthetic":true,"types":[]}];
implementors["intl_memoizer"] = [{"text":"impl !Freeze for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl Freeze for IntlMemoizer","synthetic":true,"types":[]},{"text":"impl !Freeze for IntlLangMemoizer","synthetic":true,"types":[]}];
implementors["intl_pluralrules"] = [{"text":"impl Freeze for PluralRules","synthetic":true,"types":[]},{"text":"impl Freeze for PluralCategory","synthetic":true,"types":[]},{"text":"impl Freeze for PluralRuleType","synthetic":true,"types":[]},{"text":"impl Freeze for PluralOperands","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Freeze for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Freeze for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Freeze for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiProduct&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Freeze for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Freeze for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Freeze for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Freeze for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Freeze for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Freeze for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ImageInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PixelFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["laminar"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for LinkConditioner","synthetic":true,"types":[]},{"text":"impl Freeze for Socket","synthetic":true,"types":[]},{"text":"impl Freeze for Packet","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for SocketEvent","synthetic":true,"types":[]},{"text":"impl Freeze for DeliveryGuarantee","synthetic":true,"types":[]},{"text":"impl Freeze for OrderingGuarantee","synthetic":true,"types":[]}];
implementors["lewton"] = [{"text":"impl Freeze for VorbisError","synthetic":true,"types":[]},{"text":"impl Freeze for IdentHeader","synthetic":true,"types":[]},{"text":"impl Freeze for CommentHeader","synthetic":true,"types":[]},{"text":"impl Freeze for SetupHeader","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderReadError","synthetic":true,"types":[]},{"text":"impl Freeze for PreviousWindowRight","synthetic":true,"types":[]},{"text":"impl Freeze for AudioReadError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OggStreamReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for InterleavedSamples&lt;S&gt;","synthetic":true,"types":[]}];
implementors["lexical"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Result&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]},{"text":"impl Freeze for RoundingKind","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for sched_param","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq_old","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for mmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit64","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for spwd","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Freeze for itimerspec","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for packet_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for msginfo","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for input_event","synthetic":true,"types":[]},{"text":"impl Freeze for input_id","synthetic":true,"types":[]},{"text":"impl Freeze for input_absinfo","synthetic":true,"types":[]},{"text":"impl Freeze for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Freeze for input_mask","synthetic":true,"types":[]},{"text":"impl Freeze for ff_replay","synthetic":true,"types":[]},{"text":"impl Freeze for ff_trigger","synthetic":true,"types":[]},{"text":"impl Freeze for ff_envelope","synthetic":true,"types":[]},{"text":"impl Freeze for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_effect","synthetic":true,"types":[]},{"text":"impl Freeze for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for mntent","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for arpd_request","synthetic":true,"types":[]},{"text":"impl Freeze for inotify_event","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_response","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Freeze for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Freeze for mq_attr","synthetic":true,"types":[]},{"text":"impl Freeze for statx","synthetic":true,"types":[]},{"text":"impl Freeze for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for __exit_status","synthetic":true,"types":[]},{"text":"impl Freeze for __timeval","synthetic":true,"types":[]},{"text":"impl Freeze for glob64_t","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Freeze for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlattr","synthetic":true,"types":[]},{"text":"impl Freeze for rtentry","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sysinfo","synthetic":true,"types":[]},{"text":"impl Freeze for msqid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for flock64","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for statfs64","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs64","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Freeze for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for user","synthetic":true,"types":[]},{"text":"impl Freeze for mcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for termios2","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Freeze for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for sem_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]},{"text":"impl Freeze for fpos64_t","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl Freeze for Library","synthetic":true,"types":[]},{"text":"impl&lt;'lib, T&gt; Freeze for Symbol&lt;'lib, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Library","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Symbol&lt;T&gt;","synthetic":true,"types":[]}];
implementors["line_drawing"] = [{"text":"impl&lt;T&gt; Freeze for Bresenham&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Freeze for Midpoint&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Freeze for XiaolinWu&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WalkGrid&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Supercover&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bresenham3d&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Freeze for WalkVoxels&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BresenhamCircle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for VoxelOrigin","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Freeze for Steps&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Octant","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; Freeze for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entries&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Freeze for GuardSend","synthetic":true,"types":[]},{"text":"impl Freeze for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for Mutex&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G&gt; !Freeze for RawReentrantMutex&lt;R, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G, T&gt; !Freeze for ReentrantMutex&lt;R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for RwLock&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]}];
implementors["lyon_geom"] = [{"text":"impl&lt;S&gt; Freeze for QuadraticBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for CubicBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Triangle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for LineSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Line&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for LineEquation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Arc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SvgArc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ArcFlags","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Monotonic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for BezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Flattened&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lyon_path"] = [{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Freeze for PathSlice&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Cursor","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Freeze for Iter&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PathState","synthetic":true,"types":[]},{"text":"impl Freeze for VertexId","synthetic":true,"types":[]},{"text":"impl Freeze for SvgEvent","synthetic":true,"types":[]},{"text":"impl Freeze for PathEvent","synthetic":true,"types":[]},{"text":"impl Freeze for QuadraticEvent","synthetic":true,"types":[]},{"text":"impl Freeze for FlattenedEvent","synthetic":true,"types":[]},{"text":"impl Freeze for FillRule","synthetic":true,"types":[]},{"text":"impl&lt;SvgIter&gt; Freeze for PathEvents&lt;SvgIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SvgIter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for Flattened&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for SvgPathIter&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Transformed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for FromPolyline&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for BezierSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for LineSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; Freeze for SvgPathBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; Freeze for FlatteningBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DecoderEarlyChange&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for LsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for MsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Bits","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Freeze for MmapOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Mmap","synthetic":true,"types":[]},{"text":"impl Freeze for MmapMut","synthetic":true,"types":[]}];
implementors["minimp3"] = [{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["minimp3_sys"] = [{"text":"impl Freeze for __fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for mp3dec_frame_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for mp3dec_t","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Freeze for StreamResult","synthetic":true,"types":[]},{"text":"impl Freeze for MZFlush","synthetic":true,"types":[]},{"text":"impl Freeze for MZStatus","synthetic":true,"types":[]},{"text":"impl Freeze for MZError","synthetic":true,"types":[]},{"text":"impl Freeze for DataFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Freeze for MinReset","synthetic":true,"types":[]},{"text":"impl Freeze for ZeroReset","synthetic":true,"types":[]},{"text":"impl Freeze for FullReset","synthetic":true,"types":[]},{"text":"impl Freeze for InflateState","synthetic":true,"types":[]}];
implementors["mint"] = [{"text":"impl&lt;T&gt; Freeze for RowMatrix2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix2x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix2x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix3x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix3x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix4x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix4x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RowMatrix4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix2x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix2x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix3x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix3x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix4x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix4x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnMatrix4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Quaternion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Freeze for EulerAngles&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Vector3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Vector4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Point2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Point3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IntraXYZ","synthetic":true,"types":[]},{"text":"impl Freeze for IntraZXZ","synthetic":true,"types":[]},{"text":"impl Freeze for IntraZYX","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraXYZ","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraZXZ","synthetic":true,"types":[]},{"text":"impl Freeze for ExtraZYX","synthetic":true,"types":[]}];
implementors["minterpolate"] = [{"text":"impl&lt;T&gt; Freeze for InterpolationFunction&lt;T&gt;","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R, C, S&gt; Freeze for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl Freeze for LpNorm","synthetic":true,"types":[]},{"text":"impl Freeze for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Freeze for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;R as DimName&gt;::Value as Mul&lt;&lt;C as DimName&gt;::Value&gt;&gt;::Output as ArrayLength&lt;N&gt;&gt;::ArrayType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; Freeze for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; Freeze for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Freeze for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl Freeze for Dynamic","synthetic":true,"types":[]},{"text":"impl Freeze for U1","synthetic":true,"types":[]},{"text":"impl Freeze for U0","synthetic":true,"types":[]},{"text":"impl Freeze for U2","synthetic":true,"types":[]},{"text":"impl Freeze for U3","synthetic":true,"types":[]},{"text":"impl Freeze for U4","synthetic":true,"types":[]},{"text":"impl Freeze for U5","synthetic":true,"types":[]},{"text":"impl Freeze for U6","synthetic":true,"types":[]},{"text":"impl Freeze for U7","synthetic":true,"types":[]},{"text":"impl Freeze for U8","synthetic":true,"types":[]},{"text":"impl Freeze for U9","synthetic":true,"types":[]},{"text":"impl Freeze for U10","synthetic":true,"types":[]},{"text":"impl Freeze for U11","synthetic":true,"types":[]},{"text":"impl Freeze for U12","synthetic":true,"types":[]},{"text":"impl Freeze for U13","synthetic":true,"types":[]},{"text":"impl Freeze for U14","synthetic":true,"types":[]},{"text":"impl Freeze for U15","synthetic":true,"types":[]},{"text":"impl Freeze for U16","synthetic":true,"types":[]},{"text":"impl Freeze for U17","synthetic":true,"types":[]},{"text":"impl Freeze for U18","synthetic":true,"types":[]},{"text":"impl Freeze for U19","synthetic":true,"types":[]},{"text":"impl Freeze for U20","synthetic":true,"types":[]},{"text":"impl Freeze for U21","synthetic":true,"types":[]},{"text":"impl Freeze for U22","synthetic":true,"types":[]},{"text":"impl Freeze for U23","synthetic":true,"types":[]},{"text":"impl Freeze for U24","synthetic":true,"types":[]},{"text":"impl Freeze for U25","synthetic":true,"types":[]},{"text":"impl Freeze for U26","synthetic":true,"types":[]},{"text":"impl Freeze for U27","synthetic":true,"types":[]},{"text":"impl Freeze for U28","synthetic":true,"types":[]},{"text":"impl Freeze for U29","synthetic":true,"types":[]},{"text":"impl Freeze for U30","synthetic":true,"types":[]},{"text":"impl Freeze for U31","synthetic":true,"types":[]},{"text":"impl Freeze for U32","synthetic":true,"types":[]},{"text":"impl Freeze for U33","synthetic":true,"types":[]},{"text":"impl Freeze for U34","synthetic":true,"types":[]},{"text":"impl Freeze for U35","synthetic":true,"types":[]},{"text":"impl Freeze for U36","synthetic":true,"types":[]},{"text":"impl Freeze for U37","synthetic":true,"types":[]},{"text":"impl Freeze for U38","synthetic":true,"types":[]},{"text":"impl Freeze for U39","synthetic":true,"types":[]},{"text":"impl Freeze for U40","synthetic":true,"types":[]},{"text":"impl Freeze for U41","synthetic":true,"types":[]},{"text":"impl Freeze for U42","synthetic":true,"types":[]},{"text":"impl Freeze for U43","synthetic":true,"types":[]},{"text":"impl Freeze for U44","synthetic":true,"types":[]},{"text":"impl Freeze for U45","synthetic":true,"types":[]},{"text":"impl Freeze for U46","synthetic":true,"types":[]},{"text":"impl Freeze for U47","synthetic":true,"types":[]},{"text":"impl Freeze for U48","synthetic":true,"types":[]},{"text":"impl Freeze for U49","synthetic":true,"types":[]},{"text":"impl Freeze for U50","synthetic":true,"types":[]},{"text":"impl Freeze for U51","synthetic":true,"types":[]},{"text":"impl Freeze for U52","synthetic":true,"types":[]},{"text":"impl Freeze for U53","synthetic":true,"types":[]},{"text":"impl Freeze for U54","synthetic":true,"types":[]},{"text":"impl Freeze for U55","synthetic":true,"types":[]},{"text":"impl Freeze for U56","synthetic":true,"types":[]},{"text":"impl Freeze for U57","synthetic":true,"types":[]},{"text":"impl Freeze for U58","synthetic":true,"types":[]},{"text":"impl Freeze for U59","synthetic":true,"types":[]},{"text":"impl Freeze for U60","synthetic":true,"types":[]},{"text":"impl Freeze for U61","synthetic":true,"types":[]},{"text":"impl Freeze for U62","synthetic":true,"types":[]},{"text":"impl Freeze for U63","synthetic":true,"types":[]},{"text":"impl Freeze for U64","synthetic":true,"types":[]},{"text":"impl Freeze for U65","synthetic":true,"types":[]},{"text":"impl Freeze for U66","synthetic":true,"types":[]},{"text":"impl Freeze for U67","synthetic":true,"types":[]},{"text":"impl Freeze for U68","synthetic":true,"types":[]},{"text":"impl Freeze for U69","synthetic":true,"types":[]},{"text":"impl Freeze for U70","synthetic":true,"types":[]},{"text":"impl Freeze for U71","synthetic":true,"types":[]},{"text":"impl Freeze for U72","synthetic":true,"types":[]},{"text":"impl Freeze for U73","synthetic":true,"types":[]},{"text":"impl Freeze for U74","synthetic":true,"types":[]},{"text":"impl Freeze for U75","synthetic":true,"types":[]},{"text":"impl Freeze for U76","synthetic":true,"types":[]},{"text":"impl Freeze for U77","synthetic":true,"types":[]},{"text":"impl Freeze for U78","synthetic":true,"types":[]},{"text":"impl Freeze for U79","synthetic":true,"types":[]},{"text":"impl Freeze for U80","synthetic":true,"types":[]},{"text":"impl Freeze for U81","synthetic":true,"types":[]},{"text":"impl Freeze for U82","synthetic":true,"types":[]},{"text":"impl Freeze for U83","synthetic":true,"types":[]},{"text":"impl Freeze for U84","synthetic":true,"types":[]},{"text":"impl Freeze for U85","synthetic":true,"types":[]},{"text":"impl Freeze for U86","synthetic":true,"types":[]},{"text":"impl Freeze for U87","synthetic":true,"types":[]},{"text":"impl Freeze for U88","synthetic":true,"types":[]},{"text":"impl Freeze for U89","synthetic":true,"types":[]},{"text":"impl Freeze for U90","synthetic":true,"types":[]},{"text":"impl Freeze for U91","synthetic":true,"types":[]},{"text":"impl Freeze for U92","synthetic":true,"types":[]},{"text":"impl Freeze for U93","synthetic":true,"types":[]},{"text":"impl Freeze for U94","synthetic":true,"types":[]},{"text":"impl Freeze for U95","synthetic":true,"types":[]},{"text":"impl Freeze for U96","synthetic":true,"types":[]},{"text":"impl Freeze for U97","synthetic":true,"types":[]},{"text":"impl Freeze for U98","synthetic":true,"types":[]},{"text":"impl Freeze for U99","synthetic":true,"types":[]},{"text":"impl Freeze for U100","synthetic":true,"types":[]},{"text":"impl Freeze for U101","synthetic":true,"types":[]},{"text":"impl Freeze for U102","synthetic":true,"types":[]},{"text":"impl Freeze for U103","synthetic":true,"types":[]},{"text":"impl Freeze for U104","synthetic":true,"types":[]},{"text":"impl Freeze for U105","synthetic":true,"types":[]},{"text":"impl Freeze for U106","synthetic":true,"types":[]},{"text":"impl Freeze for U107","synthetic":true,"types":[]},{"text":"impl Freeze for U108","synthetic":true,"types":[]},{"text":"impl Freeze for U109","synthetic":true,"types":[]},{"text":"impl Freeze for U110","synthetic":true,"types":[]},{"text":"impl Freeze for U111","synthetic":true,"types":[]},{"text":"impl Freeze for U112","synthetic":true,"types":[]},{"text":"impl Freeze for U113","synthetic":true,"types":[]},{"text":"impl Freeze for U114","synthetic":true,"types":[]},{"text":"impl Freeze for U115","synthetic":true,"types":[]},{"text":"impl Freeze for U116","synthetic":true,"types":[]},{"text":"impl Freeze for U117","synthetic":true,"types":[]},{"text":"impl Freeze for U118","synthetic":true,"types":[]},{"text":"impl Freeze for U119","synthetic":true,"types":[]},{"text":"impl Freeze for U120","synthetic":true,"types":[]},{"text":"impl Freeze for U121","synthetic":true,"types":[]},{"text":"impl Freeze for U122","synthetic":true,"types":[]},{"text":"impl Freeze for U123","synthetic":true,"types":[]},{"text":"impl Freeze for U124","synthetic":true,"types":[]},{"text":"impl Freeze for U125","synthetic":true,"types":[]},{"text":"impl Freeze for U126","synthetic":true,"types":[]},{"text":"impl Freeze for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for MatrixIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for MatrixIterMut&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for RowIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for ColumnIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Freeze for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Freeze for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Freeze for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !Freeze for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; Freeze for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TGeneral","synthetic":true,"types":[]},{"text":"impl Freeze for TProjective","synthetic":true,"types":[]},{"text":"impl Freeze for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Freeze for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Freeze for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Freeze for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; Freeze for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Errno","synthetic":true,"types":[]},{"text":"impl Freeze for AtFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OFlag","synthetic":true,"types":[]},{"text":"impl Freeze for SealFlag","synthetic":true,"types":[]},{"text":"impl Freeze for FdFlag","synthetic":true,"types":[]},{"text":"impl Freeze for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Freeze for FallocateFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FlockArg","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Freeze for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MntFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Freeze for FdFlag","synthetic":true,"types":[]},{"text":"impl Freeze for MqAttr","synthetic":true,"types":[]},{"text":"impl Freeze for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Freeze for PollFd","synthetic":true,"types":[]},{"text":"impl Freeze for PollFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Freeze for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Freeze for PtyMaster","synthetic":true,"types":[]},{"text":"impl Freeze for CloneFlags","synthetic":true,"types":[]},{"text":"impl Freeze for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Freeze for LioOpcode","synthetic":true,"types":[]},{"text":"impl Freeze for LioMode","synthetic":true,"types":[]},{"text":"impl Freeze for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for EpollFlags","synthetic":true,"types":[]},{"text":"impl Freeze for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Freeze for EpollEvent","synthetic":true,"types":[]},{"text":"impl Freeze for EpollOp","synthetic":true,"types":[]},{"text":"impl Freeze for EfdFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Freeze for ProtFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MapFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Freeze for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaType","synthetic":true,"types":[]},{"text":"impl Freeze for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Freeze for RebootMode","synthetic":true,"types":[]},{"text":"impl Freeze for FdSet","synthetic":true,"types":[]},{"text":"impl Freeze for SigEvent","synthetic":true,"types":[]},{"text":"impl Freeze for SignalIterator","synthetic":true,"types":[]},{"text":"impl Freeze for SaFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SigSet","synthetic":true,"types":[]},{"text":"impl Freeze for SigAction","synthetic":true,"types":[]},{"text":"impl Freeze for Signal","synthetic":true,"types":[]},{"text":"impl Freeze for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Freeze for SigHandler","synthetic":true,"types":[]},{"text":"impl Freeze for SigevNotify","synthetic":true,"types":[]},{"text":"impl Freeze for SfdFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SignalFd","synthetic":true,"types":[]},{"text":"impl Freeze for UnixAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Freeze for LinkAddr","synthetic":true,"types":[]},{"text":"impl Freeze for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Freeze for AlgAddr","synthetic":true,"types":[]},{"text":"impl Freeze for SockFlag","synthetic":true,"types":[]},{"text":"impl Freeze for MsgFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CmsgSpace&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AddressFamily","synthetic":true,"types":[]},{"text":"impl Freeze for SockAddr","synthetic":true,"types":[]},{"text":"impl Freeze for InetAddr","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddr","synthetic":true,"types":[]},{"text":"impl Freeze for SockType","synthetic":true,"types":[]},{"text":"impl Freeze for SockProtocol","synthetic":true,"types":[]},{"text":"impl Freeze for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SockLevel","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl Freeze for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Freeze for ReusePort","synthetic":true,"types":[]},{"text":"impl Freeze for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Freeze for Linger","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Freeze for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Freeze for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Freeze for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for SendTimeout","synthetic":true,"types":[]},{"text":"impl Freeze for Broadcast","synthetic":true,"types":[]},{"text":"impl Freeze for OobInline","synthetic":true,"types":[]},{"text":"impl Freeze for SocketError","synthetic":true,"types":[]},{"text":"impl Freeze for KeepAlive","synthetic":true,"types":[]},{"text":"impl Freeze for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Freeze for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Freeze for RcvBuf","synthetic":true,"types":[]},{"text":"impl Freeze for SndBuf","synthetic":true,"types":[]},{"text":"impl Freeze for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Freeze for SndBufForce","synthetic":true,"types":[]},{"text":"impl Freeze for SockType","synthetic":true,"types":[]},{"text":"impl Freeze for AcceptConn","synthetic":true,"types":[]},{"text":"impl Freeze for OriginalDst","synthetic":true,"types":[]},{"text":"impl Freeze for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Freeze for IpTransparent","synthetic":true,"types":[]},{"text":"impl Freeze for Mark","synthetic":true,"types":[]},{"text":"impl Freeze for PassCred","synthetic":true,"types":[]},{"text":"impl Freeze for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Freeze for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AlgSetKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SFlag","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for FsFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for SysInfo","synthetic":true,"types":[]},{"text":"impl !Freeze for Termios","synthetic":true,"types":[]},{"text":"impl Freeze for InputFlags","synthetic":true,"types":[]},{"text":"impl Freeze for OutputFlags","synthetic":true,"types":[]},{"text":"impl Freeze for ControlFlags","synthetic":true,"types":[]},{"text":"impl Freeze for LocalFlags","synthetic":true,"types":[]},{"text":"impl Freeze for BaudRate","synthetic":true,"types":[]},{"text":"impl Freeze for SetArg","synthetic":true,"types":[]},{"text":"impl Freeze for FlushArg","synthetic":true,"types":[]},{"text":"impl Freeze for FlowArg","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Freeze for TimeSpec","synthetic":true,"types":[]},{"text":"impl Freeze for TimeVal","synthetic":true,"types":[]},{"text":"impl Freeze for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UtsName","synthetic":true,"types":[]},{"text":"impl Freeze for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Freeze for WaitStatus","synthetic":true,"types":[]},{"text":"impl Freeze for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Freeze for InitFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Inotify","synthetic":true,"types":[]},{"text":"impl Freeze for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for InotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for UContext","synthetic":true,"types":[]},{"text":"impl Freeze for Uid","synthetic":true,"types":[]},{"text":"impl Freeze for Gid","synthetic":true,"types":[]},{"text":"impl Freeze for Pid","synthetic":true,"types":[]},{"text":"impl Freeze for AccessFlags","synthetic":true,"types":[]},{"text":"impl Freeze for ForkResult","synthetic":true,"types":[]},{"text":"impl Freeze for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Whence","synthetic":true,"types":[]},{"text":"impl Freeze for PathconfVar","synthetic":true,"types":[]},{"text":"impl Freeze for SysconfVar","synthetic":true,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Freeze for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl Freeze for CompareResult","synthetic":true,"types":[]},{"text":"impl Freeze for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for VerboseError&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; Freeze for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Freeze for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]},{"text":"impl Freeze for BigInt","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Freeze for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]}];
implementors["object"] = [{"text":"impl Freeze for Architecture","synthetic":true,"types":[]},{"text":"impl Freeze for AddressSize","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Freeze for SectionKind","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolKind","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolScope","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationKind","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationEncoding","synthetic":true,"types":[]},{"text":"impl Freeze for FileFlags","synthetic":true,"types":[]},{"text":"impl Freeze for SectionFlags","synthetic":true,"types":[]},{"text":"impl&lt;Section&gt; Freeze for SymbolFlags&lt;Section&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]},{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Bytes&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for Bytes&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for StringTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for File&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Segment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for Section&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for SymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for RelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for SectionIndex","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolIndex","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for Symbol&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SymbolMap&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for CompressedData&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SymbolSection","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionFormat","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for CoffFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SectionTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Freeze for SymbolTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for CoffRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfFile&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSegmentIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSegment&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for SectionTable&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSectionIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSection&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for SymbolTable&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfSymbolIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationSections","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Freeze for ElfRelocationIterator&lt;'data, 'file, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfNoteIterator&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Freeze for ElfNote&lt;'data, Elf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Freeze for MachOFile&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSegmentIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSegment&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSectionIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSection&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Freeze for SymbolTable&lt;'data, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachOSymbolIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Freeze for MachORelocationIterator&lt;'data, 'file, Mach&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Pe&gt; Freeze for PeFile&lt;'data, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSegmentIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSegment&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSectionIterator&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Freeze for PeSection&lt;'data, 'file, Pe&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Freeze for PeRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FileHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FileHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SectionHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SectionHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CompressionHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CompressionHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Sym32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Sym64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Syminfo32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Syminfo64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rel32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rela32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rel64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Rela64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ProgramHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ProgramHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dyn32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dyn64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FatHeader","synthetic":true,"types":[]},{"text":"impl Freeze for FatArch32","synthetic":true,"types":[]},{"text":"impl Freeze for FatArch64","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for MachHeader32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for MachHeader64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LoadCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LcStr&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SegmentCommand32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SegmentCommand64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Section32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Section64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Fvmlib&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FvmlibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Dylib&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubFrameworkCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubClientCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubUmbrellaCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SubLibraryCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for PreboundDylibCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylinkerCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ThreadCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RoutinesCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RoutinesCommand_64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SymtabCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DysymtabCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibTableOfContents&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibModule32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibModule64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DylibReference&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for TwolevelHintsCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for TwolevelHint&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for PrebindCksumCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UuidCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for RpathCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LinkeditDataCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncryptionInfoCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EncryptionInfoCommand64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for VersionMinCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BuildVersionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BuildToolVersion&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DyldInfoCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for LinkerOptionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SymSegCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IdentCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for FvmfileCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for EntryPointCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for SourceVersionCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for DataInCodeEntry&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for NoteCommand&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Nlist32&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Nlist64&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for Relocation&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RelocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ScatteredRelocationInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDosHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOs2Header","synthetic":true,"types":[]},{"text":"impl Freeze for ImageVxdHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFileHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDataDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOptionalHeader32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRomOptionalHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOptionalHeader64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageNtHeaders64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageNtHeaders32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRomHeaders","synthetic":true,"types":[]},{"text":"impl Freeze for Guid","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeader","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeaderV2","synthetic":true,"types":[]},{"text":"impl Freeze for AnonObjectHeaderBigobj","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSectionHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbol","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolEx","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSymbolExBytes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolTokenDef","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolFunction","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolFunctionBeginEnd","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolWeak","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolSection","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAuxSymbolCrc","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRelocation","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLinenumber","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBaseRelocation","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArchiveMemberHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageExportDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageImportByName","synthetic":true,"types":[]},{"text":"impl Freeze for ImageTlsDirectory64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageTlsDirectory32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageImportDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBoundImportDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBoundForwarderRef","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDelayloadDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectoryEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirectoryString","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDirStringU","synthetic":true,"types":[]},{"text":"impl Freeze for ImageResourceDataEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigCodeIntegrity","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocationTable","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation32V2","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDynamicRelocation64V2","synthetic":true,"types":[]},{"text":"impl Freeze for ImagePrologueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEpilogueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigDirectory32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageLoadConfigDirectory64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchBase","synthetic":true,"types":[]},{"text":"impl Freeze for ImageHotPatchHashes","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArmRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArm64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAlpha64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAlphaRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveConfig32","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveConfig64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageEnclaveImport","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl Freeze for ImageCoffSymbolsHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageDebugMisc","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFunctionEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFunctionEntry64","synthetic":true,"types":[]},{"text":"impl Freeze for ImageSeparateDebugHeader","synthetic":true,"types":[]},{"text":"impl Freeze for NonPagedDebugInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageArchitectureEntry","synthetic":true,"types":[]},{"text":"impl Freeze for ImportObjectHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ImageCor20Header","synthetic":true,"types":[]}];
implementors["ogg"] = [{"text":"impl Freeze for Packet","synthetic":true,"types":[]},{"text":"impl Freeze for OggPage","synthetic":true,"types":[]},{"text":"impl Freeze for PageParser","synthetic":true,"types":[]},{"text":"impl Freeze for BasePacketReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PacketReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OggReadError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PacketWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PacketWriteEndInfo","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Freeze for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C, T&gt; Freeze for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Freeze for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Freeze for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Freeze for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Freeze for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for Color&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Equations","synthetic":true,"types":[]},{"text":"impl Freeze for Parameters","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Freeze for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Equation","synthetic":true,"types":[]},{"text":"impl Freeze for Parameter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for Gradient&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Freeze for Take&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Freeze for Slice&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ConeResponseMatrices&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for Srgb","synthetic":true,"types":[]},{"text":"impl&lt;S, N&gt; Freeze for Gamma&lt;S, N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for GammaFn&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for F2p2","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Linear&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LinearFn","synthetic":true,"types":[]},{"text":"impl Freeze for A","synthetic":true,"types":[]},{"text":"impl Freeze for B","synthetic":true,"types":[]},{"text":"impl Freeze for C","synthetic":true,"types":[]},{"text":"impl Freeze for D50","synthetic":true,"types":[]},{"text":"impl Freeze for D55","synthetic":true,"types":[]},{"text":"impl Freeze for D65","synthetic":true,"types":[]},{"text":"impl Freeze for D75","synthetic":true,"types":[]},{"text":"impl Freeze for E","synthetic":true,"types":[]},{"text":"impl Freeze for F2","synthetic":true,"types":[]},{"text":"impl Freeze for F7","synthetic":true,"types":[]},{"text":"impl Freeze for F11","synthetic":true,"types":[]},{"text":"impl Freeze for D50Degree10","synthetic":true,"types":[]},{"text":"impl Freeze for D55Degree10","synthetic":true,"types":[]},{"text":"impl Freeze for D65Degree10","synthetic":true,"types":[]},{"text":"impl Freeze for D75Degree10","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl !Freeze for Condvar","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl !Freeze for Once","synthetic":true,"types":[]},{"text":"impl !Freeze for RawFairMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawRwLock","synthetic":true,"types":[]},{"text":"impl Freeze for RawThreadId","synthetic":true,"types":[]},{"text":"impl Freeze for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Freeze for ParkToken","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkResult","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkToken","synthetic":true,"types":[]},{"text":"impl Freeze for SpinWait","synthetic":true,"types":[]},{"text":"impl Freeze for FilterOp","synthetic":true,"types":[]},{"text":"impl Freeze for ParkResult","synthetic":true,"types":[]},{"text":"impl Freeze for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Freeze for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Set&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for OrderedMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for OrderedSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entries&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entries&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Freeze for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Freeze for FrameControl","synthetic":true,"types":[]},{"text":"impl Freeze for AnimationControl","synthetic":true,"types":[]},{"text":"impl Freeze for Info","synthetic":true,"types":[]},{"text":"impl Freeze for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OutputInfo","synthetic":true,"types":[]},{"text":"impl Freeze for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColorType","synthetic":true,"types":[]},{"text":"impl Freeze for BitDepth","synthetic":true,"types":[]},{"text":"impl Freeze for Unit","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for Decoded","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingError","synthetic":true,"types":[]},{"text":"impl Freeze for EncodingError","synthetic":true,"types":[]},{"text":"impl Freeze for FilterType","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Freeze for Diagnostic","synthetic":true,"types":[]},{"text":"impl Freeze for SpanRange","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Freeze for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quickcheck"] = [{"text":"impl&lt;R&gt; Freeze for StdGen&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StdThreadGen","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for QuickCheck&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TestResult","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EntropyRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Freeze for UnitSphere","synthetic":true,"types":[]},{"text":"impl Freeze for UnitBall","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitDisc","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Gamma&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for ChiSquared&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for FisherF&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for StudentT&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Beta&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Normal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for LogNormal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Exp&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Pareto&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Pert&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Poisson&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Cauchy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Dirichlet&lt;N&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Triangular&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Weibull&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl Freeze for FisherFError","synthetic":true,"types":[]},{"text":"impl Freeze for BetaError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for PertError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for TriangularError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Freeze for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl Freeze for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl Freeze for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl Freeze for RawWindowHandle","synthetic":true,"types":[]},{"text":"impl Freeze for X11Handle","synthetic":true,"types":[]},{"text":"impl Freeze for WaylandHandle","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Freeze for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Freeze for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Freeze for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Freeze for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Freeze for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Freeze for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ThreadPoolBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]}];
implementors["relevant"] = [{"text":"impl Freeze for Relevant","synthetic":true,"types":[]}];
implementors["rendy_chain"] = [{"text":"impl Freeze for Id","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Chain&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Link&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for LinkNode&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Chains","synthetic":true,"types":[]},{"text":"impl Freeze for Unsynchronized","synthetic":true,"types":[]},{"text":"impl Freeze for Node","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for State&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl Freeze for Image","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Family&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Queue&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Schedule&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Submission&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SubmissionId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Barrier&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Guard","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Signal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, W&gt; Freeze for SyncData&lt;S, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_command"] = [{"text":"impl Freeze for DrawCommand","synthetic":true,"types":[]},{"text":"impl Freeze for DrawIndexedCommand","synthetic":true,"types":[]},{"text":"impl Freeze for DispatchCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; Freeze for EncoderCommon&lt;'a, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for RenderPassEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for RenderPassInlineEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for RenderPassSecondaryEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C, L&gt; Freeze for Encoder&lt;'a, B, C, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PrimaryLevel","synthetic":true,"types":[]},{"text":"impl Freeze for SecondaryLevel","synthetic":true,"types":[]},{"text":"impl Freeze for IndividualReset","synthetic":true,"types":[]},{"text":"impl Freeze for NoIndividualReset","synthetic":true,"types":[]},{"text":"impl Freeze for InitialState","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; Freeze for RecordingState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; Freeze for ExecutableState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for PendingState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidState","synthetic":true,"types":[]},{"text":"impl&lt;B, S, L, P&gt; Freeze for Submit&lt;B, S, L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OneShot","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for MultiShot&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SimultaneousUse","synthetic":true,"types":[]},{"text":"impl Freeze for NoSimultaneousUse","synthetic":true,"types":[]},{"text":"impl Freeze for RenderPassContinue","synthetic":true,"types":[]},{"text":"impl Freeze for OutsideRenderPass","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; Freeze for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Transfer","synthetic":true,"types":[]},{"text":"impl Freeze for Execute","synthetic":true,"types":[]},{"text":"impl Freeze for Compute","synthetic":true,"types":[]},{"text":"impl Freeze for Graphics","synthetic":true,"types":[]},{"text":"impl Freeze for General","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Queue&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, W, C, S&gt; Freeze for Submission&lt;B, W, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FamilyId","synthetic":true,"types":[]},{"text":"impl Freeze for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Freeze for Family&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Families&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FenceEpoch","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Fence&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C, R&gt; Freeze for CommandPool&lt;B, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_descriptor"] = [{"text":"impl&lt;B&gt; Freeze for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DescriptorAllocator&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptorRanges","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DescriptorRangesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_factory"] = [{"text":"impl&lt;B&gt; Freeze for Barriers&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Blitter&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BlitRegion","synthetic":true,"types":[]},{"text":"impl Freeze for BlitImageState","synthetic":true,"types":[]},{"text":"impl&lt;D, H, Q&gt; Freeze for Config&lt;D, H, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OneGraphicsQueue","synthetic":true,"types":[]},{"text":"impl Freeze for SavedQueueConfig","synthetic":true,"types":[]},{"text":"impl Freeze for BasicHeapsConfigure","synthetic":true,"types":[]},{"text":"impl Freeze for SavedHeapsConfig","synthetic":true,"types":[]},{"text":"impl Freeze for BasicDevicesConfigure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Freeze for Factory&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BufferState","synthetic":true,"types":[]},{"text":"impl Freeze for ImageState","synthetic":true,"types":[]},{"text":"impl Freeze for ImageStateOrLayout","synthetic":true,"types":[]}];
implementors["rendy_frame"] = [{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl Freeze for CompleteFrame","synthetic":true,"types":[]},{"text":"impl Freeze for FramesRange","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Frames&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Freeze for InitialRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Freeze for ReadyRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; Freeze for Cirque&lt;T, I, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; Freeze for DependentCirque&lt;T, I, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Freeze for CirqueRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_graph"] = [{"text":"impl Freeze for BufferId","synthetic":true,"types":[]},{"text":"impl Freeze for ImageId","synthetic":true,"types":[]},{"text":"impl Freeze for NodeId","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized&gt; Freeze for Graph&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for GraphContext&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized&gt; Freeze for GraphBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BufferAccess","synthetic":true,"types":[]},{"text":"impl Freeze for BufferBarrier","synthetic":true,"types":[]},{"text":"impl Freeze for NodeBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for ImageAccess","synthetic":true,"types":[]},{"text":"impl Freeze for ImageBarrier","synthetic":true,"types":[]},{"text":"impl Freeze for NodeImage","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized, N&gt; Freeze for DescBuilder&lt;B, T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for PresentNode&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Semaphore: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for PresentBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PrepareResult","synthetic":true,"types":[]},{"text":"impl Freeze for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; Freeze for SimpleRenderGroup&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for SimpleRenderGroupDesc&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized&gt; Freeze for SubpassBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized&gt; Freeze for RenderPassNodeBuilder&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_memory"] = [{"text":"impl Freeze for DedicatedAllocator","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DedicatedBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DynamicAllocator&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DynamicBlock&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DynamicConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for LinearAllocator&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for LinearBlock&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LinearConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Heaps&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HeapsConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for MemoryBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Coherent","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; Freeze for MappedRange&lt;'a, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MaybeCoherent","synthetic":true,"types":[]},{"text":"impl Freeze for NonCoherent","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Memory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for Dynamic","synthetic":true,"types":[]},{"text":"impl Freeze for Upload","synthetic":true,"types":[]},{"text":"impl Freeze for Download","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryUtilization","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryHeapUtilization","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryTypeUtilization","synthetic":true,"types":[]},{"text":"impl Freeze for TotalMemoryUtilization","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for HeapsError","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryUsageValue","synthetic":true,"types":[]}];
implementors["rendy_mesh"] = [{"text":"impl Freeze for VertexBufferLayout","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for IndexBuffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MeshBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Mesh&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Incompatible","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Indices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_resource"] = [{"text":"impl Freeze for BufferInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Buffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Escape&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Terminal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Handle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Image&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ImageViewInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ImageView&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ResourceTracker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for SamplerCache&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Sampler&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DescriptorSetInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DescriptorSetLayout&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_shader"] = [{"text":"impl Freeze for SpirvShader","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ShaderSet&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SpecConstantSet","synthetic":true,"types":[]},{"text":"impl Freeze for ShaderSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ShaderStorage&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_texture"] = [{"text":"impl&lt;B&gt; Freeze for Texture&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TextureBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MipLevels","synthetic":true,"types":[]},{"text":"impl Freeze for ImageTextureConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Repr","synthetic":true,"types":[]},{"text":"impl Freeze for TextureKind","synthetic":true,"types":[]},{"text":"impl Freeze for Unorm","synthetic":true,"types":[]},{"text":"impl Freeze for Inorm","synthetic":true,"types":[]},{"text":"impl Freeze for Uint","synthetic":true,"types":[]},{"text":"impl Freeze for Int","synthetic":true,"types":[]},{"text":"impl Freeze for Uscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Iscaled","synthetic":true,"types":[]},{"text":"impl Freeze for Srgb","synthetic":true,"types":[]},{"text":"impl Freeze for Float","synthetic":true,"types":[]},{"text":"impl Freeze for _8","synthetic":true,"types":[]},{"text":"impl Freeze for _16","synthetic":true,"types":[]},{"text":"impl Freeze for _32","synthetic":true,"types":[]},{"text":"impl Freeze for _64","synthetic":true,"types":[]},{"text":"impl Freeze for R","synthetic":true,"types":[]},{"text":"impl Freeze for Rg","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb","synthetic":true,"types":[]},{"text":"impl Freeze for Rgba","synthetic":true,"types":[]},{"text":"impl Freeze for Bgr","synthetic":true,"types":[]},{"text":"impl Freeze for Bgra","synthetic":true,"types":[]},{"text":"impl Freeze for Abgr","synthetic":true,"types":[]},{"text":"impl&lt;C, S, T&gt; Freeze for Pixel&lt;C, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as PixelRepr&lt;S, T&gt;&gt;::Repr: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_util"] = [{"text":"impl Freeze for InstanceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Instance&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Device&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SetLayout","synthetic":true,"types":[]},{"text":"impl Freeze for Layout","synthetic":true,"types":[]},{"text":"impl Freeze for AttrUuid","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for Tangent","synthetic":true,"types":[]},{"text":"impl Freeze for TexCoord","synthetic":true,"types":[]},{"text":"impl Freeze for VertexFormat","synthetic":true,"types":[]},{"text":"impl&lt;N, I&gt; Freeze for AttrGenIter&lt;N, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for PosColor","synthetic":true,"types":[]},{"text":"impl Freeze for PosNorm","synthetic":true,"types":[]},{"text":"impl Freeze for PosColorNorm","synthetic":true,"types":[]},{"text":"impl Freeze for PosTex","synthetic":true,"types":[]},{"text":"impl Freeze for PosNormTex","synthetic":true,"types":[]},{"text":"impl Freeze for PosNormTangTex","synthetic":true,"types":[]},{"text":"impl Freeze for Model","synthetic":true,"types":[]}];
implementors["rendy_wsi"] = [{"text":"impl&lt;B&gt; Freeze for Surface&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Target&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for NextImages&lt;'a, B&gt;","synthetic":true,"types":[]}];
implementors["rental"] = [{"text":"impl&lt;E, H&gt; Freeze for RentalError&lt;E, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleRef","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRef_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRef_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleMut","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleMut_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleMut_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleRefDebug","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefDebug_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefDebug_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleRefClone","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefClone_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefClone_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleRefDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleMutDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleMutDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleMutDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleRefCovariant","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefCovariant_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Freeze for SimpleRefCovariant_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SimpleRefMap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; Freeze for SimpleRefMap_Borrow&lt;'head, 'iref, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; Freeze for SimpleRefMap_BorrowMut&lt;'head, 'iref, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for RentRef&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRef_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRef_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for RentMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentMut_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for RentRefCell&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRefCell_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRefCell_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for RentRefCellMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRefCellMut_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRefCellMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for RentMutex&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentMutex_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentMutex_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for RentRwLock&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRwLock_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRwLock_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for RentRwLockMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRwLockMut_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Freeze for RentRwLockMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]}];
implementors["rodio"] = [{"text":"impl !Freeze for Sink","synthetic":true,"types":[]},{"text":"impl !Freeze for SpatialSink","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for SamplesBuffer&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DecoderError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for DynamicMixerController&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for DynamicMixer&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for SourcesQueueInput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Freeze for SourcesQueueOutput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Amplify&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for BltFilter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Buffered&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ChannelVolume&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Delay&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Done&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Empty&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FadeIn&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FromFactoryIter&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FromIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Freeze for Mix&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I1 as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I2 as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Pausable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for PeriodicAccess&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Repeat&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; Freeze for SamplesConverter&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SineWave","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Spatial&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Speed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Stoppable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for TakeDuration&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; Freeze for UniformSourceIterator&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Zero&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for StaticSamplesBuffer&lt;S&gt;","synthetic":true,"types":[]}];
implementors["ron"] = [{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl&lt;'de&gt; Freeze for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PrettyConfig","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for Compound&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]},{"text":"impl Freeze for Map","synthetic":true,"types":[]},{"text":"impl Freeze for Float","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Freeze for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl Freeze for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_version"] = [{"text":"impl Freeze for VersionMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Channel","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl Freeze for Curve","synthetic":true,"types":[]},{"text":"impl Freeze for Line","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FontCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Codepoint","synthetic":true,"types":[]},{"text":"impl Freeze for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Glyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SharedGlyphData","synthetic":true,"types":[]},{"text":"impl Freeze for HMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ScaledGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PositionedGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IntoFontsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, I&gt; Freeze for GlyphIter&lt;'a, 'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for LayoutIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Contour","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SharedBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Segment","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Freeze for Cache&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CacheBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for CacheReadErr","synthetic":true,"types":[]},{"text":"impl Freeze for CacheWriteErr","synthetic":true,"types":[]},{"text":"impl Freeze for CachedBy","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Freeze for Handle","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl !Freeze for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; Freeze for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Freeze for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Always","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for VersionReq","synthetic":true,"types":[]},{"text":"impl Freeze for Identifier","synthetic":true,"types":[]},{"text":"impl Freeze for SemVerError","synthetic":true,"types":[]},{"text":"impl Freeze for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Identifier","synthetic":true,"types":[]},{"text":"impl Freeze for VersionReq","synthetic":true,"types":[]},{"text":"impl Freeze for Predicate","synthetic":true,"types":[]},{"text":"impl Freeze for WildcardVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Op","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StringDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for CowStrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for ByteBuf","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Freeze for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CharEscape","synthetic":true,"types":[]},{"text":"impl Freeze for Serializer","synthetic":true,"types":[]},{"text":"impl Freeze for RawValue","synthetic":true,"types":[]}];
implementors["shred"] = [{"text":"impl&lt;'a, R&gt; !Freeze for AsyncDispatcher&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for Par&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; Freeze for ParSeq&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Freeze for Seq&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BatchAccessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BatchUncheckedWorld&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DefaultBatchControllerSystem&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Dispatcher&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DispatcherBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MetaIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MetaIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for MetaTable&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StaticAccessor&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultProvider","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Fetch&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for FetchMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PanicHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Freeze for Read&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResourceId","synthetic":true,"types":[]},{"text":"impl Freeze for World","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Freeze for Write&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;?Sized&gt; Freeze for AccessorCow&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as System&lt;'a&gt;&gt;::SystemData as DynamicSystemData&lt;'a&gt;&gt;::Accessor: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as System&lt;'a&gt;&gt;::SystemData: DynamicSystemData&lt;'a&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RunningTime","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidBorrow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RefMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for TrustCell&lt;T&gt;","synthetic":true,"types":[]}];
implementors["shrev"] = [{"text":"impl&lt;T&gt; !Freeze for ReaderId&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for StorageIterator&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !Freeze for EventChannel&lt;E&gt;","synthetic":true,"types":[]}];
implementors["siphasher"] = [{"text":"impl Freeze for SipHasher13","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher24","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher","synthetic":true,"types":[]},{"text":"impl Freeze for Hash128","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher13","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher24","synthetic":true,"types":[]},{"text":"impl Freeze for SipHasher","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Freeze for Slab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["slice_deque"] = [{"text":"impl&lt;T&gt; Freeze for Buffer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SliceDeque&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Splice&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Freeze for DrainFilter&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AllocError","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl Freeze for Environment","synthetic":true,"types":[]},{"text":"impl Freeze for Shell","synthetic":true,"types":[]},{"text":"impl Freeze for DataDevice","synthetic":true,"types":[]},{"text":"impl Freeze for DataOffer","synthetic":true,"types":[]},{"text":"impl Freeze for ReadPipe","synthetic":true,"types":[]},{"text":"impl Freeze for DataSource","synthetic":true,"types":[]},{"text":"impl Freeze for WritePipe","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DndEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DataSourceEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ModifiersState","synthetic":true,"types":[]},{"text":"impl Freeze for RMLVO","synthetic":true,"types":[]},{"text":"impl Freeze for KeyRepeatEvent","synthetic":true,"types":[]},{"text":"impl Freeze for KeyRepeatKind","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for OutputInfo","synthetic":true,"types":[]},{"text":"impl Freeze for OutputMgr","synthetic":true,"types":[]},{"text":"impl Freeze for ThemeManager","synthetic":true,"types":[]},{"text":"impl Freeze for ThemedPointer","synthetic":true,"types":[]},{"text":"impl Freeze for AutoThemer","synthetic":true,"types":[]},{"text":"impl Freeze for AutoPointer","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for DoubleMemPool","synthetic":true,"types":[]},{"text":"impl Freeze for MemPool","synthetic":true,"types":[]},{"text":"impl Freeze for BasicFrame","synthetic":true,"types":[]},{"text":"impl Freeze for ConceptFrame","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !Freeze for Window&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ButtonState","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for FrameRequest","synthetic":true,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; Freeze for DefaultVecStorage&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DenseVecStorage&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, T&nbsp;=&nbsp;DenseVecStorage&lt;C&gt;&gt; !Freeze for FlaggedStorage&lt;C, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HashMapStorage&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NullStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for VecStorage&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Entity","synthetic":true,"types":[]},{"text":"impl !Freeze for LazyUpdate","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ChangeSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BoxedErr","synthetic":true,"types":[]},{"text":"impl Freeze for WrongGeneration","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for NoError","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Freeze for JoinParIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Freeze for MaybeJoin&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Freeze for JoinIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Mask: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Value: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ComponentEvent","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Freeze for Entries&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Freeze for OccupiedEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Freeze for VacantEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rf, 'st, C, S, B, Restrict&gt; Freeze for RestrictedStorage&lt;'rf, 'st, C, S, B, Restrict&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BTreeStorage&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AntiStorage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MaskedStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Component&gt;::Storage: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'e, T, D&gt; Freeze for Storage&lt;'e, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Freeze for StorageEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ImmutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl Freeze for MutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl Freeze for SequentialRestriction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CreateIterAtomic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for EntitiesRes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EntityResBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Generation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LazyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CreateIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EntityBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["specs_hierarchy"] = [{"text":"impl&lt;P&gt; !Freeze for Hierarchy&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for SubHierarchyIterator&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Freeze for ParentData&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for HierarchySystem&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for HierarchyEvent","synthetic":true,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data&gt; Freeze for FontInfo&lt;Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Vertex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HMetrics","synthetic":true,"types":[]},{"text":"impl Freeze for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a, Data&gt; Freeze for FontNameIter&lt;'a, Data&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for VertexType","synthetic":true,"types":[]},{"text":"impl Freeze for PlatformId","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeEid","synthetic":true,"types":[]},{"text":"impl Freeze for MicrosoftEid","synthetic":true,"types":[]},{"text":"impl Freeze for MacEid","synthetic":true,"types":[]},{"text":"impl Freeze for MicrosoftLang","synthetic":true,"types":[]},{"text":"impl Freeze for MacLang","synthetic":true,"types":[]},{"text":"impl Freeze for PlatformEncodingLanguageId","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIfLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprInPlace","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhileLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitVerbatim","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PathTokens&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for FloatSuffix","synthetic":true,"types":[]},{"text":"impl Freeze for IntSuffix","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArgName","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Apostrophe","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for CapSelf","synthetic":true,"types":[]},{"text":"impl Freeze for Catch","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for Self_","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; Freeze for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AddBounds","synthetic":true,"types":[]},{"text":"impl Freeze for BindStyle","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Freeze for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl !Freeze for BufferWriter","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColorSpec","synthetic":true,"types":[]},{"text":"impl Freeze for ParseColorError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorChoice","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Freeze for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl Freeze for TiffError","synthetic":true,"types":[]},{"text":"impl Freeze for TiffFormatError","synthetic":true,"types":[]},{"text":"impl Freeze for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorType","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionMethod","synthetic":true,"types":[]},{"text":"impl Freeze for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Rational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for DirectoryEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; Freeze for ImageEncoder&lt;'a, W, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl Freeze for Gray8","synthetic":true,"types":[]},{"text":"impl Freeze for Gray16","synthetic":true,"types":[]},{"text":"impl Freeze for RGB8","synthetic":true,"types":[]},{"text":"impl Freeze for RGB16","synthetic":true,"types":[]},{"text":"impl Freeze for RGBA8","synthetic":true,"types":[]},{"text":"impl Freeze for RGBA16","synthetic":true,"types":[]},{"text":"impl Freeze for CMYK8","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Freeze for Timespec","synthetic":true,"types":[]},{"text":"impl Freeze for PreciseTime","synthetic":true,"types":[]},{"text":"impl Freeze for SteadyTime","synthetic":true,"types":[]},{"text":"impl Freeze for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]}];
implementors["tinystr"] = [{"text":"impl Freeze for TinyStr16","synthetic":true,"types":[]},{"text":"impl Freeze for TinyStr4","synthetic":true,"types":[]},{"text":"impl Freeze for TinyStr8","synthetic":true,"types":[]},{"text":"impl Freeze for TinyStrAuto","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Freeze for ArrayVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Freeze for TinyVecDrain&lt;'p, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;T&gt; Freeze for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Datetime","synthetic":true,"types":[]},{"text":"impl Freeze for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Freeze for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl Freeze for RandomXxHashBuilder32","synthetic":true,"types":[]},{"text":"impl Freeze for XxHash64","synthetic":true,"types":[]},{"text":"impl Freeze for XxHash32","synthetic":true,"types":[]}];
implementors["tynm"] = [{"text":"impl&lt;'s&gt; Freeze for TypeNameDisplay&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Freeze for TypeName&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["type_map"] = [{"text":"impl&lt;'a, T&gt; Freeze for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Freeze for Greater","synthetic":true,"types":[]},{"text":"impl Freeze for Less","synthetic":true,"types":[]},{"text":"impl Freeze for Equal","synthetic":true,"types":[]},{"text":"impl Freeze for B0","synthetic":true,"types":[]},{"text":"impl Freeze for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Freeze for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Z0","synthetic":true,"types":[]},{"text":"impl Freeze for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Freeze for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Freeze for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unic_langid_impl"] = [{"text":"impl Freeze for LanguageIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for LanguageIdentifierError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterDirection","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Freeze for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IsNormalized","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Freeze for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for WalkDir","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wavefront_obj"] = [{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl Freeze for MtlSet","synthetic":true,"types":[]},{"text":"impl Freeze for Material","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for Illumination","synthetic":true,"types":[]},{"text":"impl Freeze for ObjSet","synthetic":true,"types":[]},{"text":"impl Freeze for Object","synthetic":true,"types":[]},{"text":"impl Freeze for Geometry","synthetic":true,"types":[]},{"text":"impl Freeze for Shape","synthetic":true,"types":[]},{"text":"impl Freeze for Vertex","synthetic":true,"types":[]},{"text":"impl Freeze for TVertex","synthetic":true,"types":[]},{"text":"impl Freeze for Primitive","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Freeze for Display","synthetic":true,"types":[]},{"text":"impl Freeze for EventQueue","synthetic":true,"types":[]},{"text":"impl Freeze for QueueToken","synthetic":true,"types":[]},{"text":"impl Freeze for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalManager","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for NewProxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Proxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ConnectError","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalError","synthetic":true,"types":[]},{"text":"impl Freeze for GlobalEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ProxyMap","synthetic":true,"types":[]},{"text":"impl Freeze for CursorTheme","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CursorImageBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WlEglSurface","synthetic":true,"types":[]},{"text":"impl Freeze for WlDisplay","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlRegistry","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlCallback","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlCompositor","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlShmPool","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlShm","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlDataOffer","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlDataSource","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlDataDevice","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for DndAction","synthetic":true,"types":[]},{"text":"impl Freeze for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlShell","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Resize","synthetic":true,"types":[]},{"text":"impl Freeze for Transient","synthetic":true,"types":[]},{"text":"impl Freeze for WlShellSurface","synthetic":true,"types":[]},{"text":"impl Freeze for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Capability","synthetic":true,"types":[]},{"text":"impl Freeze for WlSeat","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlPointer","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ButtonState","synthetic":true,"types":[]},{"text":"impl Freeze for Axis","synthetic":true,"types":[]},{"text":"impl Freeze for AxisSource","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlKeyboard","synthetic":true,"types":[]},{"text":"impl Freeze for KeymapFormat","synthetic":true,"types":[]},{"text":"impl Freeze for KeyState","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlTouch","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for WlOutput","synthetic":true,"types":[]},{"text":"impl Freeze for Subpixel","synthetic":true,"types":[]},{"text":"impl Freeze for Transform","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlRegion","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WlSubsurface","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl Freeze for AnonymousObject","synthetic":true,"types":[]},{"text":"impl Freeze for NoMessage","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; Freeze for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; Freeze for ObjectMap&lt;Meta&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Socket","synthetic":true,"types":[]},{"text":"impl Freeze for BufferedSocket","synthetic":true,"types":[]},{"text":"impl Freeze for UserData","synthetic":true,"types":[]},{"text":"impl !Freeze for UserDataMap","synthetic":true,"types":[]},{"text":"impl Freeze for MessageDesc","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl Freeze for ArgumentType","synthetic":true,"types":[]},{"text":"impl Freeze for Argument","synthetic":true,"types":[]},{"text":"impl Freeze for MessageWriteError","synthetic":true,"types":[]},{"text":"impl Freeze for MessageParseError","synthetic":true,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl Freeze for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl Freeze for Capability","synthetic":true,"types":[]},{"text":"impl Freeze for PresentMethod","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Capability","synthetic":true,"types":[]},{"text":"impl Freeze for ButtonState","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Capability","synthetic":true,"types":[]},{"text":"impl Freeze for ButtonState","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl Freeze for Source","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl Freeze for Source","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl Freeze for ButtonState","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl Freeze for ContentHint","synthetic":true,"types":[]},{"text":"impl Freeze for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Freeze for PreeditStyle","synthetic":true,"types":[]},{"text":"impl Freeze for TextDirection","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ContentHint","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeCause","synthetic":true,"types":[]},{"text":"impl Freeze for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Mode","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for XdgShell","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for XdgSurface","synthetic":true,"types":[]},{"text":"impl Freeze for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for XdgPopup","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for Gravity","synthetic":true,"types":[]},{"text":"impl Freeze for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl Freeze for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for CancelReason","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Layer","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WpPresentation","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl Freeze for Kind","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for XdgWmBase","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Freeze for XdgPositioner","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for Gravity","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for XdgSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for XdgToplevel","synthetic":true,"types":[]},{"text":"impl Freeze for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Freeze for State","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for XdgPopup","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WpViewporter","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WpViewport","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Request","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl Freeze for wl_message","synthetic":true,"types":[]},{"text":"impl Freeze for wl_interface","synthetic":true,"types":[]},{"text":"impl Freeze for wl_list","synthetic":true,"types":[]},{"text":"impl Freeze for wl_array","synthetic":true,"types":[]},{"text":"impl Freeze for wl_argument","synthetic":true,"types":[]},{"text":"impl Freeze for WaylandClient","synthetic":true,"types":[]},{"text":"impl Freeze for WAYLAND_CLIENT_OPTION","synthetic":true,"types":[]},{"text":"impl Freeze for WAYLAND_CLIENT_HANDLE","synthetic":true,"types":[]},{"text":"impl Freeze for wl_proxy","synthetic":true,"types":[]},{"text":"impl Freeze for wl_display","synthetic":true,"types":[]},{"text":"impl Freeze for wl_event_queue","synthetic":true,"types":[]},{"text":"impl Freeze for WaylandEgl","synthetic":true,"types":[]},{"text":"impl Freeze for WAYLAND_EGL_OPTION","synthetic":true,"types":[]},{"text":"impl Freeze for WAYLAND_EGL_HANDLE","synthetic":true,"types":[]},{"text":"impl Freeze for wl_egl_window","synthetic":true,"types":[]},{"text":"impl Freeze for wl_cursor_image","synthetic":true,"types":[]},{"text":"impl Freeze for wl_cursor","synthetic":true,"types":[]},{"text":"impl Freeze for WaylandCursor","synthetic":true,"types":[]},{"text":"impl Freeze for WAYLAND_CURSOR_OPTION","synthetic":true,"types":[]},{"text":"impl Freeze for WAYLAND_CURSOR_HANDLE","synthetic":true,"types":[]},{"text":"impl Freeze for wl_cursor_theme","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl Freeze for KeyboardInput","synthetic":true,"types":[]},{"text":"impl Freeze for Touch","synthetic":true,"types":[]},{"text":"impl Freeze for ModifiersState","synthetic":true,"types":[]},{"text":"impl Freeze for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl Freeze for MonitorId","synthetic":true,"types":[]},{"text":"impl Freeze for Icon","synthetic":true,"types":[]},{"text":"impl Freeze for Window","synthetic":true,"types":[]},{"text":"impl Freeze for WindowId","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceId","synthetic":true,"types":[]},{"text":"impl !Freeze for EventsLoop","synthetic":true,"types":[]},{"text":"impl Freeze for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl Freeze for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl Freeze for WindowBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for WindowAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for WindowEvent","synthetic":true,"types":[]},{"text":"impl Freeze for DeviceEvent","synthetic":true,"types":[]},{"text":"impl Freeze for TouchPhase","synthetic":true,"types":[]},{"text":"impl Freeze for ElementState","synthetic":true,"types":[]},{"text":"impl Freeze for MouseButton","synthetic":true,"types":[]},{"text":"impl Freeze for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl Freeze for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl Freeze for BadIcon","synthetic":true,"types":[]},{"text":"impl Freeze for ControlFlow","synthetic":true,"types":[]},{"text":"impl Freeze for CreationError","synthetic":true,"types":[]},{"text":"impl Freeze for MouseCursor","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalPosition","synthetic":true,"types":[]},{"text":"impl Freeze for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalSize","synthetic":true,"types":[]},{"text":"impl Freeze for PhysicalSize","synthetic":true,"types":[]},{"text":"impl Freeze for XNotSupported","synthetic":true,"types":[]},{"text":"impl Freeze for WindowType","synthetic":true,"types":[]},{"text":"impl Freeze for WaylandTheme","synthetic":true,"types":[]}];
implementors["x11_clipboard"] = [{"text":"impl Freeze for Atoms","synthetic":true,"types":[]},{"text":"impl !Freeze for Clipboard","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["x11_dl"] = [{"text":"impl Freeze for OpenError","synthetic":true,"types":[]},{"text":"impl Freeze for OpenErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Xlib","synthetic":true,"types":[]},{"text":"impl Freeze for _XcmsCCC","synthetic":true,"types":[]},{"text":"impl Freeze for XcmsColor","synthetic":true,"types":[]},{"text":"impl Freeze for _XcmsColorSpace","synthetic":true,"types":[]},{"text":"impl Freeze for _XcmsFunctionSet","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbAction","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbBounds","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbChanges","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbClientMapRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbColor","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbComponentList","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbComponentNames","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbControls","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbControlsChanges","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbControlsNotify","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbDeviceChanges","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbDeviceInfo","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbDeviceLedInfo","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbDoodad","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbExtensionDeviceNotify","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbGeometry","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbGeometrySizes","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbIndicatorMapRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbKey","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbKeyType","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbMapChanges","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbMods","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbNameChanges","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbNamesNotify","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbOutline","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbOverlay","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbOverlayKey","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbOverlayRow","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbProperty","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbRow","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbSection","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbServerMapRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbShape","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbSymInterpretRec","synthetic":true,"types":[]},{"text":"impl Freeze for XAnyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XButtonEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XCirculateEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XCirculateRequestEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XClientMessageEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XColormapEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XConfigureEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XConfigureRequestEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XCreateWindowEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XCrossingEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XDestroyWindowEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XErrorEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XExposeEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XFocusChangeEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XGraphicsExposeEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XGravityEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XKeyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XKeymapEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XMapEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XMappingEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XMapRequestEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XMotionEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XNoExposeEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XPropertyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XReparentEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XResizeRequestEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XSelectionClearEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XSelectionEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XSelectionRequestEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XUnmapEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XVisibilityEvent","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbCompatMapRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbDesc","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbIndicatorRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbKeyAliasRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbKeyNameRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbNamesRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbStateRec","synthetic":true,"types":[]},{"text":"impl Freeze for XkbAnyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbNewKeyboardNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbStateNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbControlsNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbIndicatorNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbNamesNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbCompatMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbBellNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbActionMessageEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbAccessXNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for _XkbExtensionDeviceNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XkbEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Depth","synthetic":true,"types":[]},{"text":"impl Freeze for Screen","synthetic":true,"types":[]},{"text":"impl Freeze for ScreenFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Visual","synthetic":true,"types":[]},{"text":"impl Freeze for XArc","synthetic":true,"types":[]},{"text":"impl Freeze for XChar2b","synthetic":true,"types":[]},{"text":"impl Freeze for XCharStruct","synthetic":true,"types":[]},{"text":"impl Freeze for XClassHint","synthetic":true,"types":[]},{"text":"impl Freeze for XColor","synthetic":true,"types":[]},{"text":"impl Freeze for XComposeStatus","synthetic":true,"types":[]},{"text":"impl Freeze for XExtCodes","synthetic":true,"types":[]},{"text":"impl Freeze for XExtData","synthetic":true,"types":[]},{"text":"impl Freeze for XFontProp","synthetic":true,"types":[]},{"text":"impl Freeze for XFontSetExtents","synthetic":true,"types":[]},{"text":"impl Freeze for XFontStruct","synthetic":true,"types":[]},{"text":"impl Freeze for XGCValues","synthetic":true,"types":[]},{"text":"impl Freeze for XGenericEventCookie","synthetic":true,"types":[]},{"text":"impl Freeze for XHostAddress","synthetic":true,"types":[]},{"text":"impl Freeze for XIconSize","synthetic":true,"types":[]},{"text":"impl Freeze for XImage","synthetic":true,"types":[]},{"text":"impl Freeze for XKeyboardControl","synthetic":true,"types":[]},{"text":"impl Freeze for XKeyboardState","synthetic":true,"types":[]},{"text":"impl Freeze for XmbTextItem","synthetic":true,"types":[]},{"text":"impl Freeze for XModifierKeymap","synthetic":true,"types":[]},{"text":"impl Freeze for XOMCharSetList","synthetic":true,"types":[]},{"text":"impl Freeze for XPixmapFormatValues","synthetic":true,"types":[]},{"text":"impl Freeze for XPoint","synthetic":true,"types":[]},{"text":"impl Freeze for XRectangle","synthetic":true,"types":[]},{"text":"impl Freeze for XrmOptionDescRec","synthetic":true,"types":[]},{"text":"impl Freeze for XrmValue","synthetic":true,"types":[]},{"text":"impl Freeze for XSegment","synthetic":true,"types":[]},{"text":"impl Freeze for XSetWindowAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for XSizeHints","synthetic":true,"types":[]},{"text":"impl Freeze for XStandardColormap","synthetic":true,"types":[]},{"text":"impl Freeze for XTextItem","synthetic":true,"types":[]},{"text":"impl Freeze for XTextItem16","synthetic":true,"types":[]},{"text":"impl Freeze for XTextProperty","synthetic":true,"types":[]},{"text":"impl Freeze for XTimeCoord","synthetic":true,"types":[]},{"text":"impl Freeze for XVisualInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XwcTextItem","synthetic":true,"types":[]},{"text":"impl Freeze for XWindowAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for XWindowChanges","synthetic":true,"types":[]},{"text":"impl Freeze for XWMHints","synthetic":true,"types":[]},{"text":"impl Freeze for XIMCallback","synthetic":true,"types":[]},{"text":"impl Freeze for XIMPreeditDrawCallbackStruct","synthetic":true,"types":[]},{"text":"impl Freeze for XIMPreeditCaretCallbackStruct","synthetic":true,"types":[]},{"text":"impl Freeze for XIMText","synthetic":true,"types":[]},{"text":"impl Freeze for XICCallback","synthetic":true,"types":[]},{"text":"impl Freeze for AspectRatio","synthetic":true,"types":[]},{"text":"impl Freeze for ClientMessageData","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFns","synthetic":true,"types":[]},{"text":"impl Freeze for XEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIMTextString","synthetic":true,"types":[]},{"text":"impl Freeze for _XDisplay","synthetic":true,"types":[]},{"text":"impl Freeze for xError","synthetic":true,"types":[]},{"text":"impl Freeze for xEvent","synthetic":true,"types":[]},{"text":"impl Freeze for _XGC","synthetic":true,"types":[]},{"text":"impl Freeze for _XIC","synthetic":true,"types":[]},{"text":"impl Freeze for _XIM","synthetic":true,"types":[]},{"text":"impl Freeze for _XRegion","synthetic":true,"types":[]},{"text":"impl Freeze for _XOC","synthetic":true,"types":[]},{"text":"impl Freeze for _XOM","synthetic":true,"types":[]},{"text":"impl Freeze for _XrmHashBucketRec","synthetic":true,"types":[]},{"text":"impl Freeze for XkbKbdDpyStateRec","synthetic":true,"types":[]},{"text":"impl Freeze for XIMCaretDirection","synthetic":true,"types":[]},{"text":"impl Freeze for XIMCaretStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Xext","synthetic":true,"types":[]},{"text":"impl Freeze for Glx","synthetic":true,"types":[]},{"text":"impl Freeze for __GLXcontextRec","synthetic":true,"types":[]},{"text":"impl Freeze for __GLXFBConfigRec","synthetic":true,"types":[]},{"text":"impl Freeze for Xcursor","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorAnimate","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorChunkHeader","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorComment","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorComments","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorCursors","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorFile","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorFileHeader","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorFileToc","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorImage","synthetic":true,"types":[]},{"text":"impl Freeze for _XcursorImages","synthetic":true,"types":[]},{"text":"impl Freeze for Xf86vmode","synthetic":true,"types":[]},{"text":"impl Freeze for XF86VidModeGamma","synthetic":true,"types":[]},{"text":"impl Freeze for XF86VidModeModeInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XF86VidModeModeLine","synthetic":true,"types":[]},{"text":"impl Freeze for XF86VidModeMonitor","synthetic":true,"types":[]},{"text":"impl Freeze for XF86VidModeSyncRange","synthetic":true,"types":[]},{"text":"impl Freeze for XF86VidModeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Xft","synthetic":true,"types":[]},{"text":"impl Freeze for XftFont","synthetic":true,"types":[]},{"text":"impl Freeze for XftColor","synthetic":true,"types":[]},{"text":"impl Freeze for XftCharSpec","synthetic":true,"types":[]},{"text":"impl Freeze for XftCharFontSpec","synthetic":true,"types":[]},{"text":"impl Freeze for XftFontSet","synthetic":true,"types":[]},{"text":"impl Freeze for XftGlyphSpec","synthetic":true,"types":[]},{"text":"impl Freeze for XftGlyphFontSpec","synthetic":true,"types":[]},{"text":"impl Freeze for FT_FaceRec","synthetic":true,"types":[]},{"text":"impl Freeze for FcCharSet","synthetic":true,"types":[]},{"text":"impl Freeze for FcPattern","synthetic":true,"types":[]},{"text":"impl Freeze for FcEndian","synthetic":true,"types":[]},{"text":"impl Freeze for FcResult","synthetic":true,"types":[]},{"text":"impl Freeze for XftFontInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XftDraw","synthetic":true,"types":[]},{"text":"impl Freeze for XftPattern","synthetic":true,"types":[]},{"text":"impl Freeze for Xlib","synthetic":true,"types":[]},{"text":"impl Freeze for XineramaScreenInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XPanoramiXInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XInput","synthetic":true,"types":[]},{"text":"impl Freeze for XDevice","synthetic":true,"types":[]},{"text":"impl Freeze for XDeviceControl","synthetic":true,"types":[]},{"text":"impl Freeze for XDeviceInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XDeviceState","synthetic":true,"types":[]},{"text":"impl Freeze for XDeviceTimeCoord","synthetic":true,"types":[]},{"text":"impl Freeze for XExtensionVersion","synthetic":true,"types":[]},{"text":"impl Freeze for XFeedbackControl","synthetic":true,"types":[]},{"text":"impl Freeze for XFeedbackState","synthetic":true,"types":[]},{"text":"impl Freeze for XInputClass","synthetic":true,"types":[]},{"text":"impl Freeze for XInputClassInfo","synthetic":true,"types":[]},{"text":"impl Freeze for _XAnyClassinfo","synthetic":true,"types":[]},{"text":"impl Freeze for XInput2","synthetic":true,"types":[]},{"text":"impl Freeze for XIAddMasterInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIRemoveMasterInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIAttachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIDetachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIAnyHierarchyChangeInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIModifierState","synthetic":true,"types":[]},{"text":"impl Freeze for XIButtonState","synthetic":true,"types":[]},{"text":"impl Freeze for XIValuatorState","synthetic":true,"types":[]},{"text":"impl Freeze for XIEventMask","synthetic":true,"types":[]},{"text":"impl Freeze for XIAnyClassInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIButtonClassInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIKeyClassInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIValuatorClassInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIScrollClassInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XITouchClassInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIDeviceInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIGrabModifiers","synthetic":true,"types":[]},{"text":"impl Freeze for XIBarrierReleasePointerInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIHierarchyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XIHierarchyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIDeviceChangedEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIDeviceEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIRawEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIEnterEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIPropertyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XITouchOwnershipEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XIBarrierEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Xmu","synthetic":true,"types":[]},{"text":"impl Freeze for _AtomRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XmuArea","synthetic":true,"types":[]},{"text":"impl Freeze for _XmuDisplayQueue","synthetic":true,"types":[]},{"text":"impl Freeze for _XmuDisplayQueueEntry","synthetic":true,"types":[]},{"text":"impl Freeze for _XmuScanline","synthetic":true,"types":[]},{"text":"impl Freeze for _XmuSegment","synthetic":true,"types":[]},{"text":"impl Freeze for _XmuWidgetNode","synthetic":true,"types":[]},{"text":"impl Freeze for Xf86vmode","synthetic":true,"types":[]},{"text":"impl Freeze for XRecordClientInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XRecordExtRange","synthetic":true,"types":[]},{"text":"impl Freeze for XRecordInterceptData","synthetic":true,"types":[]},{"text":"impl Freeze for XRecordRange","synthetic":true,"types":[]},{"text":"impl Freeze for XRecordRange8","synthetic":true,"types":[]},{"text":"impl Freeze for XRecordRange16","synthetic":true,"types":[]},{"text":"impl Freeze for XRecordState","synthetic":true,"types":[]},{"text":"impl Freeze for Xrender","synthetic":true,"types":[]},{"text":"impl Freeze for _XAnimCursor","synthetic":true,"types":[]},{"text":"impl Freeze for _XCircle","synthetic":true,"types":[]},{"text":"impl Freeze for _XConicalGradient","synthetic":true,"types":[]},{"text":"impl Freeze for _XFilters","synthetic":true,"types":[]},{"text":"impl Freeze for _XGlyphElt8","synthetic":true,"types":[]},{"text":"impl Freeze for _XGlyphElt16","synthetic":true,"types":[]},{"text":"impl Freeze for _XGlyphElt32","synthetic":true,"types":[]},{"text":"impl Freeze for _XGlyphInfo","synthetic":true,"types":[]},{"text":"impl Freeze for _XIndexValue","synthetic":true,"types":[]},{"text":"impl Freeze for _XLinearGradient","synthetic":true,"types":[]},{"text":"impl Freeze for _XLineFixed","synthetic":true,"types":[]},{"text":"impl Freeze for _XPointDouble","synthetic":true,"types":[]},{"text":"impl Freeze for _XPointFixed","synthetic":true,"types":[]},{"text":"impl Freeze for _XRadialGradient","synthetic":true,"types":[]},{"text":"impl Freeze for XRenderColor","synthetic":true,"types":[]},{"text":"impl Freeze for XRenderDirectFormat","synthetic":true,"types":[]},{"text":"impl Freeze for XRenderPictFormat","synthetic":true,"types":[]},{"text":"impl Freeze for _XRenderPictureAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for _XSpanFix","synthetic":true,"types":[]},{"text":"impl Freeze for _XTrap","synthetic":true,"types":[]},{"text":"impl Freeze for _XTrapezoid","synthetic":true,"types":[]},{"text":"impl Freeze for _XTriangle","synthetic":true,"types":[]},{"text":"impl Freeze for _XTransform","synthetic":true,"types":[]},{"text":"impl Freeze for Xss","synthetic":true,"types":[]},{"text":"impl Freeze for XScreenSaverInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XScreenSaverNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Xt","synthetic":true,"types":[]},{"text":"impl Freeze for Arg","synthetic":true,"types":[]},{"text":"impl Freeze for SubstitutionRec","synthetic":true,"types":[]},{"text":"impl Freeze for _TranslationData","synthetic":true,"types":[]},{"text":"impl Freeze for _WidgetClassRec","synthetic":true,"types":[]},{"text":"impl Freeze for _WidgetRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XtActionsRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XtAppStruct","synthetic":true,"types":[]},{"text":"impl Freeze for _XtCallbackRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XtCheckpointTokenRec","synthetic":true,"types":[]},{"text":"impl Freeze for XtConvertArgRec","synthetic":true,"types":[]},{"text":"impl Freeze for _XtResource","synthetic":true,"types":[]},{"text":"impl Freeze for XtWidgetGeometry","synthetic":true,"types":[]},{"text":"impl Freeze for Xf86vmode","synthetic":true,"types":[]},{"text":"impl Freeze for Xlib_xcb","synthetic":true,"types":[]},{"text":"impl Freeze for Xrandr","synthetic":true,"types":[]},{"text":"impl Freeze for XRRScreenSize","synthetic":true,"types":[]},{"text":"impl Freeze for XRRScreenConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for XRRModeInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XRRScreenResources","synthetic":true,"types":[]},{"text":"impl Freeze for XRROutputInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XRRPropertyInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XRRCrtcInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XRRCrtcGamma","synthetic":true,"types":[]},{"text":"impl Freeze for XRRCrtcTransformAttributes","synthetic":true,"types":[]},{"text":"impl Freeze for XRRPanning","synthetic":true,"types":[]},{"text":"impl Freeze for XRRProviderResources","synthetic":true,"types":[]},{"text":"impl Freeze for XRRProviderInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XRRMonitorInfo","synthetic":true,"types":[]},{"text":"impl Freeze for XRRScreenChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XRRNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XRROutputChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XRRCrtcChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XRROutputPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XRRProviderChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XRRProviderPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for XRRResourceChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for Xrandr_2_2_0","synthetic":true,"types":[]}];
implementors["xcb"] = [{"text":"impl&lt;'a, T&gt; Freeze for StructPtr&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Event&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cookie&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Reply&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Connection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for QueryExtensionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ConnError","synthetic":true,"types":[]},{"text":"impl Freeze for RequestError","synthetic":true,"types":[]},{"text":"impl Freeze for ValueError","synthetic":true,"types":[]},{"text":"impl Freeze for WindowError","synthetic":true,"types":[]},{"text":"impl Freeze for PixmapError","synthetic":true,"types":[]},{"text":"impl Freeze for AtomError","synthetic":true,"types":[]},{"text":"impl Freeze for CursorError","synthetic":true,"types":[]},{"text":"impl Freeze for FontError","synthetic":true,"types":[]},{"text":"impl Freeze for MatchError","synthetic":true,"types":[]},{"text":"impl Freeze for DrawableError","synthetic":true,"types":[]},{"text":"impl Freeze for AccessError","synthetic":true,"types":[]},{"text":"impl Freeze for AllocError","synthetic":true,"types":[]},{"text":"impl Freeze for ColormapError","synthetic":true,"types":[]},{"text":"impl Freeze for GContextError","synthetic":true,"types":[]},{"text":"impl Freeze for IdChoiceError","synthetic":true,"types":[]},{"text":"impl Freeze for NameError","synthetic":true,"types":[]},{"text":"impl Freeze for LengthError","synthetic":true,"types":[]},{"text":"impl Freeze for ImplementationError","synthetic":true,"types":[]},{"text":"impl Freeze for Char2b","synthetic":true,"types":[]},{"text":"impl Freeze for Point","synthetic":true,"types":[]},{"text":"impl Freeze for Rectangle","synthetic":true,"types":[]},{"text":"impl Freeze for Arc","synthetic":true,"types":[]},{"text":"impl Freeze for Format","synthetic":true,"types":[]},{"text":"impl Freeze for Visualtype","synthetic":true,"types":[]},{"text":"impl Freeze for Timecoord","synthetic":true,"types":[]},{"text":"impl Freeze for Fontprop","synthetic":true,"types":[]},{"text":"impl Freeze for Charinfo","synthetic":true,"types":[]},{"text":"impl Freeze for Segment","synthetic":true,"types":[]},{"text":"impl Freeze for Coloritem","synthetic":true,"types":[]},{"text":"impl Freeze for Rgb","synthetic":true,"types":[]},{"text":"impl Freeze for PictFormatError","synthetic":true,"types":[]},{"text":"impl Freeze for PictureError","synthetic":true,"types":[]},{"text":"impl Freeze for PictOpError","synthetic":true,"types":[]},{"text":"impl Freeze for GlyphSetError","synthetic":true,"types":[]},{"text":"impl Freeze for GlyphError","synthetic":true,"types":[]},{"text":"impl Freeze for Directformat","synthetic":true,"types":[]},{"text":"impl Freeze for Pictforminfo","synthetic":true,"types":[]},{"text":"impl Freeze for Pictvisual","synthetic":true,"types":[]},{"text":"impl Freeze for Indexvalue","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for Pointfix","synthetic":true,"types":[]},{"text":"impl Freeze for Linefix","synthetic":true,"types":[]},{"text":"impl Freeze for Triangle","synthetic":true,"types":[]},{"text":"impl Freeze for Trapezoid","synthetic":true,"types":[]},{"text":"impl Freeze for Glyphinfo","synthetic":true,"types":[]},{"text":"impl Freeze for Transform","synthetic":true,"types":[]},{"text":"impl Freeze for Animcursorelt","synthetic":true,"types":[]},{"text":"impl Freeze for Spanfix","synthetic":true,"types":[]},{"text":"impl Freeze for Trap","synthetic":true,"types":[]},{"text":"impl Freeze for BadRegionError","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_generic_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_generic_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_generic_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_ge_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_generic_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_void_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_auth_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_connection_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_extension_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_special_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_char2b_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_char2b_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_window_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_pixmap_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_cursor_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_font_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_gcontext_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_colormap_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_atom_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_drawable_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_fontable_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_visualid_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_timestamp_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_keysym_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_keycode_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_button_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_point_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_point_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_rectangle_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_rectangle_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_arc_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_arc_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_format_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_format_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_visualtype_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_visualtype_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_depth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_depth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_screen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_screen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_setup_request_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_setup_request_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_setup_failed_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_setup_failed_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_setup_authenticate_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_setup_authenticate_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_setup_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_setup_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_key_press_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_button_press_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_motion_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_enter_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_focus_in_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_keymap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_expose_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_graphics_exposure_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_no_exposure_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_visibility_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_create_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_destroy_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_unmap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_map_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_map_request_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_reparent_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_configure_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_configure_request_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_gravity_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_resize_request_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_circulate_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_property_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_selection_clear_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_selection_request_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_colormap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_client_message_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_client_message_data_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_client_message_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_mapping_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_ge_generic_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_request_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_value_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_create_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_window_attributes_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_window_attributes_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_destroy_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_destroy_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_reparent_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_map_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_map_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_unmap_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_unmap_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_configure_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_circulate_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_geometry_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_geometry_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_geometry_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_tree_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_tree_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_tree_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_intern_atom_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_intern_atom_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_intern_atom_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_atom_name_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_atom_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_atom_name_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_property_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_delete_property_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_property_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_property_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_property_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_properties_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_properties_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_properties_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_selection_owner_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_selection_owner_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_convert_selection_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_send_event_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_ungrab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_button_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_ungrab_button_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_active_pointer_grab_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_keyboard_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_keyboard_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_ungrab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_key_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_ungrab_key_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_allow_events_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_grab_server_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_ungrab_server_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_timecoord_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_timecoord_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_motion_events_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_motion_events_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_motion_events_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_translate_coordinates_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_translate_coordinates_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_translate_coordinates_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_warp_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_input_focus_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_input_focus_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_keymap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_keymap_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_keymap_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_open_font_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_close_font_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_fontprop_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_fontprop_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_charinfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_charinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_font_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_font_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_font_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_text_extents_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_text_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_text_extents_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_str_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_str_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_fonts_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_fonts_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_fonts_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_fonts_with_info_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_fonts_with_info_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_fonts_with_info_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_font_path_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_font_path_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_font_path_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_font_path_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_create_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_free_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_create_gc_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_gc_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_copy_gc_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_dashes_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_free_gc_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_clear_area_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_copy_area_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_copy_plane_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_point_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_line_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_segment_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_segment_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_segment_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_arc_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_fill_poly_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_fill_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_fill_arc_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_put_image_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_image_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_image_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_image_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_text_8_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_poly_text_16_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_image_text_8_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_image_text_16_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_create_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_free_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_copy_colormap_and_free_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_install_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_uninstall_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_installed_colormaps_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_installed_colormaps_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_installed_colormaps_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_named_color_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_named_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_named_color_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_cells_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_cells_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_cells_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_planes_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_planes_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_alloc_color_planes_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_free_colors_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_coloritem_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_coloritem_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_store_colors_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_store_named_color_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_rgb_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_rgb_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_colors_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_colors_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_colors_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_lookup_color_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_lookup_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_lookup_color_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_create_glyph_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_free_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_recolor_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_best_size_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_best_size_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_best_size_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_extension_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_extension_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_query_extension_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_extensions_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_extensions_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_extensions_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_keyboard_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_keyboard_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_keyboard_control_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_keyboard_control_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_bell_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_pointer_control_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_pointer_control_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_screen_saver_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_screen_saver_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_change_hosts_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_host_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_host_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_hosts_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_hosts_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_list_hosts_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_access_control_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_close_down_mode_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_kill_client_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_rotate_properties_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_force_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_set_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_get_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_no_operation_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_big_requests_enable_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_big_requests_enable_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_big_requests_enable_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_version_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_version_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_xid_range_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_xid_range_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_xid_range_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_xid_list_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_xid_list_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xc_misc_get_xid_list_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_glyph_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_glyphset_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_picture_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pictformat_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_fixed_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pict_format_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_picture_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pict_op_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_glyph_set_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_glyph_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_directformat_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_directformat_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pictforminfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pictforminfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pictvisual_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pictvisual_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pictdepth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_render_pictdepth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pictscreen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for xcb_render_pictscreen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_indexvalue_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_indexvalue_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_color_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_color_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pointfix_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_pointfix_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_linefix_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_linefix_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_triangle_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_triangle_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_trapezoid_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_trapezoid_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_glyphinfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_glyphinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_pict_formats_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_pict_formats_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_pict_formats_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_pict_index_values_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_pict_index_values_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_pict_index_values_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_picture_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_change_picture_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_set_picture_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_free_picture_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_composite_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_trapezoids_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_triangles_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_tri_strip_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_tri_fan_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_reference_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_free_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_add_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_free_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_composite_glyphs_8_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_composite_glyphs_16_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_composite_glyphs_32_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_fill_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_transform_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_transform_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_set_picture_transform_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_filters_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_filters_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_query_filters_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_set_picture_filter_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_animcursorelt_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_animcursorelt_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_anim_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_spanfix_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_spanfix_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_trap_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_trap_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_add_traps_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_solid_fill_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_linear_gradient_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_radial_gradient_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_render_create_conical_gradient_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_op_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_kind_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_mask_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_combine_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_offset_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_query_extents_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_query_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_query_extents_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_select_input_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_input_selected_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_input_selected_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_input_selected_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_get_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_get_rectangles_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_shape_get_rectangles_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_select_selection_input_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_cursor_notify_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_select_cursor_input_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_image_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_image_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_image_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_region_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_bad_region_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_create_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_create_region_from_bitmap_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_create_region_from_window_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_create_region_from_gc_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_create_region_from_picture_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_destroy_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_set_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_copy_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_union_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_intersect_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_subtract_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_invert_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_translate_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_region_extents_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_fetch_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_fetch_region_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_fetch_region_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_set_gc_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_set_window_shape_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_set_picture_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_set_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_name_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_image_and_name_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_image_and_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_get_cursor_image_and_name_reply_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_change_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_change_cursor_by_name_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_expand_region_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_hide_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_show_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_barrier_iterator_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_create_pointer_barrier_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for xcb_xfixes_delete_pointer_barrier_request_t","synthetic":true,"types":[]}];
implementors["xdg"] = [{"text":"impl Freeze for BaseDirectories","synthetic":true,"types":[]},{"text":"impl Freeze for BaseDirectoriesError","synthetic":true,"types":[]},{"text":"impl Freeze for FileFindIterator","synthetic":true,"types":[]}];
implementors["xi_unicode"] = [{"text":"impl&lt;'a&gt; Freeze for LineBreakIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LineBreakLeafIter","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl Freeze for ParserConfig","synthetic":true,"types":[]},{"text":"impl Freeze for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Freeze for TextPosition","synthetic":true,"types":[]},{"text":"impl Freeze for XmlVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Namespace","synthetic":true,"types":[]},{"text":"impl Freeze for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for XmlEvent","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()