(function() {var implementors = {};
implementors["addr2line"] = [{"text":"impl&lt;R&gt; !Sync for Context&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; !Sync for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Sync for Frame&lt;'ctx, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Location&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Sync for Adler32","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl Sync for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Sync for AHasher","synthetic":true,"types":[]},{"text":"impl Sync for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Sync for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Sync for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Match","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Sync for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Searcher","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O&gt; Sync for Id&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Additive","synthetic":true,"types":[]},{"text":"impl Sync for Multiplicative","synthetic":true,"types":[]}];
implementors["alsa_sys"] = [{"text":"impl !Sync for snd_dlsym_link","synthetic":true,"types":[]},{"text":"impl !Sync for snd_devname_t","synthetic":true,"types":[]},{"text":"impl !Sync for snd_pcm_channel_area_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_sync_id_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_chmap_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_chmap_query_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_scope_ops_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_read_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_tread_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_aes_iec958_t","synthetic":true,"types":[]},{"text":"impl !Sync for snd_mixer_selem_regopt","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_addr_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_connect_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_real_time_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_timestamp_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_ev_note_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_ev_ctrl_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_ev_raw8_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_ev_raw32_t","synthetic":true,"types":[]},{"text":"impl !Sync for snd_seq_ev_ext_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_result_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_queue_skew_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_ev_queue_control_t","synthetic":true,"types":[]},{"text":"impl Sync for Union_Unnamed9","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_event_t","synthetic":true,"types":[]},{"text":"impl Sync for Union_Unnamed10","synthetic":true,"types":[]},{"text":"impl&lt;Storage, Align&gt; Sync for __BindgenBitfieldUnit&lt;Storage, Align&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Align: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Storage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for _snd_pcm_audio_tstamp_config","synthetic":true,"types":[]},{"text":"impl Sync for _snd_pcm_audio_tstamp_report","synthetic":true,"types":[]},{"text":"impl Sync for snd_async_handler_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_shm_area","synthetic":true,"types":[]},{"text":"impl Sync for snd_input_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_output_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_config_t","synthetic":true,"types":[]},{"text":"impl Sync for Struct__snd_config_iterator","synthetic":true,"types":[]},{"text":"impl Sync for snd_config_update_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_hw_params_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_sw_params_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_status_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_access_mask_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_format_mask_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_subformat_mask_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_scope_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_pcm_hook_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_rawmidi_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_rawmidi_params_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_rawmidi_status_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_rawmidi_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_id_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_ginfo_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_gparams_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_gstatus_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_params_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_status_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_query_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_timer_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_hwdep_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_hwdep_dsp_status_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_hwdep_dsp_image_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_hwdep_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_ctl_card_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_ctl_elem_id_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_ctl_elem_list_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_ctl_elem_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_ctl_elem_value_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_ctl_event_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_ctl_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_sctl_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_hctl_elem_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_hctl_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_mixer_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_mixer_class_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_mixer_elem_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_mixer_selem_id_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_system_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_client_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_client_pool_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_port_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_port_subscribe_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_query_subscribe_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_queue_info_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_queue_status_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_queue_tempo_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_queue_timer_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_seq_remove_events_t","synthetic":true,"types":[]},{"text":"impl Sync for snd_midi_event_t","synthetic":true,"types":[]}];
implementors["amethyst"] = [{"text":"impl&lt;S, T, E, R&gt; Sync for ApplicationBuilder&lt;S, T, E, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, E&nbsp;=&nbsp;StateEvent&lt;StringBindings&gt;, R&nbsp;=&nbsp;StateEventReader&lt;StringBindings&gt;&gt; !Sync for CoreApplication&lt;'a, T, E, R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CallbackQueue","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for GameData&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for GameDataBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Logger","synthetic":true,"types":[]},{"text":"impl Sync for LoggerConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for StateData&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, E&gt; !Sync for StateMachine&lt;'a, T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for StateEventReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StdoutLog","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Sync for Trans&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for StateEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_animation"] = [{"text":"impl&lt;'a, I, T&gt; Sync for AnimationBundle&lt;'a, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for SamplingBundle&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VertexSkinningBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for AnimatablePrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AnimationHierarchyPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AnimationPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for AnimationSetPrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Animation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AnimationControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for AnimationControlSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AnimationHierarchy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for AnimationSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RestState&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sampler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SamplerControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SamplerControlSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Joint","synthetic":true,"types":[]},{"text":"impl Sync for JointPrefab","synthetic":true,"types":[]},{"text":"impl Sync for Skin","synthetic":true,"types":[]},{"text":"impl Sync for SkinPrefab","synthetic":true,"types":[]},{"text":"impl Sync for SkinnablePrefab","synthetic":true,"types":[]},{"text":"impl Sync for VertexSkinningSystem","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for AnimationControlSystem&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SamplerInterpolationSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MaterialChannel","synthetic":true,"types":[]},{"text":"impl Sync for MaterialPrimitive","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AnimationCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BlendMethod","synthetic":true,"types":[]},{"text":"impl Sync for ControlState","synthetic":true,"types":[]},{"text":"impl Sync for DeferStartRelation","synthetic":true,"types":[]},{"text":"impl Sync for EndControl","synthetic":true,"types":[]},{"text":"impl Sync for StepDirection","synthetic":true,"types":[]},{"text":"impl Sync for SpriteRenderChannel","synthetic":true,"types":[]},{"text":"impl Sync for SpriteRenderPrimitive","synthetic":true,"types":[]},{"text":"impl Sync for TransformChannel","synthetic":true,"types":[]},{"text":"impl Sync for UiTransformChannel","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SamplerPrimitive&lt;S&gt;","synthetic":true,"types":[]}];
implementors["amethyst_assets"] = [{"text":"impl&lt;D&gt; Sync for FormatValue&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Cache&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RonFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Sync for AssetLoaderSystemData&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Loader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Prefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for PrefabLoader&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PrefabLoaderSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PrefabLoaderSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ProgressCounter","synthetic":true,"types":[]},{"text":"impl Sync for HotReloadBundle","synthetic":true,"types":[]},{"text":"impl Sync for HotReloadStrategy","synthetic":true,"types":[]},{"text":"impl Sync for HotReloadSystem","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for SingleFile&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Directory","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for AssetStorage&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized&gt; Sync for Handle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Processor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for WeakHandle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Sync for AssetPrefab&lt;A, F&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Completion","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ProcessingState&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_audio"] = [{"text":"impl Sync for AudioBundle","synthetic":true,"types":[]},{"text":"impl Sync for AudioEmitter","synthetic":true,"types":[]},{"text":"impl Sync for AudioListener","synthetic":true,"types":[]},{"text":"impl Sync for AudioPrefab","synthetic":true,"types":[]},{"text":"impl Sync for FlacFormat","synthetic":true,"types":[]},{"text":"impl Sync for Mp3Format","synthetic":true,"types":[]},{"text":"impl Sync for OggFormat","synthetic":true,"types":[]},{"text":"impl Sync for WavFormat","synthetic":true,"types":[]},{"text":"impl Sync for AudioSink","synthetic":true,"types":[]},{"text":"impl Sync for Source","synthetic":true,"types":[]},{"text":"impl Sync for AudioSystem","synthetic":true,"types":[]},{"text":"impl Sync for AudioSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Sync for DjSystem&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Sync for DjSystemDesc&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DecoderError","synthetic":true,"types":[]},{"text":"impl Sync for Output","synthetic":true,"types":[]},{"text":"impl Sync for OutputIterator","synthetic":true,"types":[]}];
implementors["amethyst_config"] = [{"text":"impl Sync for ConfigError","synthetic":true,"types":[]}];
implementors["amethyst_controls"] = [{"text":"impl&lt;T&gt; Sync for ArcBallControlBundle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FlyControlBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ArcBallControlTag","synthetic":true,"types":[]},{"text":"impl Sync for ControlTagPrefab","synthetic":true,"types":[]},{"text":"impl Sync for FlyControlTag","synthetic":true,"types":[]},{"text":"impl Sync for HideCursor","synthetic":true,"types":[]},{"text":"impl Sync for WindowFocus","synthetic":true,"types":[]},{"text":"impl Sync for ArcBallRotationSystem","synthetic":true,"types":[]},{"text":"impl Sync for CursorHideSystem","synthetic":true,"types":[]},{"text":"impl Sync for CursorHideSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FlyMovementSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FlyMovementSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FreeRotationSystem","synthetic":true,"types":[]},{"text":"impl Sync for FreeRotationSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for MouseFocusUpdateSystem","synthetic":true,"types":[]},{"text":"impl Sync for MouseFocusUpdateSystemDesc","synthetic":true,"types":[]}];
implementors["amethyst_core"] = [{"text":"impl&lt;S, V&gt; Sync for Pausable&lt;S, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Hidden","synthetic":true,"types":[]},{"text":"impl Sync for HiddenPropagate","synthetic":true,"types":[]},{"text":"impl Sync for HideHierarchySystem","synthetic":true,"types":[]},{"text":"impl Sync for HideHierarchySystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for Named","synthetic":true,"types":[]},{"text":"impl Sync for Axis2","synthetic":true,"types":[]},{"text":"impl Sync for Axis3","synthetic":true,"types":[]},{"text":"impl Sync for AddBarrier","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for AddSystem&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; Sync for AddSystemDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for AddThreadLocal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; Sync for AddThreadLocalDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for AddBundle&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FrameRateLimitConfig","synthetic":true,"types":[]},{"text":"impl Sync for FrameLimiter","synthetic":true,"types":[]},{"text":"impl Sync for FrameRateLimitStrategy","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Plane&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Ray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Time","synthetic":true,"types":[]},{"text":"impl Sync for Stopwatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TransformBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Parent","synthetic":true,"types":[]},{"text":"impl Sync for Transform","synthetic":true,"types":[]},{"text":"impl Sync for TransformSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for TransformSystem","synthetic":true,"types":[]}];
implementors["amethyst_dynamic_ui"] = [{"text":"impl&lt;C&gt; Sync for DynamicUiBundle&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SizeConstraints","synthetic":true,"types":[]},{"text":"impl Sync for Properties","synthetic":true,"types":[]},{"text":"impl Sync for ModalData","synthetic":true,"types":[]},{"text":"impl Sync for NoCustomElements","synthetic":true,"types":[]},{"text":"impl Sync for UiExtraTextData","synthetic":true,"types":[]},{"text":"impl Sync for ImageButtonData","synthetic":true,"types":[]},{"text":"impl Sync for I18nData","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for LayoutElement&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Fonts","synthetic":true,"types":[]},{"text":"impl Sync for Textures","synthetic":true,"types":[]},{"text":"impl Sync for WidgetConstraintBuilder","synthetic":true,"types":[]},{"text":"impl Sync for PaddableConstraintBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Padding","synthetic":true,"types":[]},{"text":"impl Sync for WidgetConstraint","synthetic":true,"types":[]},{"text":"impl Sync for PaddableConstraint","synthetic":true,"types":[]},{"text":"impl Sync for LayoutVars","synthetic":true,"types":[]},{"text":"impl !Sync for Layout","synthetic":true,"types":[]},{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl Sync for ExactFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for VariableEditable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EditVariable","synthetic":true,"types":[]},{"text":"impl Sync for LAYOUT","synthetic":true,"types":[]},{"text":"impl Sync for VarType","synthetic":true,"types":[]},{"text":"impl Sync for CenteredLayout","synthetic":true,"types":[]},{"text":"impl Sync for LinearLayoutData","synthetic":true,"types":[]},{"text":"impl Sync for LinearLayout","synthetic":true,"types":[]},{"text":"impl Sync for FlowDirection","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl Sync for ItemAlignment","synthetic":true,"types":[]},{"text":"impl Sync for ExtraButtonData","synthetic":true,"types":[]},{"text":"impl Sync for UiCachedImage","synthetic":true,"types":[]},{"text":"impl Sync for UiCachedText","synthetic":true,"types":[]},{"text":"impl Sync for FontFamilyPrefab","synthetic":true,"types":[]},{"text":"impl Sync for HtmlTextData","synthetic":true,"types":[]},{"text":"impl Sync for CalculatedDimensions","synthetic":true,"types":[]},{"text":"impl Sync for LayoutIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for Tinted","synthetic":true,"types":[]},{"text":"impl !Sync for DynamicLayoutData","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Sync for DynamicUiLoader&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ToLayoutElement&gt;::PrefabData: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UiTextPrefab","synthetic":true,"types":[]},{"text":"impl Sync for ResizeSystem","synthetic":true,"types":[]},{"text":"impl Sync for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonTintAction","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonTintRetrigger","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonTintActionType","synthetic":true,"types":[]},{"text":"impl !Sync for LimnSolver","synthetic":true,"types":[]},{"text":"impl Sync for LayoutManager","synthetic":true,"types":[]},{"text":"impl Sync for UiFmodRetrigger","synthetic":true,"types":[]},{"text":"impl Sync for UiFmodSystem","synthetic":true,"types":[]},{"text":"impl Sync for UiFmodSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for SoundEvent","synthetic":true,"types":[]},{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl Sync for Styles","synthetic":true,"types":[]},{"text":"impl Sync for FontFamily","synthetic":true,"types":[]},{"text":"impl Sync for HtmlText","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonTintSystem","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonTintSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for DynamicUiFormat&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl Sync for DynamicLayout","synthetic":false,"types":[]}];
implementors["amethyst_error"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Causes&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["amethyst_fmod"] = [{"text":"impl Sync for FmodBundle","synthetic":true,"types":[]},{"text":"impl !Sync for EventDescription","synthetic":true,"types":[]},{"text":"impl !Sync for EventInstance","synthetic":true,"types":[]},{"text":"impl Sync for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SoundBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Attributes3D","synthetic":true,"types":[]},{"text":"impl !Sync for CoreSystem","synthetic":true,"types":[]},{"text":"impl Sync for DriverInfo","synthetic":true,"types":[]},{"text":"impl Sync for UpdateSystem","synthetic":true,"types":[]},{"text":"impl Sync for Status","synthetic":true,"types":[]},{"text":"impl Sync for StopMode","synthetic":true,"types":[]},{"text":"impl Sync for System","synthetic":false,"types":[]},{"text":"impl Sync for Bank","synthetic":false,"types":[]}];
implementors["amethyst_input"] = [{"text":"impl&lt;T&gt; Sync for Bindings&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StringBindings","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InputBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InputHandler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InputSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InputSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Axis","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BindingError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BindingsFileError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Button","synthetic":true,"types":[]},{"text":"impl Sync for ControllerAxis","synthetic":true,"types":[]},{"text":"impl Sync for ControllerButton","synthetic":true,"types":[]},{"text":"impl Sync for ControllerEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InputEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MouseAxis","synthetic":true,"types":[]},{"text":"impl Sync for ScrollDirection","synthetic":true,"types":[]}];
implementors["amethyst_locale"] = [{"text":"impl Sync for LocaleFormat","synthetic":true,"types":[]},{"text":"impl Sync for Locale","synthetic":true,"types":[]}];
implementors["amethyst_network"] = [{"text":"impl Sync for Message","synthetic":true,"types":[]},{"text":"impl Sync for NetworkSimulationTime","synthetic":true,"types":[]},{"text":"impl Sync for NetworkSimulationTimeSystem","synthetic":true,"types":[]},{"text":"impl Sync for TransportResource","synthetic":true,"types":[]},{"text":"impl Sync for NetworkSimulationEvent","synthetic":true,"types":[]},{"text":"impl Sync for DeliveryRequirement","synthetic":true,"types":[]},{"text":"impl Sync for UrgencyRequirement","synthetic":true,"types":[]},{"text":"impl Sync for LaminarNetworkBundle","synthetic":true,"types":[]},{"text":"impl Sync for LaminarSocketResource","synthetic":true,"types":[]},{"text":"impl Sync for TcpNetworkBundle","synthetic":true,"types":[]},{"text":"impl Sync for TcpStreamManagementSystem","synthetic":true,"types":[]},{"text":"impl Sync for TcpConnectionListenerSystem","synthetic":true,"types":[]},{"text":"impl Sync for TcpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl Sync for TcpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl Sync for TcpNetworkResource","synthetic":true,"types":[]},{"text":"impl Sync for UdpNetworkBundle","synthetic":true,"types":[]},{"text":"impl Sync for UdpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl Sync for UdpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl Sync for UdpSocketResource","synthetic":true,"types":[]}];
implementors["amethyst_rendy"] = [{"text":"impl&lt;B&gt; !Sync for RenderingBundle&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ActiveCamera","synthetic":true,"types":[]},{"text":"impl Sync for Camera","synthetic":true,"types":[]},{"text":"impl Sync for ImageFormat","synthetic":true,"types":[]},{"text":"impl Sync for Material","synthetic":true,"types":[]},{"text":"impl Sync for MaterialDefaults","synthetic":true,"types":[]},{"text":"impl Sync for RenderToWindow","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for RenderBase3D&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RenderFlat2D","synthetic":true,"types":[]},{"text":"impl Sync for RenderDebugLines","synthetic":true,"types":[]},{"text":"impl Sync for RenderSkybox","synthetic":true,"types":[]},{"text":"impl Sync for Sprite","synthetic":true,"types":[]},{"text":"impl Sync for SpriteRender","synthetic":true,"types":[]},{"text":"impl Sync for SpriteSheet","synthetic":true,"types":[]},{"text":"impl Sync for SpriteSheetFormat","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for MeshProcessorSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, G&gt; Sync for RenderingSystem&lt;B, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Semaphore: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for TextureProcessorSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Transparent","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for MeshPrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TexturePrefab","synthetic":true,"types":[]},{"text":"impl Sync for Mesh","synthetic":true,"types":[]},{"text":"impl Sync for Texture","synthetic":true,"types":[]},{"text":"impl Sync for ChangeDetection","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for DrawBase3DDesc&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for DrawBase3D&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Base3DPassDef&gt;::TextureSet: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for DrawBase3DTransparentDesc&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for DrawBase3DTransparent&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DrawDebugLinesDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DrawDebugLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FlatPassDef","synthetic":true,"types":[]},{"text":"impl Sync for DrawFlat2DDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DrawFlat2D&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DrawFlat2DTransparentDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DrawFlat2DTransparent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PbrPassDef","synthetic":true,"types":[]},{"text":"impl Sync for ShadedPassDef","synthetic":true,"types":[]},{"text":"impl Sync for DrawSkyboxDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DrawSkybox&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, C&gt; Sync for TwoLevelBatch&lt;PK, SK, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, D&gt; Sync for OrderedTwoLevelBatch&lt;PK, SK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; Sync for OneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; Sync for OrderedOneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Sync for RenderPlan&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TargetMetadata","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !Sync for TargetPlanContext&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ImageOptions","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for TargetPlanOutputs&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TargetImage","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for OutputColor&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Sync for RenderableAction&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RenderOrder","synthetic":true,"types":[]},{"text":"impl Sync for Target","synthetic":true,"types":[]},{"text":"impl Sync for ActiveCameraPrefab","synthetic":true,"types":[]},{"text":"impl Sync for CameraPrefab","synthetic":true,"types":[]},{"text":"impl Sync for DebugLine","synthetic":true,"types":[]},{"text":"impl Sync for DebugLinesParams","synthetic":true,"types":[]},{"text":"impl Sync for DebugLinesComponent","synthetic":true,"types":[]},{"text":"impl Sync for DebugLines","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for GraphicsPrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ObjFormat","synthetic":true,"types":[]},{"text":"impl Sync for MaterialPrefab","synthetic":true,"types":[]},{"text":"impl Sync for TextureGenerator","synthetic":true,"types":[]},{"text":"impl Sync for DirectionalLight","synthetic":true,"types":[]},{"text":"impl Sync for PointLight","synthetic":true,"types":[]},{"text":"impl Sync for SpotLight","synthetic":true,"types":[]},{"text":"impl Sync for SunLight","synthetic":true,"types":[]},{"text":"impl Sync for LightPrefab","synthetic":true,"types":[]},{"text":"impl Sync for Light","synthetic":true,"types":[]},{"text":"impl Sync for TextureOffset","synthetic":true,"types":[]},{"text":"impl Sync for TexAlbedo","synthetic":true,"types":[]},{"text":"impl Sync for TexEmission","synthetic":true,"types":[]},{"text":"impl Sync for TexNormal","synthetic":true,"types":[]},{"text":"impl Sync for TexMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Sync for TexAmbientOcclusion","synthetic":true,"types":[]},{"text":"impl Sync for TexCavity","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for PipelineDescBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for PipelinesBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AmbientColor","synthetic":true,"types":[]},{"text":"impl Sync for Tint","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for ShapePrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ShapeUpload&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for InternalShape","synthetic":true,"types":[]},{"text":"impl Sync for Shape","synthetic":true,"types":[]},{"text":"impl Sync for JointWeights","synthetic":true,"types":[]},{"text":"impl Sync for JointIds","synthetic":true,"types":[]},{"text":"impl Sync for JointCombined","synthetic":true,"types":[]},{"text":"impl Sync for JointTransforms","synthetic":true,"types":[]},{"text":"impl Sync for JointTransformsPrefab","synthetic":true,"types":[]},{"text":"impl Sync for TextureCoordinates","synthetic":true,"types":[]},{"text":"impl Sync for SpritePosition","synthetic":true,"types":[]},{"text":"impl Sync for SpriteList","synthetic":true,"types":[]},{"text":"impl Sync for SpriteGrid","synthetic":true,"types":[]},{"text":"impl Sync for Sprites","synthetic":true,"types":[]},{"text":"impl Sync for SpriteSheetLoadedSet","synthetic":true,"types":[]},{"text":"impl Sync for SpriteRenderPrefab","synthetic":true,"types":[]},{"text":"impl Sync for SpriteScenePrefab","synthetic":true,"types":[]},{"text":"impl Sync for SpriteSheetPrefab","synthetic":true,"types":[]},{"text":"impl Sync for SpriteSheetReference","synthetic":true,"types":[]},{"text":"impl Sync for SpriteVisibility","synthetic":true,"types":[]},{"text":"impl Sync for SpriteVisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for EnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for FlatEnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MaterialId","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for MaterialSub&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for SkinningSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TextureId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for TextureSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for DynamicUniform&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for IndexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Sync for VertexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, V, T&gt; Sync for DynamicVertexData&lt;B, V, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CameraGatherer","synthetic":true,"types":[]},{"text":"impl Sync for AmbientGatherer","synthetic":true,"types":[]},{"text":"impl Sync for MeshData","synthetic":true,"types":[]},{"text":"impl Sync for TextureData","synthetic":true,"types":[]},{"text":"impl Sync for BackendVariant","synthetic":true,"types":[]},{"text":"impl Sync for Visibility","synthetic":true,"types":[]},{"text":"impl Sync for VisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl Sync for BoundingSphere","synthetic":true,"types":[]},{"text":"impl Sync for Frustum","synthetic":true,"types":[]},{"text":"impl Sync for TextureOffset","synthetic":true,"types":[]},{"text":"impl Sync for ViewArgs","synthetic":true,"types":[]},{"text":"impl Sync for Tint","synthetic":true,"types":[]},{"text":"impl Sync for VertexArgs","synthetic":true,"types":[]},{"text":"impl Sync for JointsOffset","synthetic":true,"types":[]},{"text":"impl Sync for SkinnedVertexArgs","synthetic":true,"types":[]},{"text":"impl Sync for PointLight","synthetic":true,"types":[]},{"text":"impl Sync for DirectionalLight","synthetic":true,"types":[]},{"text":"impl Sync for SpotLight","synthetic":true,"types":[]},{"text":"impl Sync for Environment","synthetic":true,"types":[]},{"text":"impl Sync for Material","synthetic":true,"types":[]},{"text":"impl Sync for SpriteArgs","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for LookupBuilder&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; Sync for TapCountIterator&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_ui"] = [{"text":"impl Sync for BlinkSystem","synthetic":true,"types":[]},{"text":"impl&lt;T, C, W, G&gt; Sync for UiBundle&lt;T, C, W, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UiButton","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonAction","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonActionRetrigger","synthetic":true,"types":[]},{"text":"impl&lt;G, I&gt; Sync for UiButtonBuilder&lt;G, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I&gt; Sync for UiButtonBuilderResources&lt;'a, G, I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonSystem","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DragWidgetSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Draggable","synthetic":true,"types":[]},{"text":"impl Sync for Interactable","synthetic":true,"types":[]},{"text":"impl Sync for UiEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UiMouseSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for EventRetriggerSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EventRetrigger&gt;::In: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for EventRetriggerSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FontAsset","synthetic":true,"types":[]},{"text":"impl Sync for TtfFormat","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for UiGlyphsSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for UiGlyphsSystemDesc&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UiLabel","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for UiLabelBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Sync for UiLabelBuilderResources&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UiTransformSystem","synthetic":true,"types":[]},{"text":"impl Sync for UiTransformSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for Mask","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DrawUi&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DrawUiDesc","synthetic":true,"types":[]},{"text":"impl Sync for RenderUi","synthetic":true,"types":[]},{"text":"impl Sync for TextEditingPrefab","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for UiButtonData&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, W&gt; Sync for UiCreator&lt;'a, C, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ToNativeWidget&lt;W&gt;&gt;::PrefabData: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UiImagePrefab","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, W&gt; Sync for UiLoader&lt;'a, C, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ToNativeWidget&lt;W&gt;&gt;::PrefabData: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UiTextData","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Sync for UiTransformData&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ResizeSystem","synthetic":true,"types":[]},{"text":"impl Sync for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for UiResize","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Sync for Selectable&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Selected","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Sync for SelectionKeyboardSystem&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Sync for SelectionKeyboardSystemDesc&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Sync for SelectionMouseSystem&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Sync for SelectionMouseSystemDesc&lt;G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Sync for CacheSelectionOrderSystem&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CachedSelectionOrder","synthetic":true,"types":[]},{"text":"impl Sync for UiPlaySoundAction","synthetic":true,"types":[]},{"text":"impl Sync for UiSoundRetrigger","synthetic":true,"types":[]},{"text":"impl Sync for UiSoundSystem","synthetic":true,"types":[]},{"text":"impl Sync for UiSoundSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for TextEditing","synthetic":true,"types":[]},{"text":"impl Sync for TextEditingMouseSystem","synthetic":true,"types":[]},{"text":"impl Sync for TextEditingMouseSystemDesc","synthetic":true,"types":[]},{"text":"impl Sync for TextSection","synthetic":true,"types":[]},{"text":"impl Sync for UiMultipartText","synthetic":true,"types":[]},{"text":"impl Sync for UiText","synthetic":true,"types":[]},{"text":"impl Sync for TextEditingInputSystem","synthetic":true,"types":[]},{"text":"impl Sync for TextEditingInputSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UiFinder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UiTransform","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Sync for Widgets&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UiButtonActionType","synthetic":true,"types":[]},{"text":"impl Sync for UiEventType","synthetic":true,"types":[]},{"text":"impl Sync for UiImage","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for ScaleMode","synthetic":true,"types":[]},{"text":"impl Sync for Stretch","synthetic":true,"types":[]},{"text":"impl Sync for NoCustomUi","synthetic":true,"types":[]},{"text":"impl Sync for UiImageLoadPrefab","synthetic":true,"types":[]},{"text":"impl&lt;C, W, G&gt; Sync for UiWidget&lt;C, W, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LineMode","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for UiFormat&lt;C&gt;","synthetic":false,"types":[]}];
implementors["amethyst_utils"] = [{"text":"impl Sync for AutoFov","synthetic":true,"types":[]},{"text":"impl Sync for AutoFovSystem","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for CircularBuffer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FpsCounter","synthetic":true,"types":[]},{"text":"impl Sync for FpsCounterSystem","synthetic":true,"types":[]},{"text":"impl Sync for FpsCounterBundle","synthetic":true,"types":[]},{"text":"impl Sync for CameraOrthoWorldCoordinates","synthetic":true,"types":[]},{"text":"impl Sync for CameraOrtho","synthetic":true,"types":[]},{"text":"impl Sync for CameraOrthoSystem","synthetic":true,"types":[]},{"text":"impl Sync for CameraNormalizeMode","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Removal&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; Sync for BasicScenePrefab&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Tag&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for TagFinder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DestroyAtTime","synthetic":true,"types":[]},{"text":"impl Sync for DestroyInTime","synthetic":true,"types":[]},{"text":"impl Sync for DestroyAtTimeSystem","synthetic":true,"types":[]},{"text":"impl Sync for DestroyInTimeSystem","synthetic":true,"types":[]}];
implementors["amethyst_window"] = [{"text":"impl Sync for WindowBundle","synthetic":true,"types":[]},{"text":"impl Sync for DisplayConfig","synthetic":true,"types":[]},{"text":"impl Sync for MonitorIdent","synthetic":true,"types":[]},{"text":"impl Sync for ScreenDimensions","synthetic":true,"types":[]},{"text":"impl !Sync for EventsLoopSystem","synthetic":true,"types":[]},{"text":"impl Sync for WindowSystem","synthetic":true,"types":[]}];
implementors["andrew"] = [{"text":"impl&lt;'a&gt; Sync for Canvas&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Endian","synthetic":true,"types":[]},{"text":"impl Sync for Line","synthetic":true,"types":[]},{"text":"impl Sync for Sides","synthetic":true,"types":[]},{"text":"impl Sync for Rectangle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FontConfig","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Sync for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Sync for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Sync for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Sync for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Sync&gt; Sync for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; Sync for AtomSetOnce&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for Atom&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: IntoRawPtr + FromRawPtr,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Sync for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl !Sync for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !Sync for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Backtrace","synthetic":true,"types":[]},{"text":"impl Sync for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Sync for BacktraceSymbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PrintFmt","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for DecodeError","synthetic":true,"types":[]},{"text":"impl Sync for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Sync for PodCastError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Sync for BigEndian","synthetic":true,"types":[]},{"text":"impl Sync for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; Sync for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Bytes","synthetic":false,"types":[]},{"text":"impl Sync for BytesMut","synthetic":false,"types":[]}];
implementors["cassowary"] = [{"text":"impl Sync for Variable","synthetic":true,"types":[]},{"text":"impl Sync for Term","synthetic":true,"types":[]},{"text":"impl Sync for Expression","synthetic":true,"types":[]},{"text":"impl Sync for Constraint","synthetic":true,"types":[]},{"text":"impl Sync for PartialConstraint","synthetic":true,"types":[]},{"text":"impl !Sync for Solver","synthetic":true,"types":[]},{"text":"impl Sync for RelationalOperator","synthetic":true,"types":[]},{"text":"impl Sync for WeightedRelation","synthetic":true,"types":[]},{"text":"impl Sync for AddConstraintError","synthetic":true,"types":[]},{"text":"impl Sync for RemoveConstraintError","synthetic":true,"types":[]},{"text":"impl Sync for AddEditVariableError","synthetic":true,"types":[]},{"text":"impl Sync for RemoveEditVariableError","synthetic":true,"types":[]},{"text":"impl Sync for SuggestValueError","synthetic":true,"types":[]}];
implementors["cgmath"] = [{"text":"impl&lt;S&gt; Sync for Matrix2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Matrix3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Matrix4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Quaternion&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Vector1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Vector2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Vector3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Vector4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Deg&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Rad&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Euler&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Point1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Point2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Point3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Basis2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Basis3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; Sync for Decomposed&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as VectorSpace&gt;::Scalar: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for PerspectiveFov&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Perspective&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Ortho&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["claxon"] = [{"text":"impl&lt;R&gt; Sync for FlacReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FlacReaderOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FlacSamples&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StereoSamples&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FrameReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for BufferedReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Bitstream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StreamInfo","synthetic":true,"types":[]},{"text":"impl Sync for SeekPoint","synthetic":true,"types":[]},{"text":"impl Sync for SeekTable","synthetic":true,"types":[]},{"text":"impl Sync for VorbisComment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Tags&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GetTag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for MetadataBlockReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MetadataBlock","synthetic":true,"types":[]}];
implementors["clipboard"] = [{"text":"impl Sync for Primary","synthetic":true,"types":[]},{"text":"impl Sync for Clipboard","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;Clipboard&gt; !Sync for X11ClipboardContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NopClipboardContext","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl Sync for NeuQuant","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl Sync for ColoredString","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for Styles","synthetic":true,"types":[]},{"text":"impl Sync for ShouldColorize","synthetic":true,"types":[]},{"text":"impl Sync for SHOULD_COLORIZE","synthetic":true,"types":[]}];
implementors["colorful"] = [{"text":"impl Sync for Colorado","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for ColorMode","synthetic":true,"types":[]},{"text":"impl Sync for Symbol","synthetic":true,"types":[]},{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl Sync for CString","synthetic":true,"types":[]},{"text":"impl Sync for RGB","synthetic":true,"types":[]},{"text":"impl Sync for HSL","synthetic":true,"types":[]}];
implementors["cpal"] = [{"text":"impl Sync for HostUnavailable","synthetic":true,"types":[]},{"text":"impl Sync for BackendSpecificError","synthetic":true,"types":[]},{"text":"impl Sync for Device","synthetic":true,"types":[]},{"text":"impl Sync for Devices","synthetic":true,"types":[]},{"text":"impl Sync for EventLoop","synthetic":true,"types":[]},{"text":"impl Sync for Host","synthetic":true,"types":[]},{"text":"impl Sync for SupportedInputFormats","synthetic":true,"types":[]},{"text":"impl Sync for SupportedOutputFormats","synthetic":true,"types":[]},{"text":"impl Sync for StreamId","synthetic":true,"types":[]},{"text":"impl Sync for SampleRate","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for SupportedFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for InputBuffer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for OutputBuffer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DevicesError","synthetic":true,"types":[]},{"text":"impl Sync for DeviceNameError","synthetic":true,"types":[]},{"text":"impl Sync for SupportedFormatsError","synthetic":true,"types":[]},{"text":"impl Sync for DefaultFormatError","synthetic":true,"types":[]},{"text":"impl Sync for BuildStreamError","synthetic":true,"types":[]},{"text":"impl Sync for PlayStreamError","synthetic":true,"types":[]},{"text":"impl Sync for PauseStreamError","synthetic":true,"types":[]},{"text":"impl Sync for StreamError","synthetic":true,"types":[]},{"text":"impl Sync for HostId","synthetic":true,"types":[]},{"text":"impl Sync for SampleFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StreamData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnknownTypeInputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnknownTypeOutputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Host","synthetic":true,"types":[]},{"text":"impl Sync for Device","synthetic":true,"types":[]},{"text":"impl Sync for StreamId","synthetic":true,"types":[]},{"text":"impl Sync for Devices","synthetic":false,"types":[]},{"text":"impl Sync for EventLoop","synthetic":false,"types":[]}];
implementors["crc"] = [{"text":"impl Sync for Digest","synthetic":true,"types":[]},{"text":"impl Sync for Digest","synthetic":true,"types":[]},{"text":"impl Sync for Digest","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Sync for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryReadyError","synthetic":true,"types":[]},{"text":"impl Sync for TrySelectError","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Sync for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Sync for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Sync for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Sync for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Sync for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Sync for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl !Sync for Backoff","synthetic":true,"types":[]},{"text":"impl !Sync for Parker","synthetic":true,"types":[]},{"text":"impl Sync for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Sync for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'env&gt; Sync for Scope&lt;'env&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Sync for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Sync for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Sync for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dlib"] = [{"text":"impl Sync for DlError","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Sync for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Sync for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Logger","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Target","synthetic":true,"types":[]},{"text":"impl Sync for WriteStyle","synthetic":true,"types":[]},{"text":"impl Sync for Filter","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Timestamp","synthetic":true,"types":[]},{"text":"impl !Sync for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Formatter","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for TimestampPrecision","synthetic":true,"types":[]}];
implementors["erased_serde"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T&gt; Sync for Angle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Box2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for HomogeneousVector&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Unit&gt; Sync for Length&lt;T, Unit&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Unit: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for NonEmpty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Point2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Point3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for Scale&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for Transform2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for Transform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BoolVector2D","synthetic":true,"types":[]},{"text":"impl Sync for BoolVector3D","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Vector2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Vector3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Box3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Rect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for RigidTransform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for Rotation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for Rotation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for SideOffsets2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Size2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for Size3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for Translation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Sync for Translation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UnknownUnit","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl Sync for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SyncFailure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fern"] = [{"text":"impl !Sync for Dispatch","synthetic":true,"types":[]},{"text":"impl !Sync for Output","synthetic":true,"types":[]},{"text":"impl Sync for Panic","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for FormatCallback&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for InitError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WithFgColor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ColoredLevelConfig","synthetic":true,"types":[]}];
implementors["float_ord"] = [{"text":"impl&lt;T&gt; Sync for FloatOrd&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fluent_bundle"] = [{"text":"impl&lt;'m&gt; Sync for FluentMessage&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FluentResource","synthetic":true,"types":[]},{"text":"impl Sync for FluentError","synthetic":true,"types":[]},{"text":"impl&lt;'bundle, R, M&gt; !Sync for Scope&lt;'bundle, R, M&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ResolverError","synthetic":true,"types":[]},{"text":"impl Sync for FluentNumberOptions","synthetic":true,"types":[]},{"text":"impl Sync for FluentNumber","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; Sync for DisplayableNode&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FluentNumberStyle","synthetic":true,"types":[]},{"text":"impl Sync for FluentNumberCurrencyDisplayStyle","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; Sync for DisplayableNodeType&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; !Sync for FluentValue&lt;'source&gt;","synthetic":true,"types":[]}];
implementors["fluent_langneg"] = [{"text":"impl Sync for NegotiationStrategy","synthetic":true,"types":[]}];
implementors["fluent_syntax"] = [{"text":"impl&lt;'ast&gt; Sync for Resource&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Message&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Term&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Pattern&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Attribute&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Identifier&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Variant&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for CallArguments&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for NamedArgument&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for ResourceEntry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Entry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for PatternElement&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for VariantKey&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Comment&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for InlineExpression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Sync for Expression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ParserError","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]}];
implementors["fmod_sys"] = [{"text":"impl Sync for FMOD_SYSTEM","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SOUND","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_CHANNELCONTROL","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_CHANNEL","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_CHANNELGROUP","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SOUNDGROUP","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_REVERB3D","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSPCONNECTION","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_POLYGON","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_GEOMETRY","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SYNCPOINT","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_ASYNCREADINFO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_VECTOR","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_3D_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_GUID","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_PLUGINLIST","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_TAG","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_CREATESOUNDEXINFO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_REVERB_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_ERRORCALLBACK_INFO","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_CODEC_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_CODEC_WAVEFORMAT","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_CODEC_STATE","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_BUFFER_ARRAY","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_COMPLEX","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_FLOAT_MAPPING","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_DESC_FLOAT","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_DESC_INT","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_DESC_BOOL","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_DESC_DATA","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_DESC","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_OVERALLGAIN","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_3DATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_SIDECHAIN","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_FFT","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_STATE_DFT_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_STATE_PAN_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_STATE_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_STATE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_METERING_INFO","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_OUTPUT_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_OUTPUT_STATE","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_OUTPUT_OBJECT3DINFO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_SYSTEM","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_EVENTDESCRIPTION","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_EVENTINSTANCE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_BUS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_VCA","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_BANK","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_COMMANDREPLAY","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_BANK_INFO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_PARAMETER_ID","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_PARAMETER_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_USER_PROPERTY","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_CPU_USAGE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_BUFFER_INFO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_BUFFER_USAGE","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_SOUND_INFO","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_COMMAND_INFO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_MEMORY_USAGE","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_DSP_PARAMETER_DESC__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Sync for FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_RESULT","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_CHANNELCONTROL_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_OUTPUTTYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DEBUG_MODE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SPEAKER","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_CHANNELORDER","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_PLUGINTYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SOUND_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SOUND_FORMAT","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_OPENSTATE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_SOUNDGROUP_BEHAVIOR","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_CHANNELCONTROL_CALLBACK_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_CHANNELCONTROL_DSP_INDEX","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_ERRORCALLBACK_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_RESAMPLER","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSPCONNECTION_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_TAGTYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_TAGDATATYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_OSCILLATOR","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_LOWPASS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_ITLOWPASS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_HIGHPASS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_ECHO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_FADER","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_FLANGE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_DISTORTION","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_NORMALIZE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_LIMITER","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMEQ","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_MULTIBAND_EQ","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PITCHSHIFT","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_CHORUS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_ITECHO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_COMPRESSOR","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_SFXREVERB","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_LOWPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_DELAY","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_TREMOLO","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_SEND","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_RETURN","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_HIGHPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PAN_2D_STEREO_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PAN_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PAN_3D_ROLLOFF_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PAN","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_THREE_EQ","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_FFT_WINDOW","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_FFT","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_ENVELOPEFOLLOWER","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_CONVOLUTION_REVERB","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_CHANNELMIX_OUTPUT","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_CHANNELMIX","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_TRANSCEIVER_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_TRANSCEIVER","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_OBJECTPAN","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PROCESS_OPERATION","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PAN_SURROUND_FLAGS","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_DSP_PARAMETER_DATA_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_LOADING_STATE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_LOAD_MEMORY_MODE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_USER_PROPERTY_TYPE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_EVENT_PROPERTY","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_PLAYBACK_STATE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_STOP_MODE","synthetic":true,"types":[]},{"text":"impl Sync for FMOD_STUDIO_INSTANCETYPE","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Sync for FnvHasher","synthetic":true,"types":[]}];
implementors["font_kit"] = [{"text":"impl Sync for Canvas","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for RasterizationOptions","synthetic":true,"types":[]},{"text":"impl Sync for FontLoadingError","synthetic":true,"types":[]},{"text":"impl Sync for GlyphLoadingError","synthetic":true,"types":[]},{"text":"impl Sync for SelectionError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Family&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FamilyHandle","synthetic":true,"types":[]},{"text":"impl Sync for FamilyName","synthetic":true,"types":[]},{"text":"impl Sync for FileType","synthetic":true,"types":[]},{"text":"impl Sync for Handle","synthetic":true,"types":[]},{"text":"impl Sync for HintingOptions","synthetic":true,"types":[]},{"text":"impl Sync for FontTransform","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; Sync for FallbackResult&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; Sync for FallbackFont&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for Font","synthetic":true,"types":[]},{"text":"impl Sync for Metrics","synthetic":true,"types":[]},{"text":"impl Sync for Properties","synthetic":true,"types":[]},{"text":"impl Sync for Weight","synthetic":true,"types":[]},{"text":"impl Sync for Stretch","synthetic":true,"types":[]},{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl !Sync for FontconfigSource","synthetic":true,"types":[]},{"text":"impl Sync for FsSource","synthetic":true,"types":[]},{"text":"impl Sync for MemSource","synthetic":true,"types":[]},{"text":"impl !Sync for MultiSource","synthetic":true,"types":[]}];
implementors["fontconfig"] = [{"text":"impl Sync for struct__FcMatrix","synthetic":true,"types":[]},{"text":"impl !Sync for struct__FcObjectType","synthetic":true,"types":[]},{"text":"impl !Sync for struct__FcConstant","synthetic":true,"types":[]},{"text":"impl Sync for struct__FcValue","synthetic":true,"types":[]},{"text":"impl !Sync for struct__FcFontSet","synthetic":true,"types":[]},{"text":"impl !Sync for struct__FcObjectSet","synthetic":true,"types":[]}];
implementors["freetype"] = [{"text":"impl&lt;T&gt; Sync for __BindgenUnionField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for FT_MemoryRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_StreamRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_StreamDesc_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Vector_","synthetic":true,"types":[]},{"text":"impl Sync for FT_BBox_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Bitmap_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Outline_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Outline_Funcs_","synthetic":true,"types":[]},{"text":"impl Sync for FT_RasterRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Span_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Raster_Params_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Raster_Funcs_","synthetic":true,"types":[]},{"text":"impl Sync for FT_UnitVector_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Matrix_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Data_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Generic_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_ListNodeRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_ListRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Glyph_Metrics_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Bitmap_Size_","synthetic":true,"types":[]},{"text":"impl Sync for FT_LibraryRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_ModuleRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_DriverRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_RendererRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_FaceRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_SizeRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_GlyphSlotRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_CharMapRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Face_InternalRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Size_InternalRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Size_Metrics_","synthetic":true,"types":[]},{"text":"impl Sync for FT_SubGlyphRec_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Slot_InternalRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Parameter_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Open_Args_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Size_RequestRec_","synthetic":true,"types":[]},{"text":"impl !Sync for FT_Module_Class_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Pixel_Mode_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Glyph_Format_","synthetic":true,"types":[]},{"text":"impl Sync for _bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Sync for _bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl Sync for FT_Encoding_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Size_Request_Type_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Render_Mode_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Kerning_Mode_","synthetic":true,"types":[]},{"text":"impl Sync for FT_LcdFilter_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Sfnt_Tag_","synthetic":true,"types":[]},{"text":"impl Sync for FT_TrueTypeEngineType_","synthetic":true,"types":[]},{"text":"impl Sync for FT_Orientation_","synthetic":true,"types":[]},{"text":"impl Sync for TT_OS2","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl Sync for FxHasher","synthetic":true,"types":[]},{"text":"impl Sync for FxHasher64","synthetic":true,"types":[]},{"text":"impl Sync for FxHasher32","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Sync for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Sync, N:&nbsp;ArrayLength&lt;T&gt;&gt; Sync for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["genmesh"] = [{"text":"impl&lt;T&gt; Sync for Line&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Quad&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Triangle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; Sync for VerticesIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; Sync for TriangulateIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Sync for LruIndexer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Neighbors&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Vertex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Polygon&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, V&gt; Sync for SharedVertexIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, V&gt; Sync for IndexedPolygonIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Circle","synthetic":true,"types":[]},{"text":"impl Sync for Cone","synthetic":true,"types":[]},{"text":"impl Sync for Cube","synthetic":true,"types":[]},{"text":"impl Sync for Cylinder","synthetic":true,"types":[]},{"text":"impl Sync for IcoSphere","synthetic":true,"types":[]},{"text":"impl Sync for Plane","synthetic":true,"types":[]},{"text":"impl Sync for SphereUv","synthetic":true,"types":[]},{"text":"impl Sync for Torus","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["gfx_backend_empty"] = [{"text":"impl Sync for PhysicalDevice","synthetic":true,"types":[]},{"text":"impl Sync for RawCommandQueue","synthetic":true,"types":[]},{"text":"impl Sync for Device","synthetic":true,"types":[]},{"text":"impl Sync for QueueFamily","synthetic":true,"types":[]},{"text":"impl Sync for RawCommandPool","synthetic":true,"types":[]},{"text":"impl Sync for RawCommandBuffer","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorPool","synthetic":true,"types":[]},{"text":"impl Sync for Surface","synthetic":true,"types":[]},{"text":"impl Sync for Swapchain","synthetic":true,"types":[]},{"text":"impl Sync for Instance","synthetic":true,"types":[]},{"text":"impl Sync for Backend","synthetic":true,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl Sync for Features","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Gpu&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Primitive","synthetic":true,"types":[]},{"text":"impl Sync for IndexType","synthetic":true,"types":[]},{"text":"impl Sync for SubmissionError","synthetic":true,"types":[]},{"text":"impl Sync for MemoryTypeId","synthetic":true,"types":[]},{"text":"impl Sync for MemoryType","synthetic":true,"types":[]},{"text":"impl Sync for MemoryProperties","synthetic":true,"types":[]},{"text":"impl Sync for AdapterInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Adapter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PhysicalDevice: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DeviceType","synthetic":true,"types":[]},{"text":"impl Sync for Usage","synthetic":true,"types":[]},{"text":"impl Sync for Access","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for IndexBufferView&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for ViewCreationError","synthetic":true,"types":[]},{"text":"impl Sync for ClearDepthStencil","synthetic":true,"types":[]},{"text":"impl Sync for ImageResolve","synthetic":true,"types":[]},{"text":"impl Sync for ImageBlit","synthetic":true,"types":[]},{"text":"impl Sync for ClearDepthStencilRaw","synthetic":true,"types":[]},{"text":"impl Sync for CommandBufferFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for CommandBufferInheritanceInfo&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Framebuffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Sync for RenderSubpassCommon&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for RenderPassInlineEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for RenderPassSecondaryEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, S, R&gt; Sync for SubpassCommandBuffer&lt;B, S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BufferCopy","synthetic":true,"types":[]},{"text":"impl Sync for ImageCopy","synthetic":true,"types":[]},{"text":"impl Sync for BufferImageCopy","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; Sync for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ClearColorRaw","synthetic":true,"types":[]},{"text":"impl Sync for ClearValueRaw","synthetic":true,"types":[]},{"text":"impl Sync for ClearColor","synthetic":true,"types":[]},{"text":"impl Sync for ClearValue","synthetic":true,"types":[]},{"text":"impl Sync for AttachmentClear","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for SubpassContents","synthetic":true,"types":[]},{"text":"impl Sync for OneShot","synthetic":true,"types":[]},{"text":"impl Sync for MultiShot","synthetic":true,"types":[]},{"text":"impl Sync for Primary","synthetic":true,"types":[]},{"text":"impl Sync for Secondary","synthetic":true,"types":[]},{"text":"impl Sync for DeviceLost","synthetic":true,"types":[]},{"text":"impl Sync for SurfaceLost","synthetic":true,"types":[]},{"text":"impl Sync for WindowInUse","synthetic":true,"types":[]},{"text":"impl Sync for OutOfMemory","synthetic":true,"types":[]},{"text":"impl Sync for OomOrDeviceLost","synthetic":true,"types":[]},{"text":"impl Sync for AllocationError","synthetic":true,"types":[]},{"text":"impl Sync for BindError","synthetic":true,"types":[]},{"text":"impl Sync for WaitFor","synthetic":true,"types":[]},{"text":"impl Sync for ShaderError","synthetic":true,"types":[]},{"text":"impl Sync for DeviceCreationError","synthetic":true,"types":[]},{"text":"impl Sync for HostExecutionError","synthetic":true,"types":[]},{"text":"impl Sync for Aspects","synthetic":true,"types":[]},{"text":"impl Sync for FormatDesc","synthetic":true,"types":[]},{"text":"impl Sync for FormatBits","synthetic":true,"types":[]},{"text":"impl Sync for Swizzle","synthetic":true,"types":[]},{"text":"impl Sync for Properties","synthetic":true,"types":[]},{"text":"impl Sync for ImageFeature","synthetic":true,"types":[]},{"text":"impl Sync for BufferFeature","synthetic":true,"types":[]},{"text":"impl Sync for BaseFormat","synthetic":true,"types":[]},{"text":"impl Sync for Rg4Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgba4Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bgra4Unorm","synthetic":true,"types":[]},{"text":"impl Sync for R5g6b5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for B5g6r5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for R5g5b5a1Unorm","synthetic":true,"types":[]},{"text":"impl Sync for B5g5r5a1Unorm","synthetic":true,"types":[]},{"text":"impl Sync for A1r5g5b5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for R8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for R8Snorm","synthetic":true,"types":[]},{"text":"impl Sync for R8Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for R8Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for R8Uint","synthetic":true,"types":[]},{"text":"impl Sync for R8Sint","synthetic":true,"types":[]},{"text":"impl Sync for R8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Rg8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Rg8Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Rg8Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rg8Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rg8Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rg8Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rg8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Rgb8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgb8Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgb8Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgb8Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgb8Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb8Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Bgr8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bgr8Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Bgr8Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Bgr8Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Bgr8Uint","synthetic":true,"types":[]},{"text":"impl Sync for Bgr8Sint","synthetic":true,"types":[]},{"text":"impl Sync for Bgr8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Rgba8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgba8Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgba8Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgba8Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgba8Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba8Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Bgra8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bgra8Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Bgra8Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Bgra8Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Bgra8Uint","synthetic":true,"types":[]},{"text":"impl Sync for Bgra8Sint","synthetic":true,"types":[]},{"text":"impl Sync for Bgra8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Abgr8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Abgr8Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Abgr8Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Abgr8Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Abgr8Uint","synthetic":true,"types":[]},{"text":"impl Sync for Abgr8Sint","synthetic":true,"types":[]},{"text":"impl Sync for Abgr8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for A2r10g10b10Unorm","synthetic":true,"types":[]},{"text":"impl Sync for A2r10g10b10Snorm","synthetic":true,"types":[]},{"text":"impl Sync for A2r10g10b10Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for A2r10g10b10Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for A2r10g10b10Uint","synthetic":true,"types":[]},{"text":"impl Sync for A2r10g10b10Sint","synthetic":true,"types":[]},{"text":"impl Sync for A2b10g10r10Unorm","synthetic":true,"types":[]},{"text":"impl Sync for A2b10g10r10Snorm","synthetic":true,"types":[]},{"text":"impl Sync for A2b10g10r10Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for A2b10g10r10Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for A2b10g10r10Uint","synthetic":true,"types":[]},{"text":"impl Sync for A2b10g10r10Sint","synthetic":true,"types":[]},{"text":"impl Sync for R16Unorm","synthetic":true,"types":[]},{"text":"impl Sync for R16Snorm","synthetic":true,"types":[]},{"text":"impl Sync for R16Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for R16Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for R16Uint","synthetic":true,"types":[]},{"text":"impl Sync for R16Sint","synthetic":true,"types":[]},{"text":"impl Sync for R16Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rg16Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Rg16Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Rg16Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rg16Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rg16Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rg16Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rg16Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rgb16Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgb16Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgb16Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgb16Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgb16Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb16Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb16Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rgba16Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgba16Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Rgba16Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgba16Sscaled","synthetic":true,"types":[]},{"text":"impl Sync for Rgba16Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba16Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba16Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for R32Uint","synthetic":true,"types":[]},{"text":"impl Sync for R32Sint","synthetic":true,"types":[]},{"text":"impl Sync for R32Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rg32Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rg32Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rg32Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rgb32Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb32Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb32Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rgba32Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba32Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba32Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for R64Uint","synthetic":true,"types":[]},{"text":"impl Sync for R64Sint","synthetic":true,"types":[]},{"text":"impl Sync for R64Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rg64Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rg64Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rg64Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rgb64Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb64Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgb64Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for Rgba64Uint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba64Sint","synthetic":true,"types":[]},{"text":"impl Sync for Rgba64Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for B10g11r11Ufloat","synthetic":true,"types":[]},{"text":"impl Sync for E5b9g9r9Ufloat","synthetic":true,"types":[]},{"text":"impl Sync for D16Unorm","synthetic":true,"types":[]},{"text":"impl Sync for X8D24Unorm","synthetic":true,"types":[]},{"text":"impl Sync for D32Sfloat","synthetic":true,"types":[]},{"text":"impl Sync for S8Uint","synthetic":true,"types":[]},{"text":"impl Sync for D16UnormS8Uint","synthetic":true,"types":[]},{"text":"impl Sync for D24UnormS8Uint","synthetic":true,"types":[]},{"text":"impl Sync for D32SfloatS8Uint","synthetic":true,"types":[]},{"text":"impl Sync for Bc1RgbUnorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc1RgbSrgb","synthetic":true,"types":[]},{"text":"impl Sync for Bc1RgbaUnorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc1RgbaSrgb","synthetic":true,"types":[]},{"text":"impl Sync for Bc2Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc2Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Bc3Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc3Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Bc4Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc4Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc5Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc6hUfloat","synthetic":true,"types":[]},{"text":"impl Sync for Bc6hSfloat","synthetic":true,"types":[]},{"text":"impl Sync for Bc7Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Bc7Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Etc2R8g8b8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Etc2R8g8b8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Etc2R8g8b8a1Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Etc2R8g8b8a1Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Etc2R8g8b8a8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Etc2R8g8b8a8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for EacR11Unorm","synthetic":true,"types":[]},{"text":"impl Sync for EacR11Snorm","synthetic":true,"types":[]},{"text":"impl Sync for EacR11g11Unorm","synthetic":true,"types":[]},{"text":"impl Sync for EacR11g11Snorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc4x4Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc4x4Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc5x4Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc5x4Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc5x5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc5x5Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc6x5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc6x5Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc6x6Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc6x6Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc8x5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc8x5Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc8x6Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc8x6Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc8x8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc8x8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x5Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x5Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x6Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x6Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x8Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x8Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x10Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc10x10Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc12x10Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc12x10Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Astc12x12Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Astc12x12Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Component","synthetic":true,"types":[]},{"text":"impl Sync for ChannelType","synthetic":true,"types":[]},{"text":"impl Sync for SurfaceType","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for Extent","synthetic":true,"types":[]},{"text":"impl Sync for Offset","synthetic":true,"types":[]},{"text":"impl Sync for ViewCapabilities","synthetic":true,"types":[]},{"text":"impl Sync for Usage","synthetic":true,"types":[]},{"text":"impl Sync for Lod","synthetic":true,"types":[]},{"text":"impl Sync for PackedColor","synthetic":true,"types":[]},{"text":"impl Sync for SamplerInfo","synthetic":true,"types":[]},{"text":"impl Sync for Access","synthetic":true,"types":[]},{"text":"impl Sync for Subresource","synthetic":true,"types":[]},{"text":"impl Sync for SubresourceLayers","synthetic":true,"types":[]},{"text":"impl Sync for SubresourceRange","synthetic":true,"types":[]},{"text":"impl Sync for FormatProperties","synthetic":true,"types":[]},{"text":"impl Sync for SubresourceFootprint","synthetic":true,"types":[]},{"text":"impl Sync for Tiling","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for ViewError","synthetic":true,"types":[]},{"text":"impl Sync for LayerError","synthetic":true,"types":[]},{"text":"impl Sync for Filter","synthetic":true,"types":[]},{"text":"impl Sync for Anisotropic","synthetic":true,"types":[]},{"text":"impl Sync for CubeFace","synthetic":true,"types":[]},{"text":"impl Sync for Kind","synthetic":true,"types":[]},{"text":"impl Sync for ViewKind","synthetic":true,"types":[]},{"text":"impl Sync for WrapMode","synthetic":true,"types":[]},{"text":"impl Sync for Layout","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; Sync for Reader&lt;'a, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; Sync for Writer&lt;'a, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Properties","synthetic":true,"types":[]},{"text":"impl Sync for Dependencies","synthetic":true,"types":[]},{"text":"impl Sync for Requirements","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for Barrier&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AttachmentOps","synthetic":true,"types":[]},{"text":"impl Sync for Attachment","synthetic":true,"types":[]},{"text":"impl Sync for SubpassDependency","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SubpassDesc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for Subpass&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AttachmentLoadOp","synthetic":true,"types":[]},{"text":"impl Sync for AttachmentStoreOp","synthetic":true,"types":[]},{"text":"impl Sync for SubpassRef","synthetic":true,"types":[]},{"text":"impl Sync for CommandPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Sync for CommandPool&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for ComputePipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ComputePipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorSetLayoutBinding","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorRangeDesc","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, WI&gt; Sync for DescriptorSetWrite&lt;'a, B, WI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;WI: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for DescriptorSetCopy&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for ClearRect","synthetic":true,"types":[]},{"text":"impl Sync for Viewport","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for GraphicsShaderSet&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BakedStates","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for GraphicsPipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DepthBias","synthetic":true,"types":[]},{"text":"impl Sync for Rasterizer","synthetic":true,"types":[]},{"text":"impl Sync for BlendDesc","synthetic":true,"types":[]},{"text":"impl Sync for Multisampling","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Element&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for VertexBufferDesc","synthetic":true,"types":[]},{"text":"impl Sync for AttributeDesc","synthetic":true,"types":[]},{"text":"impl Sync for InputAssemblerDesc","synthetic":true,"types":[]},{"text":"impl Sync for ColorMask","synthetic":true,"types":[]},{"text":"impl Sync for BlendState","synthetic":true,"types":[]},{"text":"impl Sync for ColorBlendDesc","synthetic":true,"types":[]},{"text":"impl Sync for DepthTest","synthetic":true,"types":[]},{"text":"impl Sync for StencilFace","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sided&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StencilTest","synthetic":true,"types":[]},{"text":"impl Sync for DepthStencilDesc","synthetic":true,"types":[]},{"text":"impl Sync for Face","synthetic":true,"types":[]},{"text":"impl Sync for PipelineStage","synthetic":true,"types":[]},{"text":"impl Sync for ShaderStageFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for EntryPoint&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PipelineCreationFlags","synthetic":true,"types":[]},{"text":"impl Sync for SpecializationConstant","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Specialization&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorType","synthetic":true,"types":[]},{"text":"impl Sync for AllocationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for Descriptor&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::BufferView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PolygonMode","synthetic":true,"types":[]},{"text":"impl Sync for FrontFace","synthetic":true,"types":[]},{"text":"impl Sync for LogicOp","synthetic":true,"types":[]},{"text":"impl Sync for VertexInputRate","synthetic":true,"types":[]},{"text":"impl Sync for PrimitiveRestart","synthetic":true,"types":[]},{"text":"impl Sync for Comparison","synthetic":true,"types":[]},{"text":"impl Sync for Factor","synthetic":true,"types":[]},{"text":"impl Sync for BlendOp","synthetic":true,"types":[]},{"text":"impl Sync for StencilOp","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for Stage","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for BasePipeline&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for State&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for Query&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueryPool: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlags","synthetic":true,"types":[]},{"text":"impl Sync for ResultFlags","synthetic":true,"types":[]},{"text":"impl Sync for PipelineStatistic","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl&lt;Ic, Iw, Is&gt; Sync for Submission&lt;Ic, Iw, Is&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ic: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Is: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Iw: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Sync for CommandQueue&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for QueueType","synthetic":true,"types":[]},{"text":"impl Sync for General","synthetic":true,"types":[]},{"text":"impl Sync for Graphics","synthetic":true,"types":[]},{"text":"impl Sync for Compute","synthetic":true,"types":[]},{"text":"impl Sync for Transfer","synthetic":true,"types":[]},{"text":"impl Sync for GraphicsOrCompute","synthetic":true,"types":[]},{"text":"impl Sync for QueueFamilyId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Sync for QueueGroup&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Queues&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Extent2D","synthetic":true,"types":[]},{"text":"impl Sync for SurfaceCapabilities","synthetic":true,"types":[]},{"text":"impl Sync for CompositeAlpha","synthetic":true,"types":[]},{"text":"impl Sync for SwapchainConfig","synthetic":true,"types":[]},{"text":"impl Sync for Suboptimal","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for PresentMode","synthetic":true,"types":[]},{"text":"impl Sync for AcquireError","synthetic":true,"types":[]},{"text":"impl Sync for PresentError","synthetic":true,"types":[]},{"text":"impl Sync for InitError","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl&lt;'a&gt; Sync for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Sync for MemoryLimit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Block","synthetic":true,"types":[]},{"text":"impl Sync for Extension","synthetic":true,"types":[]},{"text":"impl Sync for DisposalMethod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for ColorOutput","synthetic":true,"types":[]},{"text":"impl Sync for Extensions","synthetic":true,"types":[]},{"text":"impl Sync for ExtensionData","synthetic":true,"types":[]},{"text":"impl Sync for Repeat","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl Sync for Encoding","synthetic":true,"types":[]},{"text":"impl Sync for LineEncoding","synthetic":true,"types":[]},{"text":"impl Sync for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugMacroOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Arm","synthetic":true,"types":[]},{"text":"impl Sync for X86","synthetic":true,"types":[]},{"text":"impl Sync for X86_64","synthetic":true,"types":[]},{"text":"impl Sync for BigEndian","synthetic":true,"types":[]},{"text":"impl Sync for LittleEndian","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SectionId","synthetic":true,"types":[]},{"text":"impl Sync for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl Sync for DwUt","synthetic":true,"types":[]},{"text":"impl Sync for DwCfa","synthetic":true,"types":[]},{"text":"impl Sync for DwChildren","synthetic":true,"types":[]},{"text":"impl Sync for DwTag","synthetic":true,"types":[]},{"text":"impl Sync for DwAt","synthetic":true,"types":[]},{"text":"impl Sync for DwForm","synthetic":true,"types":[]},{"text":"impl Sync for DwAte","synthetic":true,"types":[]},{"text":"impl Sync for DwLle","synthetic":true,"types":[]},{"text":"impl Sync for DwDs","synthetic":true,"types":[]},{"text":"impl Sync for DwEnd","synthetic":true,"types":[]},{"text":"impl Sync for DwAccess","synthetic":true,"types":[]},{"text":"impl Sync for DwVis","synthetic":true,"types":[]},{"text":"impl Sync for DwVirtuality","synthetic":true,"types":[]},{"text":"impl Sync for DwLang","synthetic":true,"types":[]},{"text":"impl Sync for DwAddr","synthetic":true,"types":[]},{"text":"impl Sync for DwId","synthetic":true,"types":[]},{"text":"impl Sync for DwCc","synthetic":true,"types":[]},{"text":"impl Sync for DwInl","synthetic":true,"types":[]},{"text":"impl Sync for DwOrd","synthetic":true,"types":[]},{"text":"impl Sync for DwDsc","synthetic":true,"types":[]},{"text":"impl Sync for DwIdx","synthetic":true,"types":[]},{"text":"impl Sync for DwDefaulted","synthetic":true,"types":[]},{"text":"impl Sync for DwLns","synthetic":true,"types":[]},{"text":"impl Sync for DwLne","synthetic":true,"types":[]},{"text":"impl Sync for DwLnct","synthetic":true,"types":[]},{"text":"impl Sync for DwMacro","synthetic":true,"types":[]},{"text":"impl Sync for DwRle","synthetic":true,"types":[]},{"text":"impl Sync for DwOp","synthetic":true,"types":[]},{"text":"impl Sync for DwEhPe","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for EhHdrTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BaseAddresses","synthetic":true,"types":[]},{"text":"impl Sync for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Sync for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Sync for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for UninitializedUnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; Sync for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; Sync for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Abbreviations","synthetic":true,"types":[]},{"text":"impl Sync for Abbreviation","synthetic":true,"types":[]},{"text":"impl Sync for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; Sync for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LineRow","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for OperationIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&nbsp;=&nbsp;&lt;R as Reader&gt;::Offset&gt; !Sync for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; !Sync for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Sync for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Sync for EntriesCursor&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; !Sync for EntriesTree&lt;'abbrev, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; !Sync for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; !Sync for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Sync for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Sync for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ValueType","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["glsl_layout"] = [{"text":"impl&lt;T&gt; Sync for Element&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AsStd140&gt;::Align: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for bmat2x2","synthetic":true,"types":[]},{"text":"impl Sync for bmat2x3","synthetic":true,"types":[]},{"text":"impl Sync for bmat2x4","synthetic":true,"types":[]},{"text":"impl Sync for bmat3x2","synthetic":true,"types":[]},{"text":"impl Sync for bmat3x3","synthetic":true,"types":[]},{"text":"impl Sync for bmat3x4","synthetic":true,"types":[]},{"text":"impl Sync for bmat4x2","synthetic":true,"types":[]},{"text":"impl Sync for bmat4x3","synthetic":true,"types":[]},{"text":"impl Sync for bmat4x4","synthetic":true,"types":[]},{"text":"impl Sync for imat2x2","synthetic":true,"types":[]},{"text":"impl Sync for imat2x3","synthetic":true,"types":[]},{"text":"impl Sync for imat2x4","synthetic":true,"types":[]},{"text":"impl Sync for imat3x2","synthetic":true,"types":[]},{"text":"impl Sync for imat3x3","synthetic":true,"types":[]},{"text":"impl Sync for imat3x4","synthetic":true,"types":[]},{"text":"impl Sync for imat4x2","synthetic":true,"types":[]},{"text":"impl Sync for imat4x3","synthetic":true,"types":[]},{"text":"impl Sync for imat4x4","synthetic":true,"types":[]},{"text":"impl Sync for umat2x2","synthetic":true,"types":[]},{"text":"impl Sync for umat2x3","synthetic":true,"types":[]},{"text":"impl Sync for umat2x4","synthetic":true,"types":[]},{"text":"impl Sync for umat3x2","synthetic":true,"types":[]},{"text":"impl Sync for umat3x3","synthetic":true,"types":[]},{"text":"impl Sync for umat3x4","synthetic":true,"types":[]},{"text":"impl Sync for umat4x2","synthetic":true,"types":[]},{"text":"impl Sync for umat4x3","synthetic":true,"types":[]},{"text":"impl Sync for umat4x4","synthetic":true,"types":[]},{"text":"impl Sync for mat2x2","synthetic":true,"types":[]},{"text":"impl Sync for mat2x3","synthetic":true,"types":[]},{"text":"impl Sync for mat2x4","synthetic":true,"types":[]},{"text":"impl Sync for mat3x2","synthetic":true,"types":[]},{"text":"impl Sync for mat3x3","synthetic":true,"types":[]},{"text":"impl Sync for mat3x4","synthetic":true,"types":[]},{"text":"impl Sync for mat4x2","synthetic":true,"types":[]},{"text":"impl Sync for mat4x3","synthetic":true,"types":[]},{"text":"impl Sync for mat4x4","synthetic":true,"types":[]},{"text":"impl Sync for dmat2x2","synthetic":true,"types":[]},{"text":"impl Sync for dmat2x3","synthetic":true,"types":[]},{"text":"impl Sync for dmat2x4","synthetic":true,"types":[]},{"text":"impl Sync for dmat3x2","synthetic":true,"types":[]},{"text":"impl Sync for dmat3x3","synthetic":true,"types":[]},{"text":"impl Sync for dmat3x4","synthetic":true,"types":[]},{"text":"impl Sync for dmat4x2","synthetic":true,"types":[]},{"text":"impl Sync for dmat4x3","synthetic":true,"types":[]},{"text":"impl Sync for dmat4x4","synthetic":true,"types":[]},{"text":"impl Sync for boolean","synthetic":true,"types":[]},{"text":"impl Sync for bvec2","synthetic":true,"types":[]},{"text":"impl Sync for bvec3","synthetic":true,"types":[]},{"text":"impl Sync for bvec4","synthetic":true,"types":[]},{"text":"impl Sync for ivec2","synthetic":true,"types":[]},{"text":"impl Sync for ivec3","synthetic":true,"types":[]},{"text":"impl Sync for ivec4","synthetic":true,"types":[]},{"text":"impl Sync for uvec2","synthetic":true,"types":[]},{"text":"impl Sync for uvec3","synthetic":true,"types":[]},{"text":"impl Sync for uvec4","synthetic":true,"types":[]},{"text":"impl Sync for vec2","synthetic":true,"types":[]},{"text":"impl Sync for vec3","synthetic":true,"types":[]},{"text":"impl Sync for vec4","synthetic":true,"types":[]},{"text":"impl Sync for dvec2","synthetic":true,"types":[]},{"text":"impl Sync for dvec3","synthetic":true,"types":[]},{"text":"impl Sync for dvec4","synthetic":true,"types":[]}];
implementors["gltf"] = [{"text":"impl&lt;'a&gt; Sync for Animation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Accessor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Glb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Camera&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Image&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Material&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Mesh&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Primitive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Scene&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Skin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Texture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Gltf","synthetic":true,"types":[]},{"text":"impl Sync for Document","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for SparseIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ItemIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseIndicesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Sparse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IndexType","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Sync for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Channel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Target&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Channels&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Rotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MorphTargetWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadOutputs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for I8","synthetic":true,"types":[]},{"text":"impl Sync for U8","synthetic":true,"types":[]},{"text":"impl Sync for I16","synthetic":true,"types":[]},{"text":"impl Sync for U16","synthetic":true,"types":[]},{"text":"impl Sync for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for I8","synthetic":true,"types":[]},{"text":"impl Sync for U8","synthetic":true,"types":[]},{"text":"impl Sync for I16","synthetic":true,"types":[]},{"text":"impl Sync for U16","synthetic":true,"types":[]},{"text":"impl Sync for F32","synthetic":true,"types":[]},{"text":"impl Sync for Header","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ChunkType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for View&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Orthographic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Perspective&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Projection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Data","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ExtensionsUsed&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ExtensionsRequired&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Accessors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Animations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Buffers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Views&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Cameras&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Images&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Lights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Materials&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Meshes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Scenes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Skins&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Textures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Light&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Kind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PbrMetallicRoughness&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NormalTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OcclusionTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bounds&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MorphTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Sync for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MorphTargets&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Primitives&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Sync for ReadMorphTargets&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadColors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadJoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadTexCoords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ReadWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RgbU8","synthetic":true,"types":[]},{"text":"impl Sync for RgbU16","synthetic":true,"types":[]},{"text":"impl Sync for RgbF32","synthetic":true,"types":[]},{"text":"impl Sync for RgbaU8","synthetic":true,"types":[]},{"text":"impl Sync for RgbaU16","synthetic":true,"types":[]},{"text":"impl Sync for RgbaF32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for U32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for U16","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for U8","synthetic":true,"types":[]},{"text":"impl Sync for U16","synthetic":true,"types":[]},{"text":"impl Sync for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for U8","synthetic":true,"types":[]},{"text":"impl Sync for U16","synthetic":true,"types":[]},{"text":"impl Sync for F32","synthetic":true,"types":[]},{"text":"impl Sync for Transform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Children&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Sync for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Joints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Info&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Sampler&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["gltf_json"] = [{"text":"impl Sync for Accessor","synthetic":true,"types":[]},{"text":"impl Sync for Animation","synthetic":true,"types":[]},{"text":"impl Sync for Asset","synthetic":true,"types":[]},{"text":"impl Sync for Buffer","synthetic":true,"types":[]},{"text":"impl Sync for Camera","synthetic":true,"types":[]},{"text":"impl Sync for Image","synthetic":true,"types":[]},{"text":"impl Sync for Material","synthetic":true,"types":[]},{"text":"impl Sync for Mesh","synthetic":true,"types":[]},{"text":"impl Sync for Node","synthetic":true,"types":[]},{"text":"impl Sync for Scene","synthetic":true,"types":[]},{"text":"impl Sync for Skin","synthetic":true,"types":[]},{"text":"impl Sync for Texture","synthetic":true,"types":[]},{"text":"impl Sync for Path","synthetic":true,"types":[]},{"text":"impl Sync for Root","synthetic":true,"types":[]},{"text":"impl Sync for IndexComponentType","synthetic":true,"types":[]},{"text":"impl Sync for GenericComponentType","synthetic":true,"types":[]},{"text":"impl Sync for ComponentType","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Indices","synthetic":true,"types":[]},{"text":"impl Sync for Sparse","synthetic":true,"types":[]},{"text":"impl Sync for Values","synthetic":true,"types":[]},{"text":"impl Sync for Channel","synthetic":true,"types":[]},{"text":"impl Sync for Target","synthetic":true,"types":[]},{"text":"impl Sync for Sampler","synthetic":true,"types":[]},{"text":"impl Sync for Interpolation","synthetic":true,"types":[]},{"text":"impl Sync for Property","synthetic":true,"types":[]},{"text":"impl Sync for View","synthetic":true,"types":[]},{"text":"impl Sync for Target","synthetic":true,"types":[]},{"text":"impl Sync for Orthographic","synthetic":true,"types":[]},{"text":"impl Sync for Perspective","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Accessor","synthetic":true,"types":[]},{"text":"impl Sync for Indices","synthetic":true,"types":[]},{"text":"impl Sync for Sparse","synthetic":true,"types":[]},{"text":"impl Sync for Values","synthetic":true,"types":[]},{"text":"impl Sync for Animation","synthetic":true,"types":[]},{"text":"impl Sync for Channel","synthetic":true,"types":[]},{"text":"impl Sync for Target","synthetic":true,"types":[]},{"text":"impl Sync for Sampler","synthetic":true,"types":[]},{"text":"impl Sync for Asset","synthetic":true,"types":[]},{"text":"impl Sync for Buffer","synthetic":true,"types":[]},{"text":"impl Sync for View","synthetic":true,"types":[]},{"text":"impl Sync for Camera","synthetic":true,"types":[]},{"text":"impl Sync for Orthographic","synthetic":true,"types":[]},{"text":"impl Sync for Perspective","synthetic":true,"types":[]},{"text":"impl Sync for Image","synthetic":true,"types":[]},{"text":"impl Sync for Material","synthetic":true,"types":[]},{"text":"impl Sync for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Sync for NormalTexture","synthetic":true,"types":[]},{"text":"impl Sync for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl Sync for Mesh","synthetic":true,"types":[]},{"text":"impl Sync for Primitive","synthetic":true,"types":[]},{"text":"impl Sync for Root","synthetic":true,"types":[]},{"text":"impl Sync for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl Sync for Node","synthetic":true,"types":[]},{"text":"impl Sync for Scene","synthetic":true,"types":[]},{"text":"impl Sync for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl Sync for Light","synthetic":true,"types":[]},{"text":"impl Sync for Spot","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Skin","synthetic":true,"types":[]},{"text":"impl Sync for Sampler","synthetic":true,"types":[]},{"text":"impl Sync for Texture","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for Void","synthetic":true,"types":[]},{"text":"impl Sync for MimeType","synthetic":true,"types":[]},{"text":"impl Sync for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Sync for NormalTexture","synthetic":true,"types":[]},{"text":"impl Sync for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl Sync for AlphaCutoff","synthetic":true,"types":[]},{"text":"impl Sync for EmissiveFactor","synthetic":true,"types":[]},{"text":"impl Sync for PbrBaseColorFactor","synthetic":true,"types":[]},{"text":"impl Sync for StrengthFactor","synthetic":true,"types":[]},{"text":"impl Sync for AlphaMode","synthetic":true,"types":[]},{"text":"impl Sync for Primitive","synthetic":true,"types":[]},{"text":"impl Sync for MorphTarget","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for Semantic","synthetic":true,"types":[]},{"text":"impl Sync for UnitQuaternion","synthetic":true,"types":[]},{"text":"impl Sync for Sampler","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for MagFilter","synthetic":true,"types":[]},{"text":"impl Sync for MinFilter","synthetic":true,"types":[]},{"text":"impl Sync for WrappingMode","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Checked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Index&lt;T&gt;","synthetic":false,"types":[]}];
implementors["glyph_brush"] = [{"text":"impl&lt;'a, H&gt; Sync for GlyphBrushBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, V, H&gt; Sync for GlyphBrush&lt;'font, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GlyphVertex","synthetic":true,"types":[]},{"text":"impl&lt;'font, H&gt; Sync for GlyphCalculator&lt;'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'brush, 'font, H&gt; Sync for GlyphCalculatorGuard&lt;'brush, 'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Sync for GlyphCalculatorBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for OwnedVariedSection","synthetic":true,"types":[]},{"text":"impl Sync for OwnedSectionText","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VariedSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Section&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for BrushAction&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BrushError","synthetic":true,"types":[]}];
implementors["glyph_brush_layout"] = [{"text":"impl Sync for FontId","synthetic":true,"types":[]},{"text":"impl Sync for SectionGeometry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SectionText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; Sync for Layout&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HorizontalAlign","synthetic":true,"types":[]},{"text":"impl Sync for VerticalAlign","synthetic":true,"types":[]},{"text":"impl Sync for LineBreak","synthetic":true,"types":[]},{"text":"impl Sync for BuiltInLineBreaker","synthetic":true,"types":[]},{"text":"impl Sync for GlyphChange","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Sync for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Sync for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, '_&gt; Sync for RawOccupiedEntryMut&lt;'_, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Sync for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hibitset"] = [{"text":"impl Sync for AtomicBitSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BitIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for DrainBitIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BitParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for BitProducer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BitSetAll","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BitSet","synthetic":true,"types":[]}];
implementors["hound"] = [{"text":"impl&lt;R&gt; Sync for WavReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S&gt; Sync for WavIntoSamples&lt;R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'wr, R, S&gt; Sync for WavSamples&lt;'wr, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'parent, W&gt; Sync for SampleWriter16&lt;'parent, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for WavWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for WavSpec","synthetic":true,"types":[]},{"text":"impl Sync for SampleFormat","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Sync for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Sync for Duration","synthetic":true,"types":[]},{"text":"impl Sync for Timestamp","synthetic":true,"types":[]},{"text":"impl Sync for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; Sync for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Sync for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Sync for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Delay","synthetic":true,"types":[]},{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ColorType","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl Sync for ImageFormat","synthetic":true,"types":[]},{"text":"impl Sync for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Sync for DynamicImage","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedError","synthetic":true,"types":[]},{"text":"impl Sync for EncodingError","synthetic":true,"types":[]},{"text":"impl Sync for ParameterError","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for LimitError","synthetic":true,"types":[]},{"text":"impl Sync for ImageError","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumeratePixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumerateRowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for PixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for RowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for NeuQuant","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]},{"text":"impl Sync for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Sync for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Sync for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Sync for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for JpegEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PixelDensity","synthetic":true,"types":[]},{"text":"impl Sync for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CompressionType","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]}];
implementors["inflate"] = [{"text":"impl&lt;W&gt; Sync for InflateWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateDecoderBuf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for InflateStream","synthetic":true,"types":[]}];
implementors["intl_memoizer"] = [{"text":"impl !Sync for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl !Sync for IntlMemoizer","synthetic":true,"types":[]},{"text":"impl Sync for IntlLangMemoizer","synthetic":true,"types":[]}];
implementors["intl_pluralrules"] = [{"text":"impl Sync for PluralRules","synthetic":true,"types":[]},{"text":"impl Sync for PluralCategory","synthetic":true,"types":[]},{"text":"impl Sync for PluralRuleType","synthetic":true,"types":[]},{"text":"impl Sync for PluralOperands","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Sync for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Sync for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Sync for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Sync for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Sync for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Sync for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Sync for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ImageInfo","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormat","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["laminar"] = [{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for LinkConditioner","synthetic":true,"types":[]},{"text":"impl Sync for Socket","synthetic":true,"types":[]},{"text":"impl Sync for Packet","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for SocketEvent","synthetic":true,"types":[]},{"text":"impl Sync for DeliveryGuarantee","synthetic":true,"types":[]},{"text":"impl Sync for OrderingGuarantee","synthetic":true,"types":[]}];
implementors["lewton"] = [{"text":"impl Sync for VorbisError","synthetic":true,"types":[]},{"text":"impl Sync for IdentHeader","synthetic":true,"types":[]},{"text":"impl Sync for CommentHeader","synthetic":true,"types":[]},{"text":"impl Sync for SetupHeader","synthetic":true,"types":[]},{"text":"impl Sync for HeaderReadError","synthetic":true,"types":[]},{"text":"impl Sync for PreviousWindowRight","synthetic":true,"types":[]},{"text":"impl Sync for AudioReadError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for OggStreamReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for InterleavedSamples&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lexical"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Result&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ErrorCode","synthetic":true,"types":[]},{"text":"impl Sync for RoundingKind","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Sync for group","synthetic":true,"types":[]},{"text":"impl Sync for utimbuf","synthetic":true,"types":[]},{"text":"impl Sync for timeval","synthetic":true,"types":[]},{"text":"impl Sync for timespec","synthetic":true,"types":[]},{"text":"impl Sync for rlimit","synthetic":true,"types":[]},{"text":"impl Sync for rusage","synthetic":true,"types":[]},{"text":"impl Sync for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for hostent","synthetic":true,"types":[]},{"text":"impl !Sync for iovec","synthetic":true,"types":[]},{"text":"impl Sync for pollfd","synthetic":true,"types":[]},{"text":"impl Sync for winsize","synthetic":true,"types":[]},{"text":"impl Sync for linger","synthetic":true,"types":[]},{"text":"impl !Sync for sigval","synthetic":true,"types":[]},{"text":"impl Sync for itimerval","synthetic":true,"types":[]},{"text":"impl Sync for tms","synthetic":true,"types":[]},{"text":"impl !Sync for servent","synthetic":true,"types":[]},{"text":"impl !Sync for protoent","synthetic":true,"types":[]},{"text":"impl Sync for in_addr","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Sync for addrinfo","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Sync for fd_set","synthetic":true,"types":[]},{"text":"impl !Sync for tm","synthetic":true,"types":[]},{"text":"impl Sync for sched_param","synthetic":true,"types":[]},{"text":"impl !Sync for Dl_info","synthetic":true,"types":[]},{"text":"impl !Sync for lconv","synthetic":true,"types":[]},{"text":"impl Sync for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Sync for ifaddrs","synthetic":true,"types":[]},{"text":"impl Sync for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Sync for arpreq","synthetic":true,"types":[]},{"text":"impl Sync for arpreq_old","synthetic":true,"types":[]},{"text":"impl Sync for arphdr","synthetic":true,"types":[]},{"text":"impl !Sync for mmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for epoll_event","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Sync for utsname","synthetic":true,"types":[]},{"text":"impl !Sync for sigevent","synthetic":true,"types":[]},{"text":"impl Sync for rlimit64","synthetic":true,"types":[]},{"text":"impl !Sync for glob_t","synthetic":true,"types":[]},{"text":"impl !Sync for passwd","synthetic":true,"types":[]},{"text":"impl !Sync for spwd","synthetic":true,"types":[]},{"text":"impl Sync for dqblk","synthetic":true,"types":[]},{"text":"impl Sync for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Sync for itimerspec","synthetic":true,"types":[]},{"text":"impl Sync for fsid_t","synthetic":true,"types":[]},{"text":"impl Sync for packet_mreq","synthetic":true,"types":[]},{"text":"impl Sync for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Sync for if_nameindex","synthetic":true,"types":[]},{"text":"impl Sync for msginfo","synthetic":true,"types":[]},{"text":"impl Sync for sembuf","synthetic":true,"types":[]},{"text":"impl Sync for input_event","synthetic":true,"types":[]},{"text":"impl Sync for input_id","synthetic":true,"types":[]},{"text":"impl Sync for input_absinfo","synthetic":true,"types":[]},{"text":"impl Sync for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Sync for input_mask","synthetic":true,"types":[]},{"text":"impl Sync for ff_replay","synthetic":true,"types":[]},{"text":"impl Sync for ff_trigger","synthetic":true,"types":[]},{"text":"impl Sync for ff_envelope","synthetic":true,"types":[]},{"text":"impl Sync for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Sync for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_effect","synthetic":true,"types":[]},{"text":"impl !Sync for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for ucred","synthetic":true,"types":[]},{"text":"impl !Sync for mntent","synthetic":true,"types":[]},{"text":"impl !Sync for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Sync for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Sync for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for arpd_request","synthetic":true,"types":[]},{"text":"impl Sync for inotify_event","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_response","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Sync for regmatch_t","synthetic":true,"types":[]},{"text":"impl Sync for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Sync for dirent","synthetic":true,"types":[]},{"text":"impl Sync for dirent64","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Sync for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Sync for mq_attr","synthetic":true,"types":[]},{"text":"impl Sync for statx","synthetic":true,"types":[]},{"text":"impl Sync for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Sync for aiocb","synthetic":true,"types":[]},{"text":"impl Sync for __exit_status","synthetic":true,"types":[]},{"text":"impl Sync for __timeval","synthetic":true,"types":[]},{"text":"impl !Sync for glob64_t","synthetic":true,"types":[]},{"text":"impl !Sync for msghdr","synthetic":true,"types":[]},{"text":"impl Sync for cmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for termios","synthetic":true,"types":[]},{"text":"impl Sync for mallinfo","synthetic":true,"types":[]},{"text":"impl Sync for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Sync for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Sync for nlattr","synthetic":true,"types":[]},{"text":"impl !Sync for rtentry","synthetic":true,"types":[]},{"text":"impl Sync for timex","synthetic":true,"types":[]},{"text":"impl Sync for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Sync for regex_t","synthetic":true,"types":[]},{"text":"impl Sync for utmpx","synthetic":true,"types":[]},{"text":"impl Sync for sigset_t","synthetic":true,"types":[]},{"text":"impl Sync for sysinfo","synthetic":true,"types":[]},{"text":"impl Sync for msqid_ds","synthetic":true,"types":[]},{"text":"impl Sync for sigaction","synthetic":true,"types":[]},{"text":"impl Sync for statfs","synthetic":true,"types":[]},{"text":"impl Sync for flock","synthetic":true,"types":[]},{"text":"impl Sync for flock64","synthetic":true,"types":[]},{"text":"impl Sync for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for stack_t","synthetic":true,"types":[]},{"text":"impl Sync for stat","synthetic":true,"types":[]},{"text":"impl Sync for stat64","synthetic":true,"types":[]},{"text":"impl Sync for statfs64","synthetic":true,"types":[]},{"text":"impl Sync for statvfs64","synthetic":true,"types":[]},{"text":"impl Sync for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Sync for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for user","synthetic":true,"types":[]},{"text":"impl !Sync for mcontext_t","synthetic":true,"types":[]},{"text":"impl Sync for ipc_perm","synthetic":true,"types":[]},{"text":"impl Sync for shmid_ds","synthetic":true,"types":[]},{"text":"impl Sync for termios2","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Sync for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for ucontext_t","synthetic":true,"types":[]},{"text":"impl Sync for statvfs","synthetic":true,"types":[]},{"text":"impl Sync for max_align_t","synthetic":true,"types":[]},{"text":"impl Sync for sem_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Sync for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Sync for in6_addr","synthetic":true,"types":[]},{"text":"impl Sync for DIR","synthetic":true,"types":[]},{"text":"impl Sync for FILE","synthetic":true,"types":[]},{"text":"impl Sync for fpos_t","synthetic":true,"types":[]},{"text":"impl Sync for timezone","synthetic":true,"types":[]},{"text":"impl Sync for fpos64_t","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Library","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for Symbol&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Library","synthetic":false,"types":[]},{"text":"impl&lt;'lib, T:&nbsp;Sync&gt; Sync for Symbol&lt;'lib, T&gt;","synthetic":false,"types":[]}];
implementors["line_drawing"] = [{"text":"impl&lt;T&gt; Sync for Bresenham&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Sync for Midpoint&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Sync for XiaolinWu&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WalkGrid&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Supercover&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bresenham3d&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Sync for WalkVoxels&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BresenhamCircle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for VoxelOrigin","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Sync for Steps&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Octant","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Sync for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Sync for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Sync, V:&nbsp;Sync, S:&nbsp;Sync&gt; Sync for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl Sync for GuardSend","synthetic":true,"types":[]},{"text":"impl !Sync for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync, T:&nbsp;?Sized + Send&gt; Sync for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Sync, T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Sync for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Sync for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for LevelFilter","synthetic":true,"types":[]}];
implementors["lyon_geom"] = [{"text":"impl&lt;S&gt; Sync for QuadraticBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for CubicBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Triangle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for LineSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Line&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for LineEquation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Arc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SvgArc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ArcFlags","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Monotonic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for BezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Flattened&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lyon_path"] = [{"text":"impl Sync for Path","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Sync for PathSlice&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Cursor","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Sync for Iter&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PathState","synthetic":true,"types":[]},{"text":"impl Sync for VertexId","synthetic":true,"types":[]},{"text":"impl Sync for SvgEvent","synthetic":true,"types":[]},{"text":"impl Sync for PathEvent","synthetic":true,"types":[]},{"text":"impl Sync for QuadraticEvent","synthetic":true,"types":[]},{"text":"impl Sync for FlattenedEvent","synthetic":true,"types":[]},{"text":"impl Sync for FillRule","synthetic":true,"types":[]},{"text":"impl&lt;SvgIter&gt; Sync for PathEvents&lt;SvgIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SvgIter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for Flattened&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for SvgPathIter&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Transformed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for FromPolyline&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for BezierSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for LineSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; Sync for SvgPathBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; Sync for FlatteningBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DecoderEarlyChange&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for LsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for MsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Bits","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Sync for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Sync for MmapOptions","synthetic":true,"types":[]},{"text":"impl Sync for Mmap","synthetic":true,"types":[]},{"text":"impl Sync for MmapMut","synthetic":true,"types":[]}];
implementors["minimp3"] = [{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["minimp3_sys"] = [{"text":"impl Sync for __fsid_t","synthetic":true,"types":[]},{"text":"impl Sync for mp3dec_frame_info_t","synthetic":true,"types":[]},{"text":"impl Sync for mp3dec_t","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Sync for StreamResult","synthetic":true,"types":[]},{"text":"impl Sync for MZFlush","synthetic":true,"types":[]},{"text":"impl Sync for MZStatus","synthetic":true,"types":[]},{"text":"impl Sync for MZError","synthetic":true,"types":[]},{"text":"impl Sync for DataFormat","synthetic":true,"types":[]},{"text":"impl Sync for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Sync for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Sync for MinReset","synthetic":true,"types":[]},{"text":"impl Sync for ZeroReset","synthetic":true,"types":[]},{"text":"impl Sync for FullReset","synthetic":true,"types":[]},{"text":"impl Sync for InflateState","synthetic":true,"types":[]}];
implementors["mint"] = [{"text":"impl&lt;T&gt; Sync for RowMatrix2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix2x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix2x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix3x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix3x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix4x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix4x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RowMatrix4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix2x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix2x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix3x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix3x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix4x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix4x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ColumnMatrix4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Quaternion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Sync for EulerAngles&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Vector3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Vector4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Point2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Point3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IntraXYZ","synthetic":true,"types":[]},{"text":"impl Sync for IntraZXZ","synthetic":true,"types":[]},{"text":"impl Sync for IntraZYX","synthetic":true,"types":[]},{"text":"impl Sync for ExtraXYZ","synthetic":true,"types":[]},{"text":"impl Sync for ExtraZXZ","synthetic":true,"types":[]},{"text":"impl Sync for ExtraZYX","synthetic":true,"types":[]}];
implementors["minterpolate"] = [{"text":"impl&lt;T&gt; Sync for InterpolationFunction&lt;T&gt;","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R, C, S&gt; Sync for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl Sync for LpNorm","synthetic":true,"types":[]},{"text":"impl Sync for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Sync for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Sync for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl Sync for Dynamic","synthetic":true,"types":[]},{"text":"impl Sync for U1","synthetic":true,"types":[]},{"text":"impl Sync for U0","synthetic":true,"types":[]},{"text":"impl Sync for U2","synthetic":true,"types":[]},{"text":"impl Sync for U3","synthetic":true,"types":[]},{"text":"impl Sync for U4","synthetic":true,"types":[]},{"text":"impl Sync for U5","synthetic":true,"types":[]},{"text":"impl Sync for U6","synthetic":true,"types":[]},{"text":"impl Sync for U7","synthetic":true,"types":[]},{"text":"impl Sync for U8","synthetic":true,"types":[]},{"text":"impl Sync for U9","synthetic":true,"types":[]},{"text":"impl Sync for U10","synthetic":true,"types":[]},{"text":"impl Sync for U11","synthetic":true,"types":[]},{"text":"impl Sync for U12","synthetic":true,"types":[]},{"text":"impl Sync for U13","synthetic":true,"types":[]},{"text":"impl Sync for U14","synthetic":true,"types":[]},{"text":"impl Sync for U15","synthetic":true,"types":[]},{"text":"impl Sync for U16","synthetic":true,"types":[]},{"text":"impl Sync for U17","synthetic":true,"types":[]},{"text":"impl Sync for U18","synthetic":true,"types":[]},{"text":"impl Sync for U19","synthetic":true,"types":[]},{"text":"impl Sync for U20","synthetic":true,"types":[]},{"text":"impl Sync for U21","synthetic":true,"types":[]},{"text":"impl Sync for U22","synthetic":true,"types":[]},{"text":"impl Sync for U23","synthetic":true,"types":[]},{"text":"impl Sync for U24","synthetic":true,"types":[]},{"text":"impl Sync for U25","synthetic":true,"types":[]},{"text":"impl Sync for U26","synthetic":true,"types":[]},{"text":"impl Sync for U27","synthetic":true,"types":[]},{"text":"impl Sync for U28","synthetic":true,"types":[]},{"text":"impl Sync for U29","synthetic":true,"types":[]},{"text":"impl Sync for U30","synthetic":true,"types":[]},{"text":"impl Sync for U31","synthetic":true,"types":[]},{"text":"impl Sync for U32","synthetic":true,"types":[]},{"text":"impl Sync for U33","synthetic":true,"types":[]},{"text":"impl Sync for U34","synthetic":true,"types":[]},{"text":"impl Sync for U35","synthetic":true,"types":[]},{"text":"impl Sync for U36","synthetic":true,"types":[]},{"text":"impl Sync for U37","synthetic":true,"types":[]},{"text":"impl Sync for U38","synthetic":true,"types":[]},{"text":"impl Sync for U39","synthetic":true,"types":[]},{"text":"impl Sync for U40","synthetic":true,"types":[]},{"text":"impl Sync for U41","synthetic":true,"types":[]},{"text":"impl Sync for U42","synthetic":true,"types":[]},{"text":"impl Sync for U43","synthetic":true,"types":[]},{"text":"impl Sync for U44","synthetic":true,"types":[]},{"text":"impl Sync for U45","synthetic":true,"types":[]},{"text":"impl Sync for U46","synthetic":true,"types":[]},{"text":"impl Sync for U47","synthetic":true,"types":[]},{"text":"impl Sync for U48","synthetic":true,"types":[]},{"text":"impl Sync for U49","synthetic":true,"types":[]},{"text":"impl Sync for U50","synthetic":true,"types":[]},{"text":"impl Sync for U51","synthetic":true,"types":[]},{"text":"impl Sync for U52","synthetic":true,"types":[]},{"text":"impl Sync for U53","synthetic":true,"types":[]},{"text":"impl Sync for U54","synthetic":true,"types":[]},{"text":"impl Sync for U55","synthetic":true,"types":[]},{"text":"impl Sync for U56","synthetic":true,"types":[]},{"text":"impl Sync for U57","synthetic":true,"types":[]},{"text":"impl Sync for U58","synthetic":true,"types":[]},{"text":"impl Sync for U59","synthetic":true,"types":[]},{"text":"impl Sync for U60","synthetic":true,"types":[]},{"text":"impl Sync for U61","synthetic":true,"types":[]},{"text":"impl Sync for U62","synthetic":true,"types":[]},{"text":"impl Sync for U63","synthetic":true,"types":[]},{"text":"impl Sync for U64","synthetic":true,"types":[]},{"text":"impl Sync for U65","synthetic":true,"types":[]},{"text":"impl Sync for U66","synthetic":true,"types":[]},{"text":"impl Sync for U67","synthetic":true,"types":[]},{"text":"impl Sync for U68","synthetic":true,"types":[]},{"text":"impl Sync for U69","synthetic":true,"types":[]},{"text":"impl Sync for U70","synthetic":true,"types":[]},{"text":"impl Sync for U71","synthetic":true,"types":[]},{"text":"impl Sync for U72","synthetic":true,"types":[]},{"text":"impl Sync for U73","synthetic":true,"types":[]},{"text":"impl Sync for U74","synthetic":true,"types":[]},{"text":"impl Sync for U75","synthetic":true,"types":[]},{"text":"impl Sync for U76","synthetic":true,"types":[]},{"text":"impl Sync for U77","synthetic":true,"types":[]},{"text":"impl Sync for U78","synthetic":true,"types":[]},{"text":"impl Sync for U79","synthetic":true,"types":[]},{"text":"impl Sync for U80","synthetic":true,"types":[]},{"text":"impl Sync for U81","synthetic":true,"types":[]},{"text":"impl Sync for U82","synthetic":true,"types":[]},{"text":"impl Sync for U83","synthetic":true,"types":[]},{"text":"impl Sync for U84","synthetic":true,"types":[]},{"text":"impl Sync for U85","synthetic":true,"types":[]},{"text":"impl Sync for U86","synthetic":true,"types":[]},{"text":"impl Sync for U87","synthetic":true,"types":[]},{"text":"impl Sync for U88","synthetic":true,"types":[]},{"text":"impl Sync for U89","synthetic":true,"types":[]},{"text":"impl Sync for U90","synthetic":true,"types":[]},{"text":"impl Sync for U91","synthetic":true,"types":[]},{"text":"impl Sync for U92","synthetic":true,"types":[]},{"text":"impl Sync for U93","synthetic":true,"types":[]},{"text":"impl Sync for U94","synthetic":true,"types":[]},{"text":"impl Sync for U95","synthetic":true,"types":[]},{"text":"impl Sync for U96","synthetic":true,"types":[]},{"text":"impl Sync for U97","synthetic":true,"types":[]},{"text":"impl Sync for U98","synthetic":true,"types":[]},{"text":"impl Sync for U99","synthetic":true,"types":[]},{"text":"impl Sync for U100","synthetic":true,"types":[]},{"text":"impl Sync for U101","synthetic":true,"types":[]},{"text":"impl Sync for U102","synthetic":true,"types":[]},{"text":"impl Sync for U103","synthetic":true,"types":[]},{"text":"impl Sync for U104","synthetic":true,"types":[]},{"text":"impl Sync for U105","synthetic":true,"types":[]},{"text":"impl Sync for U106","synthetic":true,"types":[]},{"text":"impl Sync for U107","synthetic":true,"types":[]},{"text":"impl Sync for U108","synthetic":true,"types":[]},{"text":"impl Sync for U109","synthetic":true,"types":[]},{"text":"impl Sync for U110","synthetic":true,"types":[]},{"text":"impl Sync for U111","synthetic":true,"types":[]},{"text":"impl Sync for U112","synthetic":true,"types":[]},{"text":"impl Sync for U113","synthetic":true,"types":[]},{"text":"impl Sync for U114","synthetic":true,"types":[]},{"text":"impl Sync for U115","synthetic":true,"types":[]},{"text":"impl Sync for U116","synthetic":true,"types":[]},{"text":"impl Sync for U117","synthetic":true,"types":[]},{"text":"impl Sync for U118","synthetic":true,"types":[]},{"text":"impl Sync for U119","synthetic":true,"types":[]},{"text":"impl Sync for U120","synthetic":true,"types":[]},{"text":"impl Sync for U121","synthetic":true,"types":[]},{"text":"impl Sync for U122","synthetic":true,"types":[]},{"text":"impl Sync for U123","synthetic":true,"types":[]},{"text":"impl Sync for U124","synthetic":true,"types":[]},{"text":"impl Sync for U125","synthetic":true,"types":[]},{"text":"impl Sync for U126","synthetic":true,"types":[]},{"text":"impl Sync for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for MatrixIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for MatrixIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Sync for RowIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Sync for ColumnIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Sync for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Sync for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !Sync for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; Sync for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TGeneral","synthetic":true,"types":[]},{"text":"impl Sync for TProjective","synthetic":true,"types":[]},{"text":"impl Sync for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Sync for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Sync, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Sync for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Sync, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Sync for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !Sync for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Errno","synthetic":true,"types":[]},{"text":"impl Sync for AtFlags","synthetic":true,"types":[]},{"text":"impl Sync for OFlag","synthetic":true,"types":[]},{"text":"impl Sync for SealFlag","synthetic":true,"types":[]},{"text":"impl Sync for FdFlag","synthetic":true,"types":[]},{"text":"impl Sync for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Sync for FallocateFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FlockArg","synthetic":true,"types":[]},{"text":"impl Sync for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl !Sync for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Sync for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Sync for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Sync for MsFlags","synthetic":true,"types":[]},{"text":"impl Sync for MntFlags","synthetic":true,"types":[]},{"text":"impl Sync for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Sync for FdFlag","synthetic":true,"types":[]},{"text":"impl Sync for MqAttr","synthetic":true,"types":[]},{"text":"impl Sync for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Sync for PollFd","synthetic":true,"types":[]},{"text":"impl Sync for PollFlags","synthetic":true,"types":[]},{"text":"impl Sync for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Sync for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Sync for PtyMaster","synthetic":true,"types":[]},{"text":"impl Sync for CloneFlags","synthetic":true,"types":[]},{"text":"impl Sync for CpuSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Sync for LioOpcode","synthetic":true,"types":[]},{"text":"impl Sync for LioMode","synthetic":true,"types":[]},{"text":"impl Sync for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EpollFlags","synthetic":true,"types":[]},{"text":"impl Sync for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Sync for EpollEvent","synthetic":true,"types":[]},{"text":"impl Sync for EpollOp","synthetic":true,"types":[]},{"text":"impl Sync for EfdFlags","synthetic":true,"types":[]},{"text":"impl Sync for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Sync for ProtFlags","synthetic":true,"types":[]},{"text":"impl Sync for MapFlags","synthetic":true,"types":[]},{"text":"impl Sync for MsFlags","synthetic":true,"types":[]},{"text":"impl Sync for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Sync for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Sync for Dqblk","synthetic":true,"types":[]},{"text":"impl Sync for QuotaType","synthetic":true,"types":[]},{"text":"impl Sync for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Sync for RebootMode","synthetic":true,"types":[]},{"text":"impl Sync for FdSet","synthetic":true,"types":[]},{"text":"impl !Sync for SigEvent","synthetic":true,"types":[]},{"text":"impl Sync for SignalIterator","synthetic":true,"types":[]},{"text":"impl Sync for SaFlags","synthetic":true,"types":[]},{"text":"impl Sync for SigSet","synthetic":true,"types":[]},{"text":"impl Sync for SigAction","synthetic":true,"types":[]},{"text":"impl Sync for Signal","synthetic":true,"types":[]},{"text":"impl Sync for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Sync for SigHandler","synthetic":true,"types":[]},{"text":"impl Sync for SigevNotify","synthetic":true,"types":[]},{"text":"impl Sync for SfdFlags","synthetic":true,"types":[]},{"text":"impl Sync for SignalFd","synthetic":true,"types":[]},{"text":"impl Sync for UnixAddr","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Sync for LinkAddr","synthetic":true,"types":[]},{"text":"impl Sync for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Sync for AlgAddr","synthetic":true,"types":[]},{"text":"impl Sync for SockFlag","synthetic":true,"types":[]},{"text":"impl Sync for MsgFlags","synthetic":true,"types":[]},{"text":"impl Sync for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Sync for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CmsgSpace&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AddressFamily","synthetic":true,"types":[]},{"text":"impl Sync for SockAddr","synthetic":true,"types":[]},{"text":"impl Sync for InetAddr","synthetic":true,"types":[]},{"text":"impl Sync for IpAddr","synthetic":true,"types":[]},{"text":"impl Sync for SockType","synthetic":true,"types":[]},{"text":"impl Sync for SockProtocol","synthetic":true,"types":[]},{"text":"impl Sync for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SockLevel","synthetic":true,"types":[]},{"text":"impl Sync for Shutdown","synthetic":true,"types":[]},{"text":"impl Sync for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Sync for ReusePort","synthetic":true,"types":[]},{"text":"impl Sync for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Sync for Linger","synthetic":true,"types":[]},{"text":"impl Sync for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Sync for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Sync for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Sync for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Sync for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Sync for SendTimeout","synthetic":true,"types":[]},{"text":"impl Sync for Broadcast","synthetic":true,"types":[]},{"text":"impl Sync for OobInline","synthetic":true,"types":[]},{"text":"impl Sync for SocketError","synthetic":true,"types":[]},{"text":"impl Sync for KeepAlive","synthetic":true,"types":[]},{"text":"impl Sync for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Sync for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Sync for RcvBuf","synthetic":true,"types":[]},{"text":"impl Sync for SndBuf","synthetic":true,"types":[]},{"text":"impl Sync for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Sync for SndBufForce","synthetic":true,"types":[]},{"text":"impl Sync for SockType","synthetic":true,"types":[]},{"text":"impl Sync for AcceptConn","synthetic":true,"types":[]},{"text":"impl Sync for OriginalDst","synthetic":true,"types":[]},{"text":"impl Sync for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Sync for IpTransparent","synthetic":true,"types":[]},{"text":"impl Sync for Mark","synthetic":true,"types":[]},{"text":"impl Sync for PassCred","synthetic":true,"types":[]},{"text":"impl Sync for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Sync for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Sync for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Sync for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SFlag","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Sync for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Sync for FsFlags","synthetic":true,"types":[]},{"text":"impl Sync for Statvfs","synthetic":true,"types":[]},{"text":"impl Sync for SysInfo","synthetic":true,"types":[]},{"text":"impl !Sync for Termios","synthetic":true,"types":[]},{"text":"impl Sync for InputFlags","synthetic":true,"types":[]},{"text":"impl Sync for OutputFlags","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlags","synthetic":true,"types":[]},{"text":"impl Sync for LocalFlags","synthetic":true,"types":[]},{"text":"impl Sync for BaudRate","synthetic":true,"types":[]},{"text":"impl Sync for SetArg","synthetic":true,"types":[]},{"text":"impl Sync for FlushArg","synthetic":true,"types":[]},{"text":"impl Sync for FlowArg","synthetic":true,"types":[]},{"text":"impl Sync for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Sync for TimeSpec","synthetic":true,"types":[]},{"text":"impl Sync for TimeVal","synthetic":true,"types":[]},{"text":"impl Sync for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UtsName","synthetic":true,"types":[]},{"text":"impl Sync for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Sync for WaitStatus","synthetic":true,"types":[]},{"text":"impl Sync for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Sync for InitFlags","synthetic":true,"types":[]},{"text":"impl Sync for Inotify","synthetic":true,"types":[]},{"text":"impl Sync for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for InotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for UContext","synthetic":true,"types":[]},{"text":"impl Sync for Uid","synthetic":true,"types":[]},{"text":"impl Sync for Gid","synthetic":true,"types":[]},{"text":"impl Sync for Pid","synthetic":true,"types":[]},{"text":"impl Sync for AccessFlags","synthetic":true,"types":[]},{"text":"impl Sync for ForkResult","synthetic":true,"types":[]},{"text":"impl Sync for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Sync for Whence","synthetic":true,"types":[]},{"text":"impl Sync for PathconfVar","synthetic":true,"types":[]},{"text":"impl Sync for SysconfVar","synthetic":true,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Sync for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Sync for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BigUint","synthetic":true,"types":[]},{"text":"impl Sync for BigInt","synthetic":true,"types":[]},{"text":"impl Sync for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Sync for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Sync for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Sync for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Sync for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Sync for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Sync for FloatErrorKind","synthetic":true,"types":[]}];
implementors["object"] = [{"text":"impl Sync for Architecture","synthetic":true,"types":[]},{"text":"impl Sync for AddressSize","synthetic":true,"types":[]},{"text":"impl Sync for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Sync for SectionKind","synthetic":true,"types":[]},{"text":"impl Sync for SymbolKind","synthetic":true,"types":[]},{"text":"impl Sync for SymbolScope","synthetic":true,"types":[]},{"text":"impl Sync for RelocationKind","synthetic":true,"types":[]},{"text":"impl Sync for RelocationEncoding","synthetic":true,"types":[]},{"text":"impl Sync for FileFlags","synthetic":true,"types":[]},{"text":"impl Sync for SectionFlags","synthetic":true,"types":[]},{"text":"impl&lt;Section&gt; Sync for SymbolFlags&lt;Section&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LittleEndian","synthetic":true,"types":[]},{"text":"impl Sync for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Endianness","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for Bytes&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for StringTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for File&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for SegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for Segment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for SectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for Section&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for SymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for RelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for SectionIndex","synthetic":true,"types":[]},{"text":"impl Sync for SymbolIndex","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for Symbol&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for SymbolMap&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for CompressedData&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SymbolSection","synthetic":true,"types":[]},{"text":"impl Sync for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Sync for CompressionFormat","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for CoffFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for SectionTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for CoffSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for CoffSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for CoffSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for CoffSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Sync for SymbolTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for CoffSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for CoffRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Sync for ElfFile&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Sync for ElfSegmentIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Sync for ElfSegment&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Sync for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Sync for ElfSectionIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Sync for ElfSection&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Sync for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Sync for ElfSymbolIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RelocationSections","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Sync for ElfRelocationIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rela: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Sync for ElfNoteIterator&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Sync for ElfNote&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::NoteHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Sync for MachOFile&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Sync for MachOSegmentIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Sync for MachOSegment&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Segment: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Sync for MachOSectionIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Sync for MachOSection&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Sync for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Sync for MachOSymbolIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Sync for MachORelocationIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Pe&gt; Sync for PeFile&lt;'data, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Sync for PeSegmentIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Sync for PeSegment&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Sync for PeSectionIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Sync for PeSection&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Sync for PeRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for FileHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for FileHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Ident","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SectionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SectionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CompressionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CompressionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Sym32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Sym64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Syminfo32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Syminfo64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Rel32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Rela32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Rel64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Rela64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ProgramHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ProgramHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Dyn32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Dyn64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for NoteHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for NoteHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FatHeader","synthetic":true,"types":[]},{"text":"impl Sync for FatArch32","synthetic":true,"types":[]},{"text":"impl Sync for FatArch64","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for MachHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for MachHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for LoadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for LcStr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SegmentCommand32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SegmentCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Section32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Section64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Fvmlib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for FvmlibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Dylib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SubFrameworkCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SubClientCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SubUmbrellaCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SubLibraryCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for PreboundDylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DylinkerCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ThreadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for RoutinesCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for RoutinesCommand_64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DysymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DylibTableOfContents&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DylibModule32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DylibModule64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DylibReference&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for TwolevelHintsCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for TwolevelHint&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for PrebindCksumCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UuidCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for RpathCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for LinkeditDataCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EncryptionInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EncryptionInfoCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for VersionMinCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BuildVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BuildToolVersion&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DyldInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for LinkerOptionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SymSegCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IdentCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for FvmfileCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EntryPointCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for SourceVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for DataInCodeEntry&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for NoteCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Nlist32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Nlist64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for Relocation&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RelocationInfo","synthetic":true,"types":[]},{"text":"impl Sync for ScatteredRelocationInfo","synthetic":true,"types":[]},{"text":"impl Sync for ImageDosHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageOs2Header","synthetic":true,"types":[]},{"text":"impl Sync for ImageVxdHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageFileHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageDataDirectory","synthetic":true,"types":[]},{"text":"impl Sync for ImageOptionalHeader32","synthetic":true,"types":[]},{"text":"impl Sync for ImageRomOptionalHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageOptionalHeader64","synthetic":true,"types":[]},{"text":"impl Sync for ImageNtHeaders64","synthetic":true,"types":[]},{"text":"impl Sync for ImageNtHeaders32","synthetic":true,"types":[]},{"text":"impl Sync for ImageRomHeaders","synthetic":true,"types":[]},{"text":"impl Sync for Guid","synthetic":true,"types":[]},{"text":"impl Sync for AnonObjectHeader","synthetic":true,"types":[]},{"text":"impl Sync for AnonObjectHeaderV2","synthetic":true,"types":[]},{"text":"impl Sync for AnonObjectHeaderBigobj","synthetic":true,"types":[]},{"text":"impl Sync for ImageSectionHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageSymbol","synthetic":true,"types":[]},{"text":"impl Sync for ImageSymbolBytes","synthetic":true,"types":[]},{"text":"impl Sync for ImageSymbolEx","synthetic":true,"types":[]},{"text":"impl Sync for ImageSymbolExBytes","synthetic":true,"types":[]},{"text":"impl Sync for ImageAuxSymbolTokenDef","synthetic":true,"types":[]},{"text":"impl Sync for ImageAuxSymbolFunction","synthetic":true,"types":[]},{"text":"impl Sync for ImageAuxSymbolFunctionBeginEnd","synthetic":true,"types":[]},{"text":"impl Sync for ImageAuxSymbolWeak","synthetic":true,"types":[]},{"text":"impl Sync for ImageAuxSymbolSection","synthetic":true,"types":[]},{"text":"impl Sync for ImageAuxSymbolCrc","synthetic":true,"types":[]},{"text":"impl Sync for ImageRelocation","synthetic":true,"types":[]},{"text":"impl Sync for ImageLinenumber","synthetic":true,"types":[]},{"text":"impl Sync for ImageBaseRelocation","synthetic":true,"types":[]},{"text":"impl Sync for ImageArchiveMemberHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageExportDirectory","synthetic":true,"types":[]},{"text":"impl Sync for ImageImportByName","synthetic":true,"types":[]},{"text":"impl Sync for ImageTlsDirectory64","synthetic":true,"types":[]},{"text":"impl Sync for ImageTlsDirectory32","synthetic":true,"types":[]},{"text":"impl Sync for ImageImportDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for ImageBoundImportDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for ImageBoundForwarderRef","synthetic":true,"types":[]},{"text":"impl Sync for ImageDelayloadDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for ImageResourceDirectory","synthetic":true,"types":[]},{"text":"impl Sync for ImageResourceDirectoryEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageResourceDirectoryString","synthetic":true,"types":[]},{"text":"impl Sync for ImageResourceDirStringU","synthetic":true,"types":[]},{"text":"impl Sync for ImageResourceDataEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageLoadConfigCodeIntegrity","synthetic":true,"types":[]},{"text":"impl Sync for ImageDynamicRelocationTable","synthetic":true,"types":[]},{"text":"impl Sync for ImageDynamicRelocation32","synthetic":true,"types":[]},{"text":"impl Sync for ImageDynamicRelocation64","synthetic":true,"types":[]},{"text":"impl Sync for ImageDynamicRelocation32V2","synthetic":true,"types":[]},{"text":"impl Sync for ImageDynamicRelocation64V2","synthetic":true,"types":[]},{"text":"impl Sync for ImagePrologueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageEpilogueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageLoadConfigDirectory32","synthetic":true,"types":[]},{"text":"impl Sync for ImageLoadConfigDirectory64","synthetic":true,"types":[]},{"text":"impl Sync for ImageHotPatchInfo","synthetic":true,"types":[]},{"text":"impl Sync for ImageHotPatchBase","synthetic":true,"types":[]},{"text":"impl Sync for ImageHotPatchHashes","synthetic":true,"types":[]},{"text":"impl Sync for ImageArmRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageArm64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageAlpha64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageAlphaRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageEnclaveConfig32","synthetic":true,"types":[]},{"text":"impl Sync for ImageEnclaveConfig64","synthetic":true,"types":[]},{"text":"impl Sync for ImageEnclaveImport","synthetic":true,"types":[]},{"text":"impl Sync for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl Sync for ImageCoffSymbolsHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageDebugMisc","synthetic":true,"types":[]},{"text":"impl Sync for ImageFunctionEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImageFunctionEntry64","synthetic":true,"types":[]},{"text":"impl Sync for ImageSeparateDebugHeader","synthetic":true,"types":[]},{"text":"impl Sync for NonPagedDebugInfo","synthetic":true,"types":[]},{"text":"impl Sync for ImageArchitectureEntry","synthetic":true,"types":[]},{"text":"impl Sync for ImportObjectHeader","synthetic":true,"types":[]},{"text":"impl Sync for ImageCor20Header","synthetic":true,"types":[]}];
implementors["ogg"] = [{"text":"impl Sync for Packet","synthetic":true,"types":[]},{"text":"impl Sync for OggPage","synthetic":true,"types":[]},{"text":"impl Sync for PageParser","synthetic":true,"types":[]},{"text":"impl Sync for BasePacketReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PacketReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for OggReadError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PacketWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PacketWriteEndInfo","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Sync for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C, T&gt; Sync for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Color&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as RgbSpace&gt;::WhitePoint: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Equations","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Sync for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Equation","synthetic":true,"types":[]},{"text":"impl Sync for Parameter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for Gradient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Sync for Take&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Sync for Slice&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ConeResponseMatrices&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Method","synthetic":true,"types":[]},{"text":"impl Sync for Srgb","synthetic":true,"types":[]},{"text":"impl&lt;S, N&gt; Sync for Gamma&lt;S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for GammaFn&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for F2p2","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Linear&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LinearFn","synthetic":true,"types":[]},{"text":"impl Sync for A","synthetic":true,"types":[]},{"text":"impl Sync for B","synthetic":true,"types":[]},{"text":"impl Sync for C","synthetic":true,"types":[]},{"text":"impl Sync for D50","synthetic":true,"types":[]},{"text":"impl Sync for D55","synthetic":true,"types":[]},{"text":"impl Sync for D65","synthetic":true,"types":[]},{"text":"impl Sync for D75","synthetic":true,"types":[]},{"text":"impl Sync for E","synthetic":true,"types":[]},{"text":"impl Sync for F2","synthetic":true,"types":[]},{"text":"impl Sync for F7","synthetic":true,"types":[]},{"text":"impl Sync for F11","synthetic":true,"types":[]},{"text":"impl Sync for D50Degree10","synthetic":true,"types":[]},{"text":"impl Sync for D55Degree10","synthetic":true,"types":[]},{"text":"impl Sync for D65Degree10","synthetic":true,"types":[]},{"text":"impl Sync for D75Degree10","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Sync for Condvar","synthetic":true,"types":[]},{"text":"impl Sync for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Sync for Once","synthetic":true,"types":[]},{"text":"impl Sync for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawRwLock","synthetic":true,"types":[]},{"text":"impl Sync for RawThreadId","synthetic":true,"types":[]},{"text":"impl Sync for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Sync for ParkToken","synthetic":true,"types":[]},{"text":"impl Sync for UnparkResult","synthetic":true,"types":[]},{"text":"impl Sync for UnparkToken","synthetic":true,"types":[]},{"text":"impl Sync for SpinWait","synthetic":true,"types":[]},{"text":"impl Sync for FilterOp","synthetic":true,"types":[]},{"text":"impl Sync for ParkResult","synthetic":true,"types":[]},{"text":"impl Sync for RequeueOp","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Sync for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for OrderedMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Sync for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Sync for FrameControl","synthetic":true,"types":[]},{"text":"impl Sync for AnimationControl","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for OutputInfo","synthetic":true,"types":[]},{"text":"impl Sync for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ColorType","synthetic":true,"types":[]},{"text":"impl Sync for BitDepth","synthetic":true,"types":[]},{"text":"impl Sync for Unit","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for Decoded","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for EncodingError","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Sync for YesS3","synthetic":true,"types":[]},{"text":"impl Sync for NoS3","synthetic":true,"types":[]},{"text":"impl Sync for YesS4","synthetic":true,"types":[]},{"text":"impl Sync for NoS4","synthetic":true,"types":[]},{"text":"impl Sync for YesA1","synthetic":true,"types":[]},{"text":"impl Sync for NoA1","synthetic":true,"types":[]},{"text":"impl Sync for YesA2","synthetic":true,"types":[]},{"text":"impl Sync for NoA2","synthetic":true,"types":[]},{"text":"impl Sync for YesNI","synthetic":true,"types":[]},{"text":"impl Sync for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Sync for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Sync for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for vec128_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec256_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Sync for TokenStream","synthetic":true,"types":[]},{"text":"impl !Sync for LexError","synthetic":true,"types":[]},{"text":"impl !Sync for Span","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for Punct","synthetic":true,"types":[]},{"text":"impl !Sync for Ident","synthetic":true,"types":[]},{"text":"impl !Sync for Literal","synthetic":true,"types":[]},{"text":"impl !Sync for TokenTree","synthetic":true,"types":[]},{"text":"impl Sync for Delimiter","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl !Sync for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Sync for SpanRange","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Sync for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quickcheck"] = [{"text":"impl&lt;R&gt; Sync for StdGen&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for StdThreadGen","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Sync for QuickCheck&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TestResult","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Sync for Bernoulli","synthetic":true,"types":[]},{"text":"impl Sync for Open01","synthetic":true,"types":[]},{"text":"impl Sync for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Sync for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Binomial","synthetic":true,"types":[]},{"text":"impl Sync for Cauchy","synthetic":true,"types":[]},{"text":"impl Sync for Dirichlet","synthetic":true,"types":[]},{"text":"impl Sync for Exp","synthetic":true,"types":[]},{"text":"impl Sync for Exp1","synthetic":true,"types":[]},{"text":"impl Sync for Beta","synthetic":true,"types":[]},{"text":"impl Sync for ChiSquared","synthetic":true,"types":[]},{"text":"impl Sync for FisherF","synthetic":true,"types":[]},{"text":"impl Sync for Gamma","synthetic":true,"types":[]},{"text":"impl Sync for StudentT","synthetic":true,"types":[]},{"text":"impl Sync for LogNormal","synthetic":true,"types":[]},{"text":"impl Sync for Normal","synthetic":true,"types":[]},{"text":"impl Sync for StandardNormal","synthetic":true,"types":[]},{"text":"impl Sync for Pareto","synthetic":true,"types":[]},{"text":"impl Sync for Poisson","synthetic":true,"types":[]},{"text":"impl Sync for Triangular","synthetic":true,"types":[]},{"text":"impl Sync for UnitCircle","synthetic":true,"types":[]},{"text":"impl Sync for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Sync for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Sync for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Standard","synthetic":true,"types":[]},{"text":"impl Sync for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EntropyRng","synthetic":true,"types":[]},{"text":"impl Sync for StdRng","synthetic":true,"types":[]},{"text":"impl !Sync for ThreadRng","synthetic":true,"types":[]},{"text":"impl Sync for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Sync for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Sync for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Sync for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Sync for UnitSphere","synthetic":true,"types":[]},{"text":"impl Sync for UnitBall","synthetic":true,"types":[]},{"text":"impl Sync for UnitCircle","synthetic":true,"types":[]},{"text":"impl Sync for UnitDisc","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Gamma&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for ChiSquared&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for FisherF&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for StudentT&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Beta&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Normal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for LogNormal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Exp&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Pareto&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Pert&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Poisson&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Binomial","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Cauchy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Dirichlet&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Triangular&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Weibull&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl Sync for FisherFError","synthetic":true,"types":[]},{"text":"impl Sync for BetaError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for PertError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for TriangularError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Sync for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl Sync for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl Sync for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl !Sync for RawWindowHandle","synthetic":true,"types":[]},{"text":"impl !Sync for X11Handle","synthetic":true,"types":[]},{"text":"impl !Sync for WaylandHandle","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Sync for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Sync for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Sync for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Sync for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Sync for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Sync for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Sync for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Configuration","synthetic":true,"types":[]},{"text":"impl !Sync for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Sync for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Span","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for WithComments","synthetic":true,"types":[]},{"text":"impl Sync for Comment","synthetic":true,"types":[]},{"text":"impl Sync for Alternation","synthetic":true,"types":[]},{"text":"impl Sync for Concat","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerl","synthetic":true,"types":[]},{"text":"impl Sync for ClassAscii","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Sync for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Sync for Assertion","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for CaptureName","synthetic":true,"types":[]},{"text":"impl Sync for SetFlags","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItem","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Ast","synthetic":true,"types":[]},{"text":"impl Sync for LiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassSet","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Sync for AssertionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Sync for Flag","synthetic":true,"types":[]},{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Hir","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for HirKind","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for WordBoundary","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for Literals","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Translator","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Range","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequence","synthetic":true,"types":[]}];
implementors["relevant"] = [{"text":"impl Sync for Relevant","synthetic":true,"types":[]}];
implementors["rendy_chain"] = [{"text":"impl Sync for Id","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Chain&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Link&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for LinkNode&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Chains","synthetic":true,"types":[]},{"text":"impl Sync for Unsynchronized","synthetic":true,"types":[]},{"text":"impl Sync for Node","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for State&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Buffer","synthetic":true,"types":[]},{"text":"impl Sync for Image","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Family&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Queue&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Schedule&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Submission&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SubmissionId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Barrier&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Guard","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Signal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, W&gt; Sync for SyncData&lt;S, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_command"] = [{"text":"impl Sync for DrawCommand","synthetic":true,"types":[]},{"text":"impl Sync for DrawIndexedCommand","synthetic":true,"types":[]},{"text":"impl Sync for DispatchCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; Sync for EncoderCommon&lt;'a, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for RenderPassEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for RenderPassInlineEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for RenderPassSecondaryEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C, L&gt; Sync for Encoder&lt;'a, B, C, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PrimaryLevel","synthetic":true,"types":[]},{"text":"impl Sync for SecondaryLevel","synthetic":true,"types":[]},{"text":"impl Sync for IndividualReset","synthetic":true,"types":[]},{"text":"impl Sync for NoIndividualReset","synthetic":true,"types":[]},{"text":"impl Sync for InitialState","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; Sync for RecordingState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; Sync for ExecutableState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for PendingState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for InvalidState","synthetic":true,"types":[]},{"text":"impl Sync for OneShot","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for MultiShot&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SimultaneousUse","synthetic":true,"types":[]},{"text":"impl Sync for NoSimultaneousUse","synthetic":true,"types":[]},{"text":"impl Sync for RenderPassContinue","synthetic":true,"types":[]},{"text":"impl Sync for OutsideRenderPass","synthetic":true,"types":[]},{"text":"impl Sync for Transfer","synthetic":true,"types":[]},{"text":"impl Sync for Execute","synthetic":true,"types":[]},{"text":"impl Sync for Compute","synthetic":true,"types":[]},{"text":"impl Sync for Graphics","synthetic":true,"types":[]},{"text":"impl Sync for General","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Queue&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, W, C, S&gt; Sync for Submission&lt;B, W, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FamilyId","synthetic":true,"types":[]},{"text":"impl Sync for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Sync for Family&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Families&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FenceEpoch","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Fence&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C, R&gt; Sync for CommandPool&lt;B, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, S, L, P&gt; Sync for Submit&lt;B, S, L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::CommandBuffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; Sync for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::CommandBuffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;FamilyId: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Relevant: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rendy_descriptor"] = [{"text":"impl&lt;B&gt; Sync for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DescriptorAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorPool: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorRanges","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DescriptorRangesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_factory"] = [{"text":"impl&lt;B&gt; Sync for Barriers&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Blitter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BlitRegion","synthetic":true,"types":[]},{"text":"impl Sync for BlitImageState","synthetic":true,"types":[]},{"text":"impl&lt;D, H, Q&gt; Sync for Config&lt;D, H, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for OneGraphicsQueue","synthetic":true,"types":[]},{"text":"impl Sync for SavedQueueConfig","synthetic":true,"types":[]},{"text":"impl Sync for BasicHeapsConfigure","synthetic":true,"types":[]},{"text":"impl Sync for SavedHeapsConfig","synthetic":true,"types":[]},{"text":"impl Sync for BasicDevicesConfigure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Factory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorPool: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PhysicalDevice: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BufferState","synthetic":true,"types":[]},{"text":"impl Sync for ImageState","synthetic":true,"types":[]},{"text":"impl Sync for ImageStateOrLayout","synthetic":true,"types":[]}];
implementors["rendy_frame"] = [{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl Sync for CompleteFrame","synthetic":true,"types":[]},{"text":"impl Sync for FramesRange","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Frames&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Sync for InitialRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Sync for ReadyRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; Sync for Cirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; Sync for DependentCirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Sync for CirqueRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_graph"] = [{"text":"impl Sync for BufferId","synthetic":true,"types":[]},{"text":"impl Sync for ImageId","synthetic":true,"types":[]},{"text":"impl Sync for NodeId","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized&gt; Sync for Graph&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Semaphore: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for GraphContext&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !Sync for GraphBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BufferAccess","synthetic":true,"types":[]},{"text":"impl Sync for BufferBarrier","synthetic":true,"types":[]},{"text":"impl Sync for NodeBuffer","synthetic":true,"types":[]},{"text":"impl Sync for ImageAccess","synthetic":true,"types":[]},{"text":"impl Sync for ImageBarrier","synthetic":true,"types":[]},{"text":"impl Sync for NodeImage","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized, N&gt; Sync for DescBuilder&lt;B, T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for PresentBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PrepareResult","synthetic":true,"types":[]},{"text":"impl Sync for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; Sync for SimpleRenderGroup&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for SimpleRenderGroupDesc&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !Sync for SubpassBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !Sync for RenderPassNodeBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Sync for PresentNode&lt;B&gt;","synthetic":false,"types":[]}];
implementors["rendy_memory"] = [{"text":"impl Sync for DedicatedAllocator","synthetic":true,"types":[]},{"text":"impl Sync for DynamicConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for LinearAllocator&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LinearConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Heaps&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for HeapsConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for MemoryBlock&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Coherent","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&nbsp;=&nbsp;MaybeCoherent&gt; !Sync for MappedRange&lt;'a, B, C&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MaybeCoherent","synthetic":true,"types":[]},{"text":"impl Sync for NonCoherent","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Memory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Data","synthetic":true,"types":[]},{"text":"impl Sync for Dynamic","synthetic":true,"types":[]},{"text":"impl Sync for Upload","synthetic":true,"types":[]},{"text":"impl Sync for Download","synthetic":true,"types":[]},{"text":"impl Sync for MemoryUtilization","synthetic":true,"types":[]},{"text":"impl Sync for MemoryHeapUtilization","synthetic":true,"types":[]},{"text":"impl Sync for MemoryTypeUtilization","synthetic":true,"types":[]},{"text":"impl Sync for TotalMemoryUtilization","synthetic":true,"types":[]},{"text":"impl Sync for Kind","synthetic":true,"types":[]},{"text":"impl Sync for HeapsError","synthetic":true,"types":[]},{"text":"impl Sync for MemoryUsageValue","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DedicatedBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Sync for DynamicBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Sync for DynamicAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Sync for LinearBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rendy_mesh"] = [{"text":"impl Sync for VertexBufferLayout","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for IndexBuffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MeshBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Mesh&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Incompatible","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Indices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_resource"] = [{"text":"impl Sync for BufferInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Buffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Escape&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Terminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Handle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Image&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ImageViewInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ImageView&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ResourceTracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for SamplerCache&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Sampler&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DescriptorSetInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DescriptorSetLayout&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_shader"] = [{"text":"impl Sync for SpirvShader","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ShaderSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SpecConstantSet","synthetic":true,"types":[]},{"text":"impl Sync for ShaderSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ShaderStorage&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_texture"] = [{"text":"impl&lt;B&gt; Sync for Texture&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TextureBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MipLevels","synthetic":true,"types":[]},{"text":"impl Sync for ImageTextureConfig","synthetic":true,"types":[]},{"text":"impl Sync for Repr","synthetic":true,"types":[]},{"text":"impl Sync for TextureKind","synthetic":true,"types":[]},{"text":"impl Sync for Unorm","synthetic":true,"types":[]},{"text":"impl Sync for Inorm","synthetic":true,"types":[]},{"text":"impl Sync for Uint","synthetic":true,"types":[]},{"text":"impl Sync for Int","synthetic":true,"types":[]},{"text":"impl Sync for Uscaled","synthetic":true,"types":[]},{"text":"impl Sync for Iscaled","synthetic":true,"types":[]},{"text":"impl Sync for Srgb","synthetic":true,"types":[]},{"text":"impl Sync for Float","synthetic":true,"types":[]},{"text":"impl Sync for _8","synthetic":true,"types":[]},{"text":"impl Sync for _16","synthetic":true,"types":[]},{"text":"impl Sync for _32","synthetic":true,"types":[]},{"text":"impl Sync for _64","synthetic":true,"types":[]},{"text":"impl Sync for R","synthetic":true,"types":[]},{"text":"impl Sync for Rg","synthetic":true,"types":[]},{"text":"impl Sync for Rgb","synthetic":true,"types":[]},{"text":"impl Sync for Rgba","synthetic":true,"types":[]},{"text":"impl Sync for Bgr","synthetic":true,"types":[]},{"text":"impl Sync for Bgra","synthetic":true,"types":[]},{"text":"impl Sync for Abgr","synthetic":true,"types":[]},{"text":"impl&lt;C, S, T&gt; Sync for Pixel&lt;C, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as PixelRepr&lt;S, T&gt;&gt;::Repr: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_util"] = [{"text":"impl Sync for InstanceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Instance&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DeviceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Device&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SetLayout","synthetic":true,"types":[]},{"text":"impl Sync for Layout","synthetic":true,"types":[]},{"text":"impl Sync for AttrUuid","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for Normal","synthetic":true,"types":[]},{"text":"impl Sync for Tangent","synthetic":true,"types":[]},{"text":"impl Sync for TexCoord","synthetic":true,"types":[]},{"text":"impl Sync for VertexFormat","synthetic":true,"types":[]},{"text":"impl&lt;N, I&gt; Sync for AttrGenIter&lt;N, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Attribute","synthetic":true,"types":[]},{"text":"impl Sync for PosColor","synthetic":true,"types":[]},{"text":"impl Sync for PosNorm","synthetic":true,"types":[]},{"text":"impl Sync for PosColorNorm","synthetic":true,"types":[]},{"text":"impl Sync for PosTex","synthetic":true,"types":[]},{"text":"impl Sync for PosNormTex","synthetic":true,"types":[]},{"text":"impl Sync for PosNormTangTex","synthetic":true,"types":[]},{"text":"impl Sync for Model","synthetic":true,"types":[]}];
implementors["rendy_wsi"] = [{"text":"impl&lt;B&gt; Sync for Surface&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for Target&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Sync for NextImages&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rental"] = [{"text":"impl&lt;E, H&gt; Sync for RentalError&lt;E, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SimpleRef","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRef_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRef_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SimpleMut","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleMut_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleMut_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SimpleRefDebug","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefDebug_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefDebug_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SimpleRefClone","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefClone_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefClone_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SimpleRefDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SimpleMutDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleMutDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleMutDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SimpleRefCovariant","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefCovariant_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Sync for SimpleRefCovariant_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SimpleRefMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; Sync for SimpleRefMap_Borrow&lt;'head, 'iref, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; Sync for SimpleRefMap_BorrowMut&lt;'head, 'iref, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for RentRef&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentRef_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentRef_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for RentMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentMut_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !Sync for RentRefCell&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Sync for RentRefCell_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Sync for RentRefCell_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !Sync for RentRefCellMut&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Sync for RentRefCellMut_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Sync for RentRefCellMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for RentMutex&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentMutex_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentMutex_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for RentRwLock&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentRwLock_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentRwLock_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for RentRwLockMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentRwLockMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Sync for RentRwLockMut_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rodio"] = [{"text":"impl Sync for Sink","synthetic":true,"types":[]},{"text":"impl Sync for SpatialSink","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DecoderError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for DynamicMixerController&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for DynamicMixer&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for SourcesQueueInput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !Sync for SourcesQueueOutput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Amplify&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for BltFilter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Buffered&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for ChannelVolume&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Delay&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Done&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Empty&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for FadeIn&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FromFactoryIter&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for FromIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Sync for Mix&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I1 as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I2 as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Pausable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for PeriodicAccess&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Repeat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; Sync for SamplesConverter&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SineWave","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Spatial&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Speed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Stoppable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for TakeDuration&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; Sync for UniformSourceIterator&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Zero&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for StaticSamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ron"] = [{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl&lt;'de&gt; Sync for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PrettyConfig","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for Compound&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorCode","synthetic":true,"types":[]},{"text":"impl Sync for Map","synthetic":true,"types":[]},{"text":"impl Sync for Float","synthetic":true,"types":[]},{"text":"impl Sync for Number","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl Sync for Extensions","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Sync for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl Sync for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_version"] = [{"text":"impl Sync for VersionMeta","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Channel","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl Sync for Curve","synthetic":true,"types":[]},{"text":"impl Sync for Line","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FontCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Codepoint","synthetic":true,"types":[]},{"text":"impl Sync for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Glyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SharedGlyphData","synthetic":true,"types":[]},{"text":"impl Sync for HMetrics","synthetic":true,"types":[]},{"text":"impl Sync for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ScaledGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PositionedGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IntoFontsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, I&gt; Sync for GlyphIter&lt;'a, 'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for LayoutIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Contour","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SharedBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Segment","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Sync for Cache&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CacheBuilder","synthetic":true,"types":[]},{"text":"impl Sync for CacheReadErr","synthetic":true,"types":[]},{"text":"impl Sync for CacheWriteErr","synthetic":true,"types":[]},{"text":"impl Sync for CachedBy","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Sync for Handle","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl !Sync for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; !Sync for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Sync for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Sync for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for VersionReq","synthetic":true,"types":[]},{"text":"impl Sync for Identifier","synthetic":true,"types":[]},{"text":"impl Sync for SemVerError","synthetic":true,"types":[]},{"text":"impl Sync for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for Identifier","synthetic":true,"types":[]},{"text":"impl Sync for VersionReq","synthetic":true,"types":[]},{"text":"impl Sync for Predicate","synthetic":true,"types":[]},{"text":"impl Sync for WildcardVersion","synthetic":true,"types":[]},{"text":"impl Sync for Op","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Sync for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Sync for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Sync for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl Sync for Bytes","synthetic":true,"types":[]},{"text":"impl Sync for ByteBuf","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Sync for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Sync for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Sync for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Number","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CharEscape","synthetic":true,"types":[]},{"text":"impl Sync for Serializer","synthetic":true,"types":[]},{"text":"impl Sync for RawValue","synthetic":true,"types":[]}];
implementors["shred"] = [{"text":"impl&lt;'a, R&gt; !Sync for AsyncDispatcher&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for Par&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; Sync for ParSeq&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for Seq&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BatchAccessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BatchUncheckedWorld&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for DefaultBatchControllerSystem&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for Dispatcher&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for DispatcherBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for MetaIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for MetaIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for MetaTable&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for StaticAccessor&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DefaultProvider","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Fetch&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for FetchMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PanicHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Sync for Read&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ResourceId","synthetic":true,"types":[]},{"text":"impl Sync for World","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Sync for Write&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;?Sized&gt; Sync for AccessorCow&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as System&lt;'a&gt;&gt;::SystemData as DynamicSystemData&lt;'a&gt;&gt;::Accessor: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RunningTime","synthetic":true,"types":[]},{"text":"impl Sync for InvalidBorrow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for Ref&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for RefMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrustCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["shrev"] = [{"text":"impl&lt;T&gt; Sync for ReaderId&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for StorageIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EventChannel&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["siphasher"] = [{"text":"impl Sync for SipHasher13","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher24","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher","synthetic":true,"types":[]},{"text":"impl Sync for Hash128","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher13","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher24","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Sync for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slice_deque"] = [{"text":"impl&lt;'a, I&gt; Sync for Splice&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Sync for DrainFilter&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AllocError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Buffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for SliceDeque&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Sync for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for IntoIter&lt;T&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A&gt; Sync for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync + Array&gt; Sync for Drain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl Sync for Environment","synthetic":true,"types":[]},{"text":"impl Sync for Shell","synthetic":true,"types":[]},{"text":"impl Sync for DataDevice","synthetic":true,"types":[]},{"text":"impl Sync for DataOffer","synthetic":true,"types":[]},{"text":"impl Sync for ReadPipe","synthetic":true,"types":[]},{"text":"impl Sync for DataSource","synthetic":true,"types":[]},{"text":"impl Sync for WritePipe","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DndEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DataSourceEvent","synthetic":true,"types":[]},{"text":"impl Sync for ModifiersState","synthetic":true,"types":[]},{"text":"impl Sync for RMLVO","synthetic":true,"types":[]},{"text":"impl Sync for KeyRepeatEvent","synthetic":true,"types":[]},{"text":"impl Sync for KeyRepeatKind","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for OutputInfo","synthetic":true,"types":[]},{"text":"impl Sync for OutputMgr","synthetic":true,"types":[]},{"text":"impl Sync for ThemeManager","synthetic":true,"types":[]},{"text":"impl Sync for ThemedPointer","synthetic":true,"types":[]},{"text":"impl Sync for AutoThemer","synthetic":true,"types":[]},{"text":"impl Sync for AutoPointer","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for DoubleMemPool","synthetic":true,"types":[]},{"text":"impl Sync for MemPool","synthetic":true,"types":[]},{"text":"impl !Sync for BasicFrame","synthetic":true,"types":[]},{"text":"impl !Sync for ConceptFrame","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Window&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for FrameRequest","synthetic":true,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; Sync for DefaultVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DenseVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Sync for FlaggedStorage&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for HashMapStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for NullStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for VecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Entity","synthetic":true,"types":[]},{"text":"impl Sync for LazyUpdate","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ChangeSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BoxedErr","synthetic":true,"types":[]},{"text":"impl Sync for WrongGeneration","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for NoError","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Sync for JoinParIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Sync for MaybeJoin&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Sync for JoinIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Mask: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Value: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ComponentEvent","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for Entries&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for OccupiedEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for VacantEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'rf, 'st, C, S, B, Restrict&gt; Sync for RestrictedStorage&lt;'rf, 'st, C, S, B, Restrict&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Restrict: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BTreeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for AntiStorage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MaskedStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Component&gt;::Storage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'e, T, D&gt; Sync for Storage&lt;'e, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for StorageEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ImmutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl Sync for MutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl Sync for SequentialRestriction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CreateIterAtomic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EntitiesRes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EntityResBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Generation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LazyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CreateIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EntityBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["specs_hierarchy"] = [{"text":"impl&lt;P&gt; Sync for Hierarchy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for SubHierarchyIterator&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for ParentData&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Component&gt;::Storage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for HierarchySystem&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HierarchyEvent","synthetic":true,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data&gt; Sync for FontInfo&lt;Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Vertex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HMetrics","synthetic":true,"types":[]},{"text":"impl Sync for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a, Data&gt; Sync for FontNameIter&lt;'a, Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for VertexType","synthetic":true,"types":[]},{"text":"impl Sync for PlatformId","synthetic":true,"types":[]},{"text":"impl Sync for UnicodeEid","synthetic":true,"types":[]},{"text":"impl Sync for MicrosoftEid","synthetic":true,"types":[]},{"text":"impl Sync for MacEid","synthetic":true,"types":[]},{"text":"impl Sync for MicrosoftLang","synthetic":true,"types":[]},{"text":"impl Sync for MacLang","synthetic":true,"types":[]},{"text":"impl Sync for PlatformEncodingLanguageId","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Sync for Attribute","synthetic":true,"types":[]},{"text":"impl !Sync for MetaList","synthetic":true,"types":[]},{"text":"impl !Sync for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Sync for Field","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Sync for Variant","synthetic":true,"types":[]},{"text":"impl !Sync for VisCrate","synthetic":true,"types":[]},{"text":"impl !Sync for VisPublic","synthetic":true,"types":[]},{"text":"impl !Sync for VisRestricted","synthetic":true,"types":[]},{"text":"impl Sync for ExprArray","synthetic":true,"types":[]},{"text":"impl Sync for ExprAssign","synthetic":true,"types":[]},{"text":"impl Sync for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBinary","synthetic":true,"types":[]},{"text":"impl Sync for ExprBlock","synthetic":true,"types":[]},{"text":"impl Sync for ExprBox","synthetic":true,"types":[]},{"text":"impl Sync for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCast","synthetic":true,"types":[]},{"text":"impl Sync for ExprCatch","synthetic":true,"types":[]},{"text":"impl Sync for ExprClosure","synthetic":true,"types":[]},{"text":"impl Sync for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Sync for ExprField","synthetic":true,"types":[]},{"text":"impl Sync for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Sync for ExprGroup","synthetic":true,"types":[]},{"text":"impl Sync for ExprIf","synthetic":true,"types":[]},{"text":"impl Sync for ExprIfLet","synthetic":true,"types":[]},{"text":"impl Sync for ExprInPlace","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLit","synthetic":true,"types":[]},{"text":"impl Sync for ExprLoop","synthetic":true,"types":[]},{"text":"impl Sync for ExprMacro","synthetic":true,"types":[]},{"text":"impl Sync for ExprMatch","synthetic":true,"types":[]},{"text":"impl Sync for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprParen","synthetic":true,"types":[]},{"text":"impl !Sync for ExprPath","synthetic":true,"types":[]},{"text":"impl Sync for ExprRange","synthetic":true,"types":[]},{"text":"impl Sync for ExprReference","synthetic":true,"types":[]},{"text":"impl Sync for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Sync for ExprReturn","synthetic":true,"types":[]},{"text":"impl Sync for ExprStruct","synthetic":true,"types":[]},{"text":"impl Sync for ExprTry","synthetic":true,"types":[]},{"text":"impl Sync for ExprTuple","synthetic":true,"types":[]},{"text":"impl Sync for ExprType","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnary","synthetic":true,"types":[]},{"text":"impl Sync for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl Sync for ExprWhile","synthetic":true,"types":[]},{"text":"impl Sync for ExprWhileLet","synthetic":true,"types":[]},{"text":"impl Sync for ExprYield","synthetic":true,"types":[]},{"text":"impl !Sync for Index","synthetic":true,"types":[]},{"text":"impl !Sync for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Sync for ConstParam","synthetic":true,"types":[]},{"text":"impl !Sync for Generics","synthetic":true,"types":[]},{"text":"impl !Sync for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateType","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBound","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParam","synthetic":true,"types":[]},{"text":"impl !Sync for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl !Sync for LitBool","synthetic":true,"types":[]},{"text":"impl !Sync for LitByte","synthetic":true,"types":[]},{"text":"impl !Sync for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitChar","synthetic":true,"types":[]},{"text":"impl !Sync for LitFloat","synthetic":true,"types":[]},{"text":"impl !Sync for LitInt","synthetic":true,"types":[]},{"text":"impl !Sync for LitStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitVerbatim","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for DataEnum","synthetic":true,"types":[]},{"text":"impl !Sync for DataStruct","synthetic":true,"types":[]},{"text":"impl !Sync for DataUnion","synthetic":true,"types":[]},{"text":"impl !Sync for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Sync for Abi","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Sync for TypeArray","synthetic":true,"types":[]},{"text":"impl !Sync for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Sync for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Sync for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TypeNever","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParen","synthetic":true,"types":[]},{"text":"impl !Sync for TypePath","synthetic":true,"types":[]},{"text":"impl !Sync for TypePtr","synthetic":true,"types":[]},{"text":"impl !Sync for TypeReference","synthetic":true,"types":[]},{"text":"impl !Sync for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Sync for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for PathTokens&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Binding","synthetic":true,"types":[]},{"text":"impl !Sync for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Path","synthetic":true,"types":[]},{"text":"impl !Sync for PathSegment","synthetic":true,"types":[]},{"text":"impl !Sync for QSelf","synthetic":true,"types":[]},{"text":"impl !Sync for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Meta","synthetic":true,"types":[]},{"text":"impl !Sync for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Sync for Fields","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]},{"text":"impl !Sync for Expr","synthetic":true,"types":[]},{"text":"impl !Sync for Member","synthetic":true,"types":[]},{"text":"impl !Sync for GenericParam","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Sync for WherePredicate","synthetic":true,"types":[]},{"text":"impl Sync for FloatSuffix","synthetic":true,"types":[]},{"text":"impl Sync for IntSuffix","synthetic":true,"types":[]},{"text":"impl !Sync for Lit","synthetic":true,"types":[]},{"text":"impl Sync for StrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Sync for Data","synthetic":true,"types":[]},{"text":"impl !Sync for BinOp","synthetic":true,"types":[]},{"text":"impl !Sync for UnOp","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArgName","synthetic":true,"types":[]},{"text":"impl !Sync for ReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Sync for PathArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Underscore","synthetic":true,"types":[]},{"text":"impl !Sync for Apostrophe","synthetic":true,"types":[]},{"text":"impl !Sync for Add","synthetic":true,"types":[]},{"text":"impl !Sync for AddEq","synthetic":true,"types":[]},{"text":"impl !Sync for And","synthetic":true,"types":[]},{"text":"impl !Sync for AndAnd","synthetic":true,"types":[]},{"text":"impl !Sync for AndEq","synthetic":true,"types":[]},{"text":"impl !Sync for At","synthetic":true,"types":[]},{"text":"impl !Sync for Bang","synthetic":true,"types":[]},{"text":"impl !Sync for Caret","synthetic":true,"types":[]},{"text":"impl !Sync for CaretEq","synthetic":true,"types":[]},{"text":"impl !Sync for Colon","synthetic":true,"types":[]},{"text":"impl !Sync for Colon2","synthetic":true,"types":[]},{"text":"impl !Sync for Comma","synthetic":true,"types":[]},{"text":"impl !Sync for Div","synthetic":true,"types":[]},{"text":"impl !Sync for DivEq","synthetic":true,"types":[]},{"text":"impl !Sync for Dollar","synthetic":true,"types":[]},{"text":"impl !Sync for Dot","synthetic":true,"types":[]},{"text":"impl !Sync for Dot2","synthetic":true,"types":[]},{"text":"impl !Sync for Dot3","synthetic":true,"types":[]},{"text":"impl !Sync for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Sync for Eq","synthetic":true,"types":[]},{"text":"impl !Sync for EqEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ge","synthetic":true,"types":[]},{"text":"impl !Sync for Gt","synthetic":true,"types":[]},{"text":"impl !Sync for Le","synthetic":true,"types":[]},{"text":"impl !Sync for Lt","synthetic":true,"types":[]},{"text":"impl !Sync for MulEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ne","synthetic":true,"types":[]},{"text":"impl !Sync for Or","synthetic":true,"types":[]},{"text":"impl !Sync for OrEq","synthetic":true,"types":[]},{"text":"impl !Sync for OrOr","synthetic":true,"types":[]},{"text":"impl !Sync for Pound","synthetic":true,"types":[]},{"text":"impl !Sync for Question","synthetic":true,"types":[]},{"text":"impl !Sync for RArrow","synthetic":true,"types":[]},{"text":"impl !Sync for LArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Rem","synthetic":true,"types":[]},{"text":"impl !Sync for RemEq","synthetic":true,"types":[]},{"text":"impl !Sync for FatArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Semi","synthetic":true,"types":[]},{"text":"impl !Sync for Shl","synthetic":true,"types":[]},{"text":"impl !Sync for ShlEq","synthetic":true,"types":[]},{"text":"impl !Sync for Shr","synthetic":true,"types":[]},{"text":"impl !Sync for ShrEq","synthetic":true,"types":[]},{"text":"impl !Sync for Star","synthetic":true,"types":[]},{"text":"impl !Sync for Sub","synthetic":true,"types":[]},{"text":"impl !Sync for SubEq","synthetic":true,"types":[]},{"text":"impl !Sync for Brace","synthetic":true,"types":[]},{"text":"impl !Sync for Bracket","synthetic":true,"types":[]},{"text":"impl !Sync for Paren","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for As","synthetic":true,"types":[]},{"text":"impl !Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for Auto","synthetic":true,"types":[]},{"text":"impl !Sync for Box","synthetic":true,"types":[]},{"text":"impl !Sync for Break","synthetic":true,"types":[]},{"text":"impl !Sync for CapSelf","synthetic":true,"types":[]},{"text":"impl !Sync for Catch","synthetic":true,"types":[]},{"text":"impl !Sync for Const","synthetic":true,"types":[]},{"text":"impl !Sync for Continue","synthetic":true,"types":[]},{"text":"impl !Sync for Crate","synthetic":true,"types":[]},{"text":"impl !Sync for Default","synthetic":true,"types":[]},{"text":"impl !Sync for Do","synthetic":true,"types":[]},{"text":"impl !Sync for Dyn","synthetic":true,"types":[]},{"text":"impl !Sync for Else","synthetic":true,"types":[]},{"text":"impl !Sync for Enum","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl !Sync for Fn","synthetic":true,"types":[]},{"text":"impl !Sync for For","synthetic":true,"types":[]},{"text":"impl !Sync for If","synthetic":true,"types":[]},{"text":"impl !Sync for Impl","synthetic":true,"types":[]},{"text":"impl !Sync for In","synthetic":true,"types":[]},{"text":"impl !Sync for Let","synthetic":true,"types":[]},{"text":"impl !Sync for Loop","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for Match","synthetic":true,"types":[]},{"text":"impl !Sync for Mod","synthetic":true,"types":[]},{"text":"impl !Sync for Move","synthetic":true,"types":[]},{"text":"impl !Sync for Mut","synthetic":true,"types":[]},{"text":"impl !Sync for Pub","synthetic":true,"types":[]},{"text":"impl !Sync for Ref","synthetic":true,"types":[]},{"text":"impl !Sync for Return","synthetic":true,"types":[]},{"text":"impl !Sync for Self_","synthetic":true,"types":[]},{"text":"impl !Sync for Static","synthetic":true,"types":[]},{"text":"impl !Sync for Struct","synthetic":true,"types":[]},{"text":"impl !Sync for Super","synthetic":true,"types":[]},{"text":"impl !Sync for Trait","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Union","synthetic":true,"types":[]},{"text":"impl !Sync for Unsafe","synthetic":true,"types":[]},{"text":"impl !Sync for Use","synthetic":true,"types":[]},{"text":"impl !Sync for Where","synthetic":true,"types":[]},{"text":"impl !Sync for While","synthetic":true,"types":[]},{"text":"impl !Sync for Yield","synthetic":true,"types":[]},{"text":"impl !Sync for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl&lt;'a&gt; !Sync for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Structure&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AddBounds","synthetic":true,"types":[]},{"text":"impl Sync for BindStyle","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Sync for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl Sync for BufferWriter","synthetic":true,"types":[]},{"text":"impl Sync for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ColorSpec","synthetic":true,"types":[]},{"text":"impl Sync for ParseColorError","synthetic":true,"types":[]},{"text":"impl Sync for ColorChoice","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Sync for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tiff"] = [{"text":"impl Sync for TiffError","synthetic":true,"types":[]},{"text":"impl Sync for TiffFormatError","synthetic":true,"types":[]},{"text":"impl Sync for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl Sync for ColorType","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl Sync for CompressionMethod","synthetic":true,"types":[]},{"text":"impl Sync for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl Sync for Entry","synthetic":true,"types":[]},{"text":"impl Sync for Tag","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl Sync for Rational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for DirectoryEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; Sync for ImageEncoder&lt;'a, W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl Sync for Gray8","synthetic":true,"types":[]},{"text":"impl Sync for Gray16","synthetic":true,"types":[]},{"text":"impl Sync for RGB8","synthetic":true,"types":[]},{"text":"impl Sync for RGB16","synthetic":true,"types":[]},{"text":"impl Sync for RGBA8","synthetic":true,"types":[]},{"text":"impl Sync for RGBA16","synthetic":true,"types":[]},{"text":"impl Sync for CMYK8","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Sync for Duration","synthetic":true,"types":[]},{"text":"impl Sync for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Sync for Timespec","synthetic":true,"types":[]},{"text":"impl Sync for PreciseTime","synthetic":true,"types":[]},{"text":"impl Sync for SteadyTime","synthetic":true,"types":[]},{"text":"impl Sync for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]}];
implementors["tinystr"] = [{"text":"impl Sync for TinyStr16","synthetic":true,"types":[]},{"text":"impl Sync for TinyStr4","synthetic":true,"types":[]},{"text":"impl Sync for TinyStr8","synthetic":true,"types":[]},{"text":"impl Sync for TinyStrAuto","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Sync for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Sync for ArrayVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Sync for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;T&gt; Sync for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Datetime","synthetic":true,"types":[]},{"text":"impl Sync for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Sync for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl Sync for RandomXxHashBuilder32","synthetic":true,"types":[]},{"text":"impl Sync for XxHash64","synthetic":true,"types":[]},{"text":"impl Sync for XxHash32","synthetic":true,"types":[]}];
implementors["tynm"] = [{"text":"impl&lt;'s&gt; Sync for TypeNameDisplay&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Sync for TypeName&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["type_map"] = [{"text":"impl&lt;'a, T&gt; !Sync for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Entry&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Sync for Greater","synthetic":true,"types":[]},{"text":"impl Sync for Less","synthetic":true,"types":[]},{"text":"impl Sync for Equal","synthetic":true,"types":[]},{"text":"impl Sync for B0","synthetic":true,"types":[]},{"text":"impl Sync for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Z0","synthetic":true,"types":[]},{"text":"impl Sync for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Sync for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Sync for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unic_langid_impl"] = [{"text":"impl Sync for LanguageIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for LanguageIdentifierError","synthetic":true,"types":[]},{"text":"impl Sync for CharacterDirection","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Sync for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IsNormalized","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Sync for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Sync for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Sync for DirEntry","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for WalkDir","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wavefront_obj"] = [{"text":"impl Sync for ParseError","synthetic":true,"types":[]},{"text":"impl Sync for MtlSet","synthetic":true,"types":[]},{"text":"impl Sync for Material","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for Illumination","synthetic":true,"types":[]},{"text":"impl Sync for ObjSet","synthetic":true,"types":[]},{"text":"impl Sync for Object","synthetic":true,"types":[]},{"text":"impl Sync for Geometry","synthetic":true,"types":[]},{"text":"impl Sync for Shape","synthetic":true,"types":[]},{"text":"impl Sync for Vertex","synthetic":true,"types":[]},{"text":"impl Sync for TVertex","synthetic":true,"types":[]},{"text":"impl Sync for Primitive","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Sync for Display","synthetic":true,"types":[]},{"text":"impl !Sync for EventQueue","synthetic":true,"types":[]},{"text":"impl !Sync for QueueToken","synthetic":true,"types":[]},{"text":"impl !Sync for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl Sync for GlobalManager","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for NewProxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Proxy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ConnectError","synthetic":true,"types":[]},{"text":"impl Sync for GlobalError","synthetic":true,"types":[]},{"text":"impl Sync for GlobalEvent","synthetic":true,"types":[]},{"text":"impl Sync for ProxyMap","synthetic":true,"types":[]},{"text":"impl !Sync for CursorTheme","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CursorImageBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for WlDisplay","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlRegistry","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlCallback","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlCompositor","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlShmPool","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlShm","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlBuffer","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDataOffer","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDataSource","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlDataDevice","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for DndAction","synthetic":true,"types":[]},{"text":"impl Sync for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlShell","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Resize","synthetic":true,"types":[]},{"text":"impl Sync for Transient","synthetic":true,"types":[]},{"text":"impl Sync for WlShellSurface","synthetic":true,"types":[]},{"text":"impl Sync for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlSurface","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for WlSeat","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlPointer","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Axis","synthetic":true,"types":[]},{"text":"impl Sync for AxisSource","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlKeyboard","synthetic":true,"types":[]},{"text":"impl Sync for KeymapFormat","synthetic":true,"types":[]},{"text":"impl Sync for KeyState","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlTouch","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for WlOutput","synthetic":true,"types":[]},{"text":"impl Sync for Subpixel","synthetic":true,"types":[]},{"text":"impl Sync for Transform","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlRegion","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlSubsurface","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WlEglSurface","synthetic":false,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl Sync for AnonymousObject","synthetic":true,"types":[]},{"text":"impl Sync for NoMessage","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; Sync for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; Sync for ObjectMap&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Socket","synthetic":true,"types":[]},{"text":"impl Sync for BufferedSocket","synthetic":true,"types":[]},{"text":"impl Sync for UserDataMap","synthetic":true,"types":[]},{"text":"impl Sync for MessageDesc","synthetic":true,"types":[]},{"text":"impl Sync for Message","synthetic":true,"types":[]},{"text":"impl Sync for ArgumentType","synthetic":true,"types":[]},{"text":"impl Sync for Argument","synthetic":true,"types":[]},{"text":"impl Sync for MessageWriteError","synthetic":true,"types":[]},{"text":"impl Sync for MessageParseError","synthetic":true,"types":[]},{"text":"impl Sync for UserData","synthetic":false,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl Sync for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for PresentMethod","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for Capability","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl Sync for Source","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl Sync for Source","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl Sync for ButtonState","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl Sync for ContentHint","synthetic":true,"types":[]},{"text":"impl Sync for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Sync for PreeditStyle","synthetic":true,"types":[]},{"text":"impl Sync for TextDirection","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ContentHint","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl Sync for ChangeCause","synthetic":true,"types":[]},{"text":"impl Sync for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Mode","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgShell","synthetic":true,"types":[]},{"text":"impl Sync for Version","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgSurface","synthetic":true,"types":[]},{"text":"impl Sync for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgPopup","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for Gravity","synthetic":true,"types":[]},{"text":"impl Sync for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl Sync for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for CancelReason","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl !Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Layer","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpPresentation","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl Sync for Kind","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgWmBase","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Sync for XdgPositioner","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for Gravity","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgSurface","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgToplevel","synthetic":true,"types":[]},{"text":"impl Sync for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for XdgPopup","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpViewporter","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WpViewport","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Request","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl !Sync for wl_message","synthetic":true,"types":[]},{"text":"impl !Sync for wl_interface","synthetic":true,"types":[]},{"text":"impl !Sync for wl_list","synthetic":true,"types":[]},{"text":"impl !Sync for wl_array","synthetic":true,"types":[]},{"text":"impl !Sync for wl_argument","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_CLIENT_OPTION","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_CLIENT_HANDLE","synthetic":true,"types":[]},{"text":"impl Sync for wl_proxy","synthetic":true,"types":[]},{"text":"impl Sync for wl_display","synthetic":true,"types":[]},{"text":"impl Sync for wl_event_queue","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_EGL_OPTION","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_EGL_HANDLE","synthetic":true,"types":[]},{"text":"impl Sync for wl_egl_window","synthetic":true,"types":[]},{"text":"impl Sync for wl_cursor_image","synthetic":true,"types":[]},{"text":"impl !Sync for wl_cursor","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_CURSOR_OPTION","synthetic":true,"types":[]},{"text":"impl Sync for WAYLAND_CURSOR_HANDLE","synthetic":true,"types":[]},{"text":"impl Sync for wl_cursor_theme","synthetic":true,"types":[]},{"text":"impl Sync for WaylandClient","synthetic":false,"types":[]},{"text":"impl Sync for WaylandEgl","synthetic":false,"types":[]},{"text":"impl Sync for WaylandCursor","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Sync for KeyboardInput","synthetic":true,"types":[]},{"text":"impl Sync for Touch","synthetic":true,"types":[]},{"text":"impl Sync for ModifiersState","synthetic":true,"types":[]},{"text":"impl Sync for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl Sync for MonitorId","synthetic":true,"types":[]},{"text":"impl Sync for Icon","synthetic":true,"types":[]},{"text":"impl Sync for Window","synthetic":true,"types":[]},{"text":"impl Sync for WindowId","synthetic":true,"types":[]},{"text":"impl Sync for DeviceId","synthetic":true,"types":[]},{"text":"impl !Sync for EventsLoop","synthetic":true,"types":[]},{"text":"impl Sync for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl Sync for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl !Sync for WindowBuilder","synthetic":true,"types":[]},{"text":"impl Sync for WindowAttributes","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for WindowEvent","synthetic":true,"types":[]},{"text":"impl Sync for DeviceEvent","synthetic":true,"types":[]},{"text":"impl Sync for TouchPhase","synthetic":true,"types":[]},{"text":"impl Sync for ElementState","synthetic":true,"types":[]},{"text":"impl Sync for MouseButton","synthetic":true,"types":[]},{"text":"impl Sync for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl Sync for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl Sync for BadIcon","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlow","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for MouseCursor","synthetic":true,"types":[]},{"text":"impl Sync for LogicalPosition","synthetic":true,"types":[]},{"text":"impl Sync for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl Sync for LogicalSize","synthetic":true,"types":[]},{"text":"impl Sync for PhysicalSize","synthetic":true,"types":[]},{"text":"impl Sync for XNotSupported","synthetic":true,"types":[]},{"text":"impl Sync for WindowType","synthetic":true,"types":[]},{"text":"impl Sync for WaylandTheme","synthetic":true,"types":[]}];
implementors["x11_clipboard"] = [{"text":"impl Sync for Atoms","synthetic":true,"types":[]},{"text":"impl !Sync for Clipboard","synthetic":true,"types":[]},{"text":"impl Sync for Context","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["x11_dl"] = [{"text":"impl Sync for OpenError","synthetic":true,"types":[]},{"text":"impl Sync for OpenErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for _XcmsCCC","synthetic":true,"types":[]},{"text":"impl Sync for XcmsColor","synthetic":true,"types":[]},{"text":"impl Sync for _XcmsColorSpace","synthetic":true,"types":[]},{"text":"impl Sync for _XcmsFunctionSet","synthetic":true,"types":[]},{"text":"impl Sync for _XkbAction","synthetic":true,"types":[]},{"text":"impl Sync for _XkbBounds","synthetic":true,"types":[]},{"text":"impl Sync for _XkbChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbClientMapRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbColor","synthetic":true,"types":[]},{"text":"impl Sync for _XkbComponentList","synthetic":true,"types":[]},{"text":"impl Sync for _XkbComponentNames","synthetic":true,"types":[]},{"text":"impl Sync for _XkbControls","synthetic":true,"types":[]},{"text":"impl Sync for _XkbControlsChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbControlsNotify","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDeviceChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDeviceInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDeviceLedInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XkbDoodad","synthetic":true,"types":[]},{"text":"impl Sync for _XkbExtensionDeviceNotify","synthetic":true,"types":[]},{"text":"impl Sync for _XkbGeometry","synthetic":true,"types":[]},{"text":"impl Sync for _XkbGeometrySizes","synthetic":true,"types":[]},{"text":"impl Sync for _XkbIndicatorMapRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKey","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKeyType","synthetic":true,"types":[]},{"text":"impl Sync for _XkbMapChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbMods","synthetic":true,"types":[]},{"text":"impl Sync for _XkbNameChanges","synthetic":true,"types":[]},{"text":"impl Sync for _XkbNamesNotify","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOutline","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOverlay","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOverlayKey","synthetic":true,"types":[]},{"text":"impl Sync for _XkbOverlayRow","synthetic":true,"types":[]},{"text":"impl Sync for _XkbProperty","synthetic":true,"types":[]},{"text":"impl Sync for _XkbRow","synthetic":true,"types":[]},{"text":"impl Sync for _XkbSection","synthetic":true,"types":[]},{"text":"impl Sync for _XkbServerMapRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbShape","synthetic":true,"types":[]},{"text":"impl Sync for _XkbSymInterpretRec","synthetic":true,"types":[]},{"text":"impl !Sync for XAnyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XButtonEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCirculateEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCirculateRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XClientMessageEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XColormapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XConfigureEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XConfigureRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCreateWindowEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XCrossingEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XDestroyWindowEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XErrorEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XExposeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XFocusChangeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XGraphicsExposeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XGravityEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XKeyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XKeymapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMappingEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMapRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XMotionEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XNoExposeEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XPropertyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XReparentEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XResizeRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XSelectionClearEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XSelectionEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XSelectionRequestEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XUnmapEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XVisibilityEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbCompatMapRec","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbDesc","synthetic":true,"types":[]},{"text":"impl Sync for _XkbIndicatorRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKeyAliasRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbKeyNameRec","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbNamesRec","synthetic":true,"types":[]},{"text":"impl Sync for _XkbStateRec","synthetic":true,"types":[]},{"text":"impl !Sync for XkbAnyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbNewKeyboardNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbStateNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbControlsNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbIndicatorNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbNamesNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbCompatMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbBellNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbActionMessageEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XkbAccessXNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for _XkbExtensionDeviceNotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for XkbEvent","synthetic":true,"types":[]},{"text":"impl !Sync for Depth","synthetic":true,"types":[]},{"text":"impl !Sync for Screen","synthetic":true,"types":[]},{"text":"impl !Sync for ScreenFormat","synthetic":true,"types":[]},{"text":"impl !Sync for Visual","synthetic":true,"types":[]},{"text":"impl Sync for XArc","synthetic":true,"types":[]},{"text":"impl Sync for XChar2b","synthetic":true,"types":[]},{"text":"impl Sync for XCharStruct","synthetic":true,"types":[]},{"text":"impl !Sync for XClassHint","synthetic":true,"types":[]},{"text":"impl Sync for XColor","synthetic":true,"types":[]},{"text":"impl !Sync for XComposeStatus","synthetic":true,"types":[]},{"text":"impl Sync for XExtCodes","synthetic":true,"types":[]},{"text":"impl !Sync for XExtData","synthetic":true,"types":[]},{"text":"impl Sync for XFontProp","synthetic":true,"types":[]},{"text":"impl Sync for XFontSetExtents","synthetic":true,"types":[]},{"text":"impl !Sync for XFontStruct","synthetic":true,"types":[]},{"text":"impl Sync for XGCValues","synthetic":true,"types":[]},{"text":"impl !Sync for XGenericEventCookie","synthetic":true,"types":[]},{"text":"impl !Sync for XHostAddress","synthetic":true,"types":[]},{"text":"impl Sync for XIconSize","synthetic":true,"types":[]},{"text":"impl !Sync for XImage","synthetic":true,"types":[]},{"text":"impl Sync for XKeyboardControl","synthetic":true,"types":[]},{"text":"impl Sync for XKeyboardState","synthetic":true,"types":[]},{"text":"impl !Sync for XmbTextItem","synthetic":true,"types":[]},{"text":"impl !Sync for XModifierKeymap","synthetic":true,"types":[]},{"text":"impl !Sync for XOMCharSetList","synthetic":true,"types":[]},{"text":"impl Sync for XPixmapFormatValues","synthetic":true,"types":[]},{"text":"impl Sync for XPoint","synthetic":true,"types":[]},{"text":"impl Sync for XRectangle","synthetic":true,"types":[]},{"text":"impl !Sync for XrmOptionDescRec","synthetic":true,"types":[]},{"text":"impl !Sync for XrmValue","synthetic":true,"types":[]},{"text":"impl Sync for XSegment","synthetic":true,"types":[]},{"text":"impl Sync for XSetWindowAttributes","synthetic":true,"types":[]},{"text":"impl Sync for XSizeHints","synthetic":true,"types":[]},{"text":"impl Sync for XStandardColormap","synthetic":true,"types":[]},{"text":"impl !Sync for XTextItem","synthetic":true,"types":[]},{"text":"impl !Sync for XTextItem16","synthetic":true,"types":[]},{"text":"impl !Sync for XTextProperty","synthetic":true,"types":[]},{"text":"impl Sync for XTimeCoord","synthetic":true,"types":[]},{"text":"impl !Sync for XVisualInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XwcTextItem","synthetic":true,"types":[]},{"text":"impl !Sync for XWindowAttributes","synthetic":true,"types":[]},{"text":"impl Sync for XWindowChanges","synthetic":true,"types":[]},{"text":"impl Sync for XWMHints","synthetic":true,"types":[]},{"text":"impl !Sync for XIMCallback","synthetic":true,"types":[]},{"text":"impl !Sync for XIMPreeditDrawCallbackStruct","synthetic":true,"types":[]},{"text":"impl Sync for XIMPreeditCaretCallbackStruct","synthetic":true,"types":[]},{"text":"impl !Sync for XIMText","synthetic":true,"types":[]},{"text":"impl !Sync for XICCallback","synthetic":true,"types":[]},{"text":"impl Sync for AspectRatio","synthetic":true,"types":[]},{"text":"impl Sync for ClientMessageData","synthetic":true,"types":[]},{"text":"impl Sync for ImageFns","synthetic":true,"types":[]},{"text":"impl !Sync for XEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIMTextString","synthetic":true,"types":[]},{"text":"impl Sync for _XDisplay","synthetic":true,"types":[]},{"text":"impl Sync for xError","synthetic":true,"types":[]},{"text":"impl Sync for xEvent","synthetic":true,"types":[]},{"text":"impl Sync for _XGC","synthetic":true,"types":[]},{"text":"impl Sync for _XIC","synthetic":true,"types":[]},{"text":"impl Sync for _XIM","synthetic":true,"types":[]},{"text":"impl Sync for _XRegion","synthetic":true,"types":[]},{"text":"impl Sync for _XOC","synthetic":true,"types":[]},{"text":"impl Sync for _XOM","synthetic":true,"types":[]},{"text":"impl Sync for _XrmHashBucketRec","synthetic":true,"types":[]},{"text":"impl Sync for XkbKbdDpyStateRec","synthetic":true,"types":[]},{"text":"impl Sync for XIMCaretDirection","synthetic":true,"types":[]},{"text":"impl Sync for XIMCaretStyle","synthetic":true,"types":[]},{"text":"impl Sync for __GLXcontextRec","synthetic":true,"types":[]},{"text":"impl Sync for __GLXFBConfigRec","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorAnimate","synthetic":true,"types":[]},{"text":"impl Sync for _XcursorChunkHeader","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorComment","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorComments","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorCursors","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorFile","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorFileHeader","synthetic":true,"types":[]},{"text":"impl Sync for _XcursorFileToc","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorImage","synthetic":true,"types":[]},{"text":"impl !Sync for _XcursorImages","synthetic":true,"types":[]},{"text":"impl Sync for XF86VidModeGamma","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeModeInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeModeLine","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeMonitor","synthetic":true,"types":[]},{"text":"impl Sync for XF86VidModeSyncRange","synthetic":true,"types":[]},{"text":"impl !Sync for XF86VidModeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XftFont","synthetic":true,"types":[]},{"text":"impl Sync for XftColor","synthetic":true,"types":[]},{"text":"impl Sync for XftCharSpec","synthetic":true,"types":[]},{"text":"impl !Sync for XftCharFontSpec","synthetic":true,"types":[]},{"text":"impl !Sync for XftFontSet","synthetic":true,"types":[]},{"text":"impl Sync for XftGlyphSpec","synthetic":true,"types":[]},{"text":"impl !Sync for XftGlyphFontSpec","synthetic":true,"types":[]},{"text":"impl Sync for FT_FaceRec","synthetic":true,"types":[]},{"text":"impl Sync for FcCharSet","synthetic":true,"types":[]},{"text":"impl Sync for FcPattern","synthetic":true,"types":[]},{"text":"impl Sync for FcEndian","synthetic":true,"types":[]},{"text":"impl Sync for FcResult","synthetic":true,"types":[]},{"text":"impl Sync for XftFontInfo","synthetic":true,"types":[]},{"text":"impl Sync for XftDraw","synthetic":true,"types":[]},{"text":"impl Sync for XftPattern","synthetic":true,"types":[]},{"text":"impl Sync for XineramaScreenInfo","synthetic":true,"types":[]},{"text":"impl Sync for XPanoramiXInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XDevice","synthetic":true,"types":[]},{"text":"impl Sync for XDeviceControl","synthetic":true,"types":[]},{"text":"impl !Sync for XDeviceInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XDeviceState","synthetic":true,"types":[]},{"text":"impl !Sync for XDeviceTimeCoord","synthetic":true,"types":[]},{"text":"impl Sync for XExtensionVersion","synthetic":true,"types":[]},{"text":"impl Sync for XFeedbackControl","synthetic":true,"types":[]},{"text":"impl Sync for XFeedbackState","synthetic":true,"types":[]},{"text":"impl Sync for XInputClass","synthetic":true,"types":[]},{"text":"impl Sync for XInputClassInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XAnyClassinfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIAddMasterInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIRemoveMasterInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIAttachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIDetachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIAnyHierarchyChangeInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIModifierState","synthetic":true,"types":[]},{"text":"impl !Sync for XIButtonState","synthetic":true,"types":[]},{"text":"impl !Sync for XIValuatorState","synthetic":true,"types":[]},{"text":"impl !Sync for XIEventMask","synthetic":true,"types":[]},{"text":"impl Sync for XIAnyClassInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIButtonClassInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIKeyClassInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIValuatorClassInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIScrollClassInfo","synthetic":true,"types":[]},{"text":"impl Sync for XITouchClassInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIDeviceInfo","synthetic":true,"types":[]},{"text":"impl Sync for XIGrabModifiers","synthetic":true,"types":[]},{"text":"impl Sync for XIBarrierReleasePointerInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIEvent","synthetic":true,"types":[]},{"text":"impl Sync for XIHierarchyInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XIHierarchyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIDeviceChangedEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIDeviceEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIRawEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIEnterEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIPropertyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XITouchOwnershipEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XIBarrierEvent","synthetic":true,"types":[]},{"text":"impl Sync for _AtomRec","synthetic":true,"types":[]},{"text":"impl Sync for _XmuArea","synthetic":true,"types":[]},{"text":"impl Sync for _XmuDisplayQueue","synthetic":true,"types":[]},{"text":"impl Sync for _XmuDisplayQueueEntry","synthetic":true,"types":[]},{"text":"impl Sync for _XmuScanline","synthetic":true,"types":[]},{"text":"impl Sync for _XmuSegment","synthetic":true,"types":[]},{"text":"impl Sync for _XmuWidgetNode","synthetic":true,"types":[]},{"text":"impl !Sync for XRecordClientInfo","synthetic":true,"types":[]},{"text":"impl Sync for XRecordExtRange","synthetic":true,"types":[]},{"text":"impl !Sync for XRecordInterceptData","synthetic":true,"types":[]},{"text":"impl Sync for XRecordRange","synthetic":true,"types":[]},{"text":"impl Sync for XRecordRange8","synthetic":true,"types":[]},{"text":"impl Sync for XRecordRange16","synthetic":true,"types":[]},{"text":"impl !Sync for XRecordState","synthetic":true,"types":[]},{"text":"impl Sync for _XAnimCursor","synthetic":true,"types":[]},{"text":"impl Sync for _XCircle","synthetic":true,"types":[]},{"text":"impl Sync for _XConicalGradient","synthetic":true,"types":[]},{"text":"impl !Sync for _XFilters","synthetic":true,"types":[]},{"text":"impl !Sync for _XGlyphElt8","synthetic":true,"types":[]},{"text":"impl !Sync for _XGlyphElt16","synthetic":true,"types":[]},{"text":"impl !Sync for _XGlyphElt32","synthetic":true,"types":[]},{"text":"impl Sync for _XGlyphInfo","synthetic":true,"types":[]},{"text":"impl Sync for _XIndexValue","synthetic":true,"types":[]},{"text":"impl Sync for _XLinearGradient","synthetic":true,"types":[]},{"text":"impl Sync for _XLineFixed","synthetic":true,"types":[]},{"text":"impl Sync for _XPointDouble","synthetic":true,"types":[]},{"text":"impl Sync for _XPointFixed","synthetic":true,"types":[]},{"text":"impl Sync for _XRadialGradient","synthetic":true,"types":[]},{"text":"impl Sync for XRenderColor","synthetic":true,"types":[]},{"text":"impl Sync for XRenderDirectFormat","synthetic":true,"types":[]},{"text":"impl Sync for XRenderPictFormat","synthetic":true,"types":[]},{"text":"impl Sync for _XRenderPictureAttributes","synthetic":true,"types":[]},{"text":"impl Sync for _XSpanFix","synthetic":true,"types":[]},{"text":"impl Sync for _XTrap","synthetic":true,"types":[]},{"text":"impl Sync for _XTrapezoid","synthetic":true,"types":[]},{"text":"impl Sync for _XTriangle","synthetic":true,"types":[]},{"text":"impl Sync for _XTransform","synthetic":true,"types":[]},{"text":"impl Sync for XScreenSaverInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XScreenSaverNotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for Arg","synthetic":true,"types":[]},{"text":"impl Sync for SubstitutionRec","synthetic":true,"types":[]},{"text":"impl Sync for _TranslationData","synthetic":true,"types":[]},{"text":"impl Sync for _WidgetClassRec","synthetic":true,"types":[]},{"text":"impl Sync for _WidgetRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtActionsRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtAppStruct","synthetic":true,"types":[]},{"text":"impl Sync for _XtCallbackRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtCheckpointTokenRec","synthetic":true,"types":[]},{"text":"impl Sync for XtConvertArgRec","synthetic":true,"types":[]},{"text":"impl Sync for _XtResource","synthetic":true,"types":[]},{"text":"impl Sync for XtWidgetGeometry","synthetic":true,"types":[]},{"text":"impl Sync for XRRScreenSize","synthetic":true,"types":[]},{"text":"impl Sync for XRRScreenConfiguration","synthetic":true,"types":[]},{"text":"impl !Sync for XRRModeInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRScreenResources","synthetic":true,"types":[]},{"text":"impl !Sync for XRROutputInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRPropertyInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcGamma","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcTransformAttributes","synthetic":true,"types":[]},{"text":"impl Sync for XRRPanning","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderResources","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRMonitorInfo","synthetic":true,"types":[]},{"text":"impl !Sync for XRRScreenChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRROutputChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRCrtcChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRROutputPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRProviderPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Sync for XRRResourceChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Sync for Xlib","synthetic":false,"types":[]},{"text":"impl Sync for Xext","synthetic":false,"types":[]},{"text":"impl Sync for Glx","synthetic":false,"types":[]},{"text":"impl Sync for Xcursor","synthetic":false,"types":[]},{"text":"impl Sync for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Sync for Xft","synthetic":false,"types":[]},{"text":"impl Sync for Xlib","synthetic":false,"types":[]},{"text":"impl Sync for XInput","synthetic":false,"types":[]},{"text":"impl Sync for XInput2","synthetic":false,"types":[]},{"text":"impl Sync for Xmu","synthetic":false,"types":[]},{"text":"impl Sync for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Sync for Xrender","synthetic":false,"types":[]},{"text":"impl Sync for Xss","synthetic":false,"types":[]},{"text":"impl Sync for Xt","synthetic":false,"types":[]},{"text":"impl Sync for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Sync for Xlib_xcb","synthetic":false,"types":[]},{"text":"impl Sync for Xrandr","synthetic":false,"types":[]},{"text":"impl Sync for Xrandr_2_2_0","synthetic":false,"types":[]}];
implementors["xcb"] = [{"text":"impl&lt;'a, T&gt; !Sync for StructPtr&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for QueryExtensionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ConnError","synthetic":true,"types":[]},{"text":"impl Sync for RequestError","synthetic":true,"types":[]},{"text":"impl Sync for ValueError","synthetic":true,"types":[]},{"text":"impl Sync for WindowError","synthetic":true,"types":[]},{"text":"impl Sync for PixmapError","synthetic":true,"types":[]},{"text":"impl Sync for AtomError","synthetic":true,"types":[]},{"text":"impl Sync for CursorError","synthetic":true,"types":[]},{"text":"impl Sync for FontError","synthetic":true,"types":[]},{"text":"impl Sync for MatchError","synthetic":true,"types":[]},{"text":"impl Sync for DrawableError","synthetic":true,"types":[]},{"text":"impl Sync for AccessError","synthetic":true,"types":[]},{"text":"impl Sync for AllocError","synthetic":true,"types":[]},{"text":"impl Sync for ColormapError","synthetic":true,"types":[]},{"text":"impl Sync for GContextError","synthetic":true,"types":[]},{"text":"impl Sync for IdChoiceError","synthetic":true,"types":[]},{"text":"impl Sync for NameError","synthetic":true,"types":[]},{"text":"impl Sync for LengthError","synthetic":true,"types":[]},{"text":"impl Sync for ImplementationError","synthetic":true,"types":[]},{"text":"impl Sync for Char2b","synthetic":true,"types":[]},{"text":"impl Sync for Point","synthetic":true,"types":[]},{"text":"impl Sync for Rectangle","synthetic":true,"types":[]},{"text":"impl Sync for Arc","synthetic":true,"types":[]},{"text":"impl Sync for Format","synthetic":true,"types":[]},{"text":"impl Sync for Visualtype","synthetic":true,"types":[]},{"text":"impl Sync for Timecoord","synthetic":true,"types":[]},{"text":"impl Sync for Fontprop","synthetic":true,"types":[]},{"text":"impl Sync for Charinfo","synthetic":true,"types":[]},{"text":"impl Sync for Segment","synthetic":true,"types":[]},{"text":"impl Sync for Coloritem","synthetic":true,"types":[]},{"text":"impl Sync for Rgb","synthetic":true,"types":[]},{"text":"impl Sync for PictFormatError","synthetic":true,"types":[]},{"text":"impl Sync for PictureError","synthetic":true,"types":[]},{"text":"impl Sync for PictOpError","synthetic":true,"types":[]},{"text":"impl Sync for GlyphSetError","synthetic":true,"types":[]},{"text":"impl Sync for GlyphError","synthetic":true,"types":[]},{"text":"impl Sync for Directformat","synthetic":true,"types":[]},{"text":"impl Sync for Pictforminfo","synthetic":true,"types":[]},{"text":"impl Sync for Pictvisual","synthetic":true,"types":[]},{"text":"impl Sync for Indexvalue","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for Pointfix","synthetic":true,"types":[]},{"text":"impl Sync for Linefix","synthetic":true,"types":[]},{"text":"impl Sync for Triangle","synthetic":true,"types":[]},{"text":"impl Sync for Trapezoid","synthetic":true,"types":[]},{"text":"impl Sync for Glyphinfo","synthetic":true,"types":[]},{"text":"impl Sync for Transform","synthetic":true,"types":[]},{"text":"impl Sync for Animcursorelt","synthetic":true,"types":[]},{"text":"impl Sync for Spanfix","synthetic":true,"types":[]},{"text":"impl Sync for Trap","synthetic":true,"types":[]},{"text":"impl Sync for BadRegionError","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_generic_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_generic_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_generic_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_ge_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_generic_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_void_cookie_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_auth_info_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_connection_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_extension_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_special_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_char2b_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_char2b_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_window_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_pixmap_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_cursor_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_font_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_gcontext_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_colormap_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_atom_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_drawable_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_fontable_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_visualid_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_timestamp_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_keysym_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_keycode_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_button_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_point_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_point_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_rectangle_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_rectangle_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_arc_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_arc_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_format_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_format_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_visualtype_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_visualtype_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_depth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_depth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_screen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_screen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_setup_request_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_setup_request_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_setup_failed_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_setup_failed_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_setup_authenticate_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_setup_authenticate_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_setup_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_setup_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_key_press_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_button_press_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_motion_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_enter_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_focus_in_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_keymap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_expose_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_graphics_exposure_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_no_exposure_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_visibility_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_create_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_destroy_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_unmap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_map_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_map_request_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_reparent_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_configure_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_configure_request_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_gravity_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_resize_request_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_circulate_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_property_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_selection_clear_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_selection_request_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_colormap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_client_message_data_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_client_message_data_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_client_message_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_mapping_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_ge_generic_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_request_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_value_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_create_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_window_attributes_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_window_attributes_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_destroy_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_destroy_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_reparent_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_map_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_map_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_unmap_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_unmap_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_configure_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_circulate_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_geometry_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_geometry_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_geometry_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_tree_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_tree_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_tree_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_intern_atom_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_intern_atom_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_intern_atom_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_atom_name_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_atom_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_atom_name_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_property_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_delete_property_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_property_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_property_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_property_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_properties_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_properties_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_properties_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_selection_owner_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_selection_owner_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_convert_selection_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_send_event_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_ungrab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_button_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_ungrab_button_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_active_pointer_grab_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_keyboard_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_keyboard_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_ungrab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_key_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_ungrab_key_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_allow_events_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_grab_server_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_ungrab_server_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_timecoord_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_timecoord_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_motion_events_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_motion_events_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_motion_events_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_translate_coordinates_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_translate_coordinates_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_translate_coordinates_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_warp_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_input_focus_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_input_focus_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_keymap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_keymap_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_keymap_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_open_font_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_close_font_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_fontprop_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_fontprop_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_charinfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_charinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_font_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_font_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_font_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_text_extents_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_text_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_text_extents_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_str_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_str_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_fonts_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_fonts_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_fonts_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_fonts_with_info_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_fonts_with_info_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_fonts_with_info_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_font_path_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_font_path_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_font_path_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_font_path_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_create_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_free_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_create_gc_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_gc_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_copy_gc_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_dashes_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_free_gc_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_clear_area_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_copy_area_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_copy_plane_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_point_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_line_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_segment_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_segment_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_segment_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_arc_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_fill_poly_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_fill_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_fill_arc_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_put_image_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_image_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_image_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_image_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_text_8_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_poly_text_16_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_image_text_8_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_image_text_16_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_create_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_free_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_copy_colormap_and_free_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_install_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_uninstall_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_installed_colormaps_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_installed_colormaps_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_installed_colormaps_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_named_color_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_named_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_named_color_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_cells_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_cells_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_cells_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_planes_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_planes_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_alloc_color_planes_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_free_colors_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_coloritem_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_coloritem_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_store_colors_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_store_named_color_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_rgb_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_rgb_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_colors_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_colors_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_colors_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_lookup_color_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_lookup_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_lookup_color_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_create_glyph_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_free_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_recolor_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_best_size_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_best_size_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_best_size_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_extension_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_extension_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_query_extension_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_extensions_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_extensions_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_extensions_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_keyboard_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_keyboard_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_keyboard_control_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_keyboard_control_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_bell_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_pointer_control_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_pointer_control_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_screen_saver_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_screen_saver_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_change_hosts_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_host_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_host_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_hosts_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_hosts_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_list_hosts_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_access_control_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_close_down_mode_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_kill_client_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_rotate_properties_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_force_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_set_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_get_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_no_operation_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_big_requests_enable_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_big_requests_enable_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_big_requests_enable_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_version_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_version_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_xid_range_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_xid_range_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_xid_range_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_xid_list_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_xid_list_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xc_misc_get_xid_list_reply_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_glyph_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_glyphset_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_picture_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_pictformat_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_fixed_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_pict_format_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_picture_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_pict_op_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_glyph_set_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_glyph_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_directformat_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_directformat_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_pictforminfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_pictforminfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_pictvisual_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_pictvisual_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_pictdepth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_render_pictdepth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_pictscreen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for xcb_render_pictscreen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_indexvalue_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_indexvalue_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_color_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_color_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_pointfix_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_pointfix_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_linefix_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_linefix_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_triangle_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_triangle_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_trapezoid_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_trapezoid_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_glyphinfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_glyphinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_pict_formats_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_pict_formats_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_pict_formats_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_pict_index_values_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_pict_index_values_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_pict_index_values_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_picture_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_change_picture_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_set_picture_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_free_picture_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_composite_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_trapezoids_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_triangles_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_tri_strip_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_tri_fan_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_reference_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_free_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_add_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_free_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_composite_glyphs_8_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_composite_glyphs_16_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_composite_glyphs_32_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_fill_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_transform_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_transform_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_set_picture_transform_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_filters_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_filters_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_query_filters_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_set_picture_filter_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_animcursorelt_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_animcursorelt_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_anim_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_spanfix_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_spanfix_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_trap_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_render_trap_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_add_traps_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_solid_fill_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_linear_gradient_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_radial_gradient_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_render_create_conical_gradient_request_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_shape_op_iterator_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_shape_kind_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_mask_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_combine_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_offset_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_query_extents_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_query_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_query_extents_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_select_input_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_input_selected_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_input_selected_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_input_selected_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_get_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_get_rectangles_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_shape_get_rectangles_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_select_selection_input_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_cursor_notify_event_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_select_cursor_input_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_image_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_image_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_image_reply_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_xfixes_region_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_bad_region_error_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_create_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_create_region_from_bitmap_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_create_region_from_window_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_create_region_from_gc_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_create_region_from_picture_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_destroy_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_set_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_copy_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_union_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_intersect_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_subtract_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_invert_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_translate_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_region_extents_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_fetch_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_fetch_region_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_fetch_region_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_set_gc_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_set_window_shape_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_set_picture_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_set_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_name_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_image_and_name_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_image_and_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_get_cursor_image_and_name_reply_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_change_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_change_cursor_by_name_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_expand_region_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_hide_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_show_cursor_request_t","synthetic":true,"types":[]},{"text":"impl !Sync for xcb_xfixes_barrier_iterator_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_create_pointer_barrier_request_t","synthetic":true,"types":[]},{"text":"impl Sync for xcb_xfixes_delete_pointer_barrier_request_t","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Event&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy&gt; Sync for Cookie&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for Reply&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Connection","synthetic":false,"types":[]}];
implementors["xdg"] = [{"text":"impl Sync for BaseDirectories","synthetic":true,"types":[]},{"text":"impl Sync for BaseDirectoriesError","synthetic":true,"types":[]},{"text":"impl Sync for FileFindIterator","synthetic":true,"types":[]}];
implementors["xi_unicode"] = [{"text":"impl&lt;'a&gt; Sync for LineBreakIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LineBreakLeafIter","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl Sync for ParserConfig","synthetic":true,"types":[]},{"text":"impl Sync for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Sync for TextPosition","synthetic":true,"types":[]},{"text":"impl Sync for XmlVersion","synthetic":true,"types":[]},{"text":"impl Sync for Namespace","synthetic":true,"types":[]},{"text":"impl Sync for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for XmlEvent","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EmitterError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()