(function() {var implementors = {};
implementors["addr2line"] = [{"text":"impl&lt;R&gt; Send for Context&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; !Send for FrameIter&lt;'ctx, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ctx, R&gt; Send for Frame&lt;'ctx, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FunctionName&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Location&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["adler"] = [{"text":"impl Send for Adler32","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl Send for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Send for AHasher","synthetic":true,"types":[]},{"text":"impl Send for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O&gt; Send for Id&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Additive","synthetic":true,"types":[]},{"text":"impl Send for Multiplicative","synthetic":true,"types":[]}];
implementors["alsa_sys"] = [{"text":"impl !Send for snd_dlsym_link","synthetic":true,"types":[]},{"text":"impl Send for snd_async_handler_t","synthetic":true,"types":[]},{"text":"impl Send for snd_shm_area","synthetic":true,"types":[]},{"text":"impl Send for snd_input_t","synthetic":true,"types":[]},{"text":"impl Send for snd_output_t","synthetic":true,"types":[]},{"text":"impl Send for snd_config_t","synthetic":true,"types":[]},{"text":"impl Send for Struct__snd_config_iterator","synthetic":true,"types":[]},{"text":"impl Send for snd_config_update_t","synthetic":true,"types":[]},{"text":"impl !Send for snd_devname_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_hw_params_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_sw_params_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_status_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_access_mask_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_format_mask_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_subformat_mask_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_t","synthetic":true,"types":[]},{"text":"impl !Send for snd_pcm_channel_area_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_sync_id_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_scope_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_chmap_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_chmap_query_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_hook_t","synthetic":true,"types":[]},{"text":"impl Send for snd_pcm_scope_ops_t","synthetic":true,"types":[]},{"text":"impl Send for snd_rawmidi_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_rawmidi_params_t","synthetic":true,"types":[]},{"text":"impl Send for snd_rawmidi_status_t","synthetic":true,"types":[]},{"text":"impl Send for snd_rawmidi_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_id_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_ginfo_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_gparams_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_gstatus_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_params_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_status_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_read_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_tread_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_query_t","synthetic":true,"types":[]},{"text":"impl Send for snd_timer_t","synthetic":true,"types":[]},{"text":"impl Send for snd_hwdep_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_hwdep_dsp_status_t","synthetic":true,"types":[]},{"text":"impl Send for snd_hwdep_dsp_image_t","synthetic":true,"types":[]},{"text":"impl Send for snd_hwdep_t","synthetic":true,"types":[]},{"text":"impl Send for snd_aes_iec958_t","synthetic":true,"types":[]},{"text":"impl Send for snd_ctl_card_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_ctl_elem_id_t","synthetic":true,"types":[]},{"text":"impl Send for snd_ctl_elem_list_t","synthetic":true,"types":[]},{"text":"impl Send for snd_ctl_elem_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_ctl_elem_value_t","synthetic":true,"types":[]},{"text":"impl Send for snd_ctl_event_t","synthetic":true,"types":[]},{"text":"impl Send for snd_ctl_t","synthetic":true,"types":[]},{"text":"impl Send for snd_sctl_t","synthetic":true,"types":[]},{"text":"impl Send for snd_hctl_elem_t","synthetic":true,"types":[]},{"text":"impl Send for snd_hctl_t","synthetic":true,"types":[]},{"text":"impl Send for snd_mixer_t","synthetic":true,"types":[]},{"text":"impl Send for snd_mixer_class_t","synthetic":true,"types":[]},{"text":"impl Send for snd_mixer_elem_t","synthetic":true,"types":[]},{"text":"impl !Send for snd_mixer_selem_regopt","synthetic":true,"types":[]},{"text":"impl Send for snd_mixer_selem_id_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_addr_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_connect_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_real_time_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_timestamp_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_ev_note_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_ev_ctrl_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_ev_raw8_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_ev_raw32_t","synthetic":true,"types":[]},{"text":"impl !Send for snd_seq_ev_ext_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_result_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_queue_skew_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_ev_queue_control_t","synthetic":true,"types":[]},{"text":"impl Send for Union_Unnamed9","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_event_t","synthetic":true,"types":[]},{"text":"impl Send for Union_Unnamed10","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_system_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_client_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_client_pool_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_port_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_port_subscribe_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_query_subscribe_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_queue_info_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_queue_status_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_queue_tempo_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_queue_timer_t","synthetic":true,"types":[]},{"text":"impl Send for snd_seq_remove_events_t","synthetic":true,"types":[]},{"text":"impl Send for snd_midi_event_t","synthetic":true,"types":[]},{"text":"impl&lt;Storage, Align&gt; Send for __BindgenBitfieldUnit&lt;Storage, Align&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Align: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Storage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for _snd_pcm_audio_tstamp_config","synthetic":true,"types":[]},{"text":"impl Send for _snd_pcm_audio_tstamp_report","synthetic":true,"types":[]}];
implementors["amethyst"] = [{"text":"impl&lt;'a, T, E&nbsp;=&nbsp;StateEvent&lt;StringBindings&gt;, R&nbsp;=&nbsp;StateEventReader&lt;StringBindings&gt;&gt; !Send for CoreApplication&lt;'a, T, E, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T, E, R&gt; Send for ApplicationBuilder&lt;S, T, E, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CallbackQueue","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for GameData&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for GameDataBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for StdoutLog","synthetic":true,"types":[]},{"text":"impl Send for LoggerConfig","synthetic":true,"types":[]},{"text":"impl Send for Logger","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for StateData&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !Send for Trans&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, E&gt; !Send for StateMachine&lt;'a, T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StateEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StateEventReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_animation"] = [{"text":"impl&lt;'a&gt; Send for VertexSkinningBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SamplingBundle&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; Send for AnimationBundle&lt;'a, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MaterialPrimitive","synthetic":true,"types":[]},{"text":"impl Send for MaterialChannel","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AnimationPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for AnimationSetPrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AnimationHierarchyPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for AnimatablePrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BlendMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sampler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RestState&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AnimationHierarchy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Animation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ControlState","synthetic":true,"types":[]},{"text":"impl Send for EndControl","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SamplerControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SamplerControlSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StepDirection","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AnimationCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AnimationControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DeferStartRelation","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for AnimationControlSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for AnimationSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Joint","synthetic":true,"types":[]},{"text":"impl Send for Skin","synthetic":true,"types":[]},{"text":"impl Send for JointPrefab","synthetic":true,"types":[]},{"text":"impl Send for SkinPrefab","synthetic":true,"types":[]},{"text":"impl Send for SkinnablePrefab","synthetic":true,"types":[]},{"text":"impl Send for VertexSkinningSystem","synthetic":true,"types":[]},{"text":"impl Send for SpriteRenderPrimitive","synthetic":true,"types":[]},{"text":"impl Send for SpriteRenderChannel","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for AnimationControlSystem&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SamplerInterpolationSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TransformChannel","synthetic":true,"types":[]},{"text":"impl Send for UiTransformChannel","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SamplerPrimitive&lt;S&gt;","synthetic":true,"types":[]}];
implementors["amethyst_assets"] = [{"text":"impl&lt;D&gt; Send for FormatValue&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Cache&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RonFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Send for AssetLoaderSystemData&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Loader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PrefabLoaderSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PrefabLoaderSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Prefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; Send for AssetPrefab&lt;A, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for PrefabLoader&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Completion","synthetic":true,"types":[]},{"text":"impl Send for ProgressCounter","synthetic":true,"types":[]},{"text":"impl Send for HotReloadBundle","synthetic":true,"types":[]},{"text":"impl Send for HotReloadStrategy","synthetic":true,"types":[]},{"text":"impl Send for HotReloadSystem","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for SingleFile&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Send for Directory","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for AssetStorage&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ProcessingState&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Processor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized&gt; Send for Handle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for WeakHandle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_audio"] = [{"text":"impl Send for Output","synthetic":true,"types":[]},{"text":"impl Send for OutputIterator","synthetic":true,"types":[]},{"text":"impl Send for AudioBundle","synthetic":true,"types":[]},{"text":"impl Send for AudioEmitter","synthetic":true,"types":[]},{"text":"impl Send for AudioListener","synthetic":true,"types":[]},{"text":"impl Send for AudioPrefab","synthetic":true,"types":[]},{"text":"impl Send for WavFormat","synthetic":true,"types":[]},{"text":"impl Send for OggFormat","synthetic":true,"types":[]},{"text":"impl Send for FlacFormat","synthetic":true,"types":[]},{"text":"impl Send for Mp3Format","synthetic":true,"types":[]},{"text":"impl Send for AudioSink","synthetic":true,"types":[]},{"text":"impl Send for Source","synthetic":true,"types":[]},{"text":"impl Send for AudioSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for DjSystemDesc&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; Send for DjSystem&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecoderError","synthetic":true,"types":[]}];
implementors["amethyst_config"] = [{"text":"impl Send for ConfigError","synthetic":true,"types":[]}];
implementors["amethyst_controls"] = [{"text":"impl&lt;T&gt; Send for FlyControlBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ArcBallControlBundle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for FlyControlTag","synthetic":true,"types":[]},{"text":"impl Send for ArcBallControlTag","synthetic":true,"types":[]},{"text":"impl Send for ControlTagPrefab","synthetic":true,"types":[]},{"text":"impl Send for WindowFocus","synthetic":true,"types":[]},{"text":"impl Send for HideCursor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FlyMovementSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FlyMovementSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ArcBallRotationSystem","synthetic":true,"types":[]},{"text":"impl Send for FreeRotationSystem","synthetic":true,"types":[]},{"text":"impl Send for FreeRotationSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for MouseFocusUpdateSystem","synthetic":true,"types":[]},{"text":"impl Send for MouseFocusUpdateSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for CursorHideSystem","synthetic":true,"types":[]},{"text":"impl Send for CursorHideSystemDesc","synthetic":true,"types":[]}];
implementors["amethyst_core"] = [{"text":"impl Send for AddBarrier","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for AddSystem&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; Send for AddSystemDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for AddThreadLocal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; Send for AddThreadLocalDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for AddBundle&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FrameRateLimitStrategy","synthetic":true,"types":[]},{"text":"impl Send for FrameRateLimitConfig","synthetic":true,"types":[]},{"text":"impl Send for FrameLimiter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Plane&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl Send for Stopwatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TransformBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Parent","synthetic":true,"types":[]},{"text":"impl Send for Transform","synthetic":true,"types":[]},{"text":"impl Send for TransformSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for TransformSystem","synthetic":true,"types":[]},{"text":"impl Send for Axis2","synthetic":true,"types":[]},{"text":"impl Send for Axis3","synthetic":true,"types":[]},{"text":"impl Send for Hidden","synthetic":true,"types":[]},{"text":"impl Send for HiddenPropagate","synthetic":true,"types":[]},{"text":"impl Send for HideHierarchySystemDesc","synthetic":true,"types":[]},{"text":"impl Send for HideHierarchySystem","synthetic":true,"types":[]},{"text":"impl Send for Named","synthetic":true,"types":[]},{"text":"impl&lt;S, V&gt; Send for Pausable&lt;S, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_dynamic_ui"] = [{"text":"impl Send for Fonts","synthetic":true,"types":[]},{"text":"impl Send for Textures","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for DynamicUiBundle&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WidgetConstraint","synthetic":true,"types":[]},{"text":"impl Send for PaddableConstraint","synthetic":true,"types":[]},{"text":"impl Send for WidgetConstraintBuilder","synthetic":true,"types":[]},{"text":"impl Send for PaddableConstraintBuilder","synthetic":true,"types":[]},{"text":"impl Send for Padding","synthetic":true,"types":[]},{"text":"impl Send for CenteredLayout","synthetic":true,"types":[]},{"text":"impl Send for LinearLayoutData","synthetic":true,"types":[]},{"text":"impl Send for FlowDirection","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl Send for ItemAlignment","synthetic":true,"types":[]},{"text":"impl Send for LinearLayout","synthetic":true,"types":[]},{"text":"impl Send for LayoutVars","synthetic":true,"types":[]},{"text":"impl Send for VarType","synthetic":true,"types":[]},{"text":"impl !Send for Layout","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl Send for ExactFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariableEditable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EditVariable","synthetic":true,"types":[]},{"text":"impl Send for LAYOUT","synthetic":true,"types":[]},{"text":"impl Send for ExtraButtonData","synthetic":true,"types":[]},{"text":"impl Send for UiCachedImage","synthetic":true,"types":[]},{"text":"impl Send for UiCachedText","synthetic":true,"types":[]},{"text":"impl Send for FontFamilyPrefab","synthetic":true,"types":[]},{"text":"impl Send for HtmlTextData","synthetic":true,"types":[]},{"text":"impl Send for CalculatedDimensions","synthetic":true,"types":[]},{"text":"impl Send for LayoutIdentifier","synthetic":true,"types":[]},{"text":"impl Send for Tinted","synthetic":true,"types":[]},{"text":"impl !Send for DynamicLayoutData","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Send for DynamicUiLoader&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ToLayoutElement&gt;::PrefabData: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiTextPrefab","synthetic":true,"types":[]},{"text":"impl Send for ResizeSystem","synthetic":true,"types":[]},{"text":"impl Send for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for UiButtonTintAction","synthetic":true,"types":[]},{"text":"impl Send for UiButtonTintActionType","synthetic":true,"types":[]},{"text":"impl Send for UiButtonTintRetrigger","synthetic":true,"types":[]},{"text":"impl !Send for LimnSolver","synthetic":true,"types":[]},{"text":"impl Send for LayoutManager","synthetic":true,"types":[]},{"text":"impl Send for SoundEvent","synthetic":true,"types":[]},{"text":"impl Send for UiFmodRetrigger","synthetic":true,"types":[]},{"text":"impl Send for UiFmodSystem","synthetic":true,"types":[]},{"text":"impl Send for UiFmodSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for Styles","synthetic":true,"types":[]},{"text":"impl Send for FontFamily","synthetic":true,"types":[]},{"text":"impl Send for HtmlText","synthetic":true,"types":[]},{"text":"impl Send for UiButtonTintSystem","synthetic":true,"types":[]},{"text":"impl Send for UiButtonTintSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for SizeConstraints","synthetic":true,"types":[]},{"text":"impl Send for Properties","synthetic":true,"types":[]},{"text":"impl Send for ModalData","synthetic":true,"types":[]},{"text":"impl Send for NoCustomElements","synthetic":true,"types":[]},{"text":"impl Send for UiExtraTextData","synthetic":true,"types":[]},{"text":"impl Send for ImageButtonData","synthetic":true,"types":[]},{"text":"impl Send for I18nData","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for LayoutElement&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Rect","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for DynamicUiFormat&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl Send for DynamicLayout","synthetic":false,"types":[]}];
implementors["amethyst_error"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Causes&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["amethyst_fmod"] = [{"text":"impl Send for FmodBundle","synthetic":true,"types":[]},{"text":"impl !Send for EventDescription","synthetic":true,"types":[]},{"text":"impl !Send for EventInstance","synthetic":true,"types":[]},{"text":"impl Send for StopMode","synthetic":true,"types":[]},{"text":"impl Send for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SoundBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Attributes3D","synthetic":true,"types":[]},{"text":"impl !Send for CoreSystem","synthetic":true,"types":[]},{"text":"impl Send for DriverInfo","synthetic":true,"types":[]},{"text":"impl Send for UpdateSystem","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for System","synthetic":false,"types":[]},{"text":"impl Send for Bank","synthetic":false,"types":[]}];
implementors["amethyst_input"] = [{"text":"impl Send for Axis","synthetic":true,"types":[]},{"text":"impl Send for StringBindings","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bindings&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BindingError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InputBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BindingsFileError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Button","synthetic":true,"types":[]},{"text":"impl Send for ControllerAxis","synthetic":true,"types":[]},{"text":"impl Send for ControllerButton","synthetic":true,"types":[]},{"text":"impl Send for ControllerEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InputEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InputHandler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MouseAxis","synthetic":true,"types":[]},{"text":"impl Send for ScrollDirection","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InputSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for InputSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_locale"] = [{"text":"impl Send for LocaleFormat","synthetic":true,"types":[]},{"text":"impl Send for Locale","synthetic":true,"types":[]}];
implementors["amethyst_network"] = [{"text":"impl Send for NetworkSimulationEvent","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for DeliveryRequirement","synthetic":true,"types":[]},{"text":"impl Send for UrgencyRequirement","synthetic":true,"types":[]},{"text":"impl Send for NetworkSimulationTimeSystem","synthetic":true,"types":[]},{"text":"impl Send for NetworkSimulationTime","synthetic":true,"types":[]},{"text":"impl Send for LaminarNetworkBundle","synthetic":true,"types":[]},{"text":"impl Send for LaminarSocketResource","synthetic":true,"types":[]},{"text":"impl Send for TcpNetworkBundle","synthetic":true,"types":[]},{"text":"impl Send for TcpStreamManagementSystem","synthetic":true,"types":[]},{"text":"impl Send for TcpConnectionListenerSystem","synthetic":true,"types":[]},{"text":"impl Send for TcpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl Send for TcpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl Send for TcpNetworkResource","synthetic":true,"types":[]},{"text":"impl Send for UdpNetworkBundle","synthetic":true,"types":[]},{"text":"impl Send for UdpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl Send for UdpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl Send for UdpSocketResource","synthetic":true,"types":[]},{"text":"impl Send for TransportResource","synthetic":true,"types":[]}];
implementors["amethyst_rendy"] = [{"text":"impl&lt;B, T&gt; Send for DrawBase3DDesc&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Send for DrawBase3D&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Base3DPassDef&gt;::TextureSet: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Send for DrawBase3DTransparentDesc&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Send for DrawBase3DTransparent&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DrawDebugLinesDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DrawDebugLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FlatPassDef","synthetic":true,"types":[]},{"text":"impl Send for DrawFlat2DDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DrawFlat2D&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DrawFlat2DTransparentDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DrawFlat2DTransparent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PbrPassDef","synthetic":true,"types":[]},{"text":"impl Send for ShadedPassDef","synthetic":true,"types":[]},{"text":"impl Send for DrawSkyboxDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DrawSkybox&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, C&gt; Send for TwoLevelBatch&lt;PK, SK, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, D&gt; Send for OrderedTwoLevelBatch&lt;PK, SK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; Send for OneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; Send for OrderedOneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Send for RenderingBundle&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Send for RenderPlan&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Send for TargetMetadata","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !Send for TargetPlanContext&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl Send for TargetImage","synthetic":true,"types":[]},{"text":"impl Send for ImageOptions","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for OutputColor&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for TargetPlanOutputs&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !Send for RenderableAction&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Send for RenderOrder","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for Camera","synthetic":true,"types":[]},{"text":"impl Send for ActiveCamera","synthetic":true,"types":[]},{"text":"impl Send for CameraPrefab","synthetic":true,"types":[]},{"text":"impl Send for ActiveCameraPrefab","synthetic":true,"types":[]},{"text":"impl Send for DebugLine","synthetic":true,"types":[]},{"text":"impl Send for DebugLinesParams","synthetic":true,"types":[]},{"text":"impl Send for DebugLinesComponent","synthetic":true,"types":[]},{"text":"impl Send for DebugLines","synthetic":true,"types":[]},{"text":"impl Send for ObjFormat","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for MeshPrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MaterialPrefab","synthetic":true,"types":[]},{"text":"impl Send for ImageFormat","synthetic":true,"types":[]},{"text":"impl Send for TexturePrefab","synthetic":true,"types":[]},{"text":"impl Send for TextureGenerator","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for GraphicsPrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Light","synthetic":true,"types":[]},{"text":"impl Send for DirectionalLight","synthetic":true,"types":[]},{"text":"impl Send for PointLight","synthetic":true,"types":[]},{"text":"impl Send for SpotLight","synthetic":true,"types":[]},{"text":"impl Send for SunLight","synthetic":true,"types":[]},{"text":"impl Send for LightPrefab","synthetic":true,"types":[]},{"text":"impl Send for TextureOffset","synthetic":true,"types":[]},{"text":"impl Send for Material","synthetic":true,"types":[]},{"text":"impl Send for MaterialDefaults","synthetic":true,"types":[]},{"text":"impl Send for TexAlbedo","synthetic":true,"types":[]},{"text":"impl Send for TexEmission","synthetic":true,"types":[]},{"text":"impl Send for TexNormal","synthetic":true,"types":[]},{"text":"impl Send for TexMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Send for TexAmbientOcclusion","synthetic":true,"types":[]},{"text":"impl Send for TexCavity","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for PipelineDescBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for PipelinesBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RenderToWindow","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for RenderBase3D&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl Send for RenderFlat2D","synthetic":true,"types":[]},{"text":"impl Send for RenderDebugLines","synthetic":true,"types":[]},{"text":"impl Send for RenderSkybox","synthetic":true,"types":[]},{"text":"impl Send for AmbientColor","synthetic":true,"types":[]},{"text":"impl Send for Tint","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for ShapePrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Shape","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ShapeUpload&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InternalShape","synthetic":true,"types":[]},{"text":"impl Send for JointWeights","synthetic":true,"types":[]},{"text":"impl Send for JointIds","synthetic":true,"types":[]},{"text":"impl Send for JointCombined","synthetic":true,"types":[]},{"text":"impl Send for JointTransforms","synthetic":true,"types":[]},{"text":"impl Send for JointTransformsPrefab","synthetic":true,"types":[]},{"text":"impl Send for SpriteSheetPrefab","synthetic":true,"types":[]},{"text":"impl Send for SpriteSheetLoadedSet","synthetic":true,"types":[]},{"text":"impl Send for SpriteSheetReference","synthetic":true,"types":[]},{"text":"impl Send for SpriteRenderPrefab","synthetic":true,"types":[]},{"text":"impl Send for SpriteScenePrefab","synthetic":true,"types":[]},{"text":"impl Send for SpriteSheet","synthetic":true,"types":[]},{"text":"impl Send for Sprite","synthetic":true,"types":[]},{"text":"impl Send for TextureCoordinates","synthetic":true,"types":[]},{"text":"impl Send for SpriteRender","synthetic":true,"types":[]},{"text":"impl Send for SpritePosition","synthetic":true,"types":[]},{"text":"impl Send for SpriteList","synthetic":true,"types":[]},{"text":"impl Send for SpriteGrid","synthetic":true,"types":[]},{"text":"impl Send for Sprites","synthetic":true,"types":[]},{"text":"impl Send for SpriteSheetFormat","synthetic":true,"types":[]},{"text":"impl Send for SpriteVisibility","synthetic":true,"types":[]},{"text":"impl Send for SpriteVisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for EnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for FlatEnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MaterialId","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Send for MaterialSub&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SkinningSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TextureId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for TextureSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Send for DynamicUniform&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Send for IndexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; Send for VertexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, V, T&gt; Send for DynamicVertexData&lt;B, V, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CameraGatherer","synthetic":true,"types":[]},{"text":"impl Send for AmbientGatherer","synthetic":true,"types":[]},{"text":"impl&lt;B, G&gt; Send for RenderingSystem&lt;B, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Semaphore: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for MeshProcessorSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for TextureProcessorSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Send for Transparent","synthetic":true,"types":[]},{"text":"impl Send for BackendVariant","synthetic":true,"types":[]},{"text":"impl Send for Mesh","synthetic":true,"types":[]},{"text":"impl Send for Texture","synthetic":true,"types":[]},{"text":"impl Send for MeshData","synthetic":true,"types":[]},{"text":"impl Send for TextureData","synthetic":true,"types":[]},{"text":"impl Send for Visibility","synthetic":true,"types":[]},{"text":"impl Send for VisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl Send for BoundingSphere","synthetic":true,"types":[]},{"text":"impl Send for Frustum","synthetic":true,"types":[]},{"text":"impl Send for TextureOffset","synthetic":true,"types":[]},{"text":"impl Send for ViewArgs","synthetic":true,"types":[]},{"text":"impl Send for Tint","synthetic":true,"types":[]},{"text":"impl Send for VertexArgs","synthetic":true,"types":[]},{"text":"impl Send for JointsOffset","synthetic":true,"types":[]},{"text":"impl Send for SkinnedVertexArgs","synthetic":true,"types":[]},{"text":"impl Send for PointLight","synthetic":true,"types":[]},{"text":"impl Send for DirectionalLight","synthetic":true,"types":[]},{"text":"impl Send for SpotLight","synthetic":true,"types":[]},{"text":"impl Send for Environment","synthetic":true,"types":[]},{"text":"impl Send for Material","synthetic":true,"types":[]},{"text":"impl Send for SpriteArgs","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for LookupBuilder&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; Send for TapCountIterator&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ChangeDetection","synthetic":true,"types":[]}];
implementors["amethyst_ui"] = [{"text":"impl Send for BlinkSystem","synthetic":true,"types":[]},{"text":"impl&lt;T, C, W, G&gt; Send for UiBundle&lt;T, C, W, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiButtonAction","synthetic":true,"types":[]},{"text":"impl Send for UiButtonActionType","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I&gt; Send for UiButtonBuilderResources&lt;'a, G, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, I&gt; Send for UiButtonBuilder&lt;G, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiButtonActionRetrigger","synthetic":true,"types":[]},{"text":"impl Send for UiButtonSystem","synthetic":true,"types":[]},{"text":"impl Send for UiButtonSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for UiButton","synthetic":true,"types":[]},{"text":"impl Send for Draggable","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DragWidgetSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiEventType","synthetic":true,"types":[]},{"text":"impl Send for UiEvent","synthetic":true,"types":[]},{"text":"impl Send for Interactable","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UiMouseSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EventRetriggerSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EventRetriggerSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as EventRetrigger&gt;::In: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FontAsset","synthetic":true,"types":[]},{"text":"impl Send for TtfFormat","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UiGlyphsSystem&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UiGlyphsSystemDesc&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiImage","synthetic":true,"types":[]},{"text":"impl Send for UiLabel","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for UiLabelBuilderResources&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for UiLabelBuilder&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Send for ScaleMode","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for Stretch","synthetic":true,"types":[]},{"text":"impl Send for UiTransformSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for UiTransformSystem","synthetic":true,"types":[]},{"text":"impl Send for Mask","synthetic":true,"types":[]},{"text":"impl Send for RenderUi","synthetic":true,"types":[]},{"text":"impl Send for DrawUiDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DrawUi&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for UiTransformData&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiTextData","synthetic":true,"types":[]},{"text":"impl Send for TextEditingPrefab","synthetic":true,"types":[]},{"text":"impl Send for UiImagePrefab","synthetic":true,"types":[]},{"text":"impl Send for UiImageLoadPrefab","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for UiButtonData&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, W, G&gt; Send for UiWidget&lt;C, W, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoCustomUi","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, W&gt; Send for UiLoader&lt;'a, C, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ToNativeWidget&lt;W&gt;&gt;::PrefabData: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C, W&gt; Send for UiCreator&lt;'a, C, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as ToNativeWidget&lt;W&gt;&gt;::PrefabData: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiResize","synthetic":true,"types":[]},{"text":"impl Send for ResizeSystem","synthetic":true,"types":[]},{"text":"impl Send for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for Selectable&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Selected","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for SelectionKeyboardSystem&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for SelectionKeyboardSystemDesc&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Send for SelectionMouseSystemDesc&lt;G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; Send for SelectionMouseSystem&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CachedSelectionOrder","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for CacheSelectionOrderSystem&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UiPlaySoundAction","synthetic":true,"types":[]},{"text":"impl Send for UiSoundRetrigger","synthetic":true,"types":[]},{"text":"impl Send for UiSoundSystem","synthetic":true,"types":[]},{"text":"impl Send for UiSoundSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for LineMode","synthetic":true,"types":[]},{"text":"impl Send for UiText","synthetic":true,"types":[]},{"text":"impl Send for TextSection","synthetic":true,"types":[]},{"text":"impl Send for UiMultipartText","synthetic":true,"types":[]},{"text":"impl Send for TextEditing","synthetic":true,"types":[]},{"text":"impl Send for TextEditingMouseSystem","synthetic":true,"types":[]},{"text":"impl Send for TextEditingMouseSystemDesc","synthetic":true,"types":[]},{"text":"impl Send for TextEditingInputSystem","synthetic":true,"types":[]},{"text":"impl Send for TextEditingInputSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UiFinder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UiTransform","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Send for Widgets&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for UiFormat&lt;C&gt;","synthetic":false,"types":[]}];
implementors["amethyst_utils"] = [{"text":"impl Send for AutoFov","synthetic":true,"types":[]},{"text":"impl Send for AutoFovSystem","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for CircularBuffer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FpsCounter","synthetic":true,"types":[]},{"text":"impl Send for FpsCounterSystem","synthetic":true,"types":[]},{"text":"impl Send for FpsCounterBundle","synthetic":true,"types":[]},{"text":"impl Send for CameraOrthoWorldCoordinates","synthetic":true,"types":[]},{"text":"impl Send for CameraOrtho","synthetic":true,"types":[]},{"text":"impl Send for CameraNormalizeMode","synthetic":true,"types":[]},{"text":"impl Send for CameraOrthoSystem","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Removal&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; Send for BasicScenePrefab&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Tag&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TagFinder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for DestroyAtTime","synthetic":true,"types":[]},{"text":"impl Send for DestroyInTime","synthetic":true,"types":[]},{"text":"impl Send for DestroyAtTimeSystem","synthetic":true,"types":[]},{"text":"impl Send for DestroyInTimeSystem","synthetic":true,"types":[]}];
implementors["amethyst_window"] = [{"text":"impl Send for WindowBundle","synthetic":true,"types":[]},{"text":"impl Send for DisplayConfig","synthetic":true,"types":[]},{"text":"impl Send for MonitorIdent","synthetic":true,"types":[]},{"text":"impl Send for ScreenDimensions","synthetic":true,"types":[]},{"text":"impl Send for WindowSystem","synthetic":true,"types":[]},{"text":"impl !Send for EventsLoopSystem","synthetic":true,"types":[]}];
implementors["andrew"] = [{"text":"impl Send for Line","synthetic":true,"types":[]},{"text":"impl Send for Sides","synthetic":true,"types":[]},{"text":"impl Send for Rectangle","synthetic":true,"types":[]},{"text":"impl Send for FontConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Endian","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Canvas&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Send for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Send for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Send for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Send for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Send&gt; Send for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; Send for AtomSetOnce&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Atom&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: IntoRawPtr + FromRawPtr,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Send for Stream","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl !Send for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for PrintFmt","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !Send for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl Send for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl Send for BacktraceSymbol","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Send for PodCastError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; Send for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Bytes","synthetic":false,"types":[]},{"text":"impl Send for BytesMut","synthetic":false,"types":[]}];
implementors["cassowary"] = [{"text":"impl !Send for Solver","synthetic":true,"types":[]},{"text":"impl Send for Variable","synthetic":true,"types":[]},{"text":"impl Send for Term","synthetic":true,"types":[]},{"text":"impl Send for Expression","synthetic":true,"types":[]},{"text":"impl Send for RelationalOperator","synthetic":true,"types":[]},{"text":"impl Send for Constraint","synthetic":true,"types":[]},{"text":"impl Send for WeightedRelation","synthetic":true,"types":[]},{"text":"impl Send for PartialConstraint","synthetic":true,"types":[]},{"text":"impl Send for AddConstraintError","synthetic":true,"types":[]},{"text":"impl Send for RemoveConstraintError","synthetic":true,"types":[]},{"text":"impl Send for AddEditVariableError","synthetic":true,"types":[]},{"text":"impl Send for RemoveEditVariableError","synthetic":true,"types":[]},{"text":"impl Send for SuggestValueError","synthetic":true,"types":[]}];
implementors["cgmath"] = [{"text":"impl&lt;S&gt; Send for Matrix2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Matrix3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Matrix4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Quaternion&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Vector1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Vector2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Vector3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Vector4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Rad&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Deg&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Euler&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Point1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Point2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Point3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Basis2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Basis3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; Send for Decomposed&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as VectorSpace&gt;::Scalar: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PerspectiveFov&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Perspective&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Ortho&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["claxon"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StereoSamples&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FrameReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufferedReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Bitstream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StreamInfo","synthetic":true,"types":[]},{"text":"impl Send for SeekPoint","synthetic":true,"types":[]},{"text":"impl Send for SeekTable","synthetic":true,"types":[]},{"text":"impl Send for VorbisComment","synthetic":true,"types":[]},{"text":"impl Send for MetadataBlock","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Tags&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GetTag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MetadataBlockReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FlacReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FlacReaderOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for FlacSamples&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["clipboard"] = [{"text":"impl Send for Primary","synthetic":true,"types":[]},{"text":"impl Send for Clipboard","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for X11ClipboardContext&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NopClipboardContext","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl Send for NeuQuant","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for ShouldColorize","synthetic":true,"types":[]},{"text":"impl Send for SHOULD_COLORIZE","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for Styles","synthetic":true,"types":[]},{"text":"impl Send for ColoredString","synthetic":true,"types":[]}];
implementors["colorful"] = [{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for ColorMode","synthetic":true,"types":[]},{"text":"impl Send for Colorado","synthetic":true,"types":[]},{"text":"impl Send for Symbol","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for CString","synthetic":true,"types":[]},{"text":"impl Send for RGB","synthetic":true,"types":[]},{"text":"impl Send for HSL","synthetic":true,"types":[]}];
implementors["cpal"] = [{"text":"impl Send for HostUnavailable","synthetic":true,"types":[]},{"text":"impl Send for BackendSpecificError","synthetic":true,"types":[]},{"text":"impl Send for DevicesError","synthetic":true,"types":[]},{"text":"impl Send for DeviceNameError","synthetic":true,"types":[]},{"text":"impl Send for SupportedFormatsError","synthetic":true,"types":[]},{"text":"impl Send for DefaultFormatError","synthetic":true,"types":[]},{"text":"impl Send for BuildStreamError","synthetic":true,"types":[]},{"text":"impl Send for PlayStreamError","synthetic":true,"types":[]},{"text":"impl Send for PauseStreamError","synthetic":true,"types":[]},{"text":"impl Send for StreamError","synthetic":true,"types":[]},{"text":"impl Send for Host","synthetic":true,"types":[]},{"text":"impl Send for Device","synthetic":true,"types":[]},{"text":"impl Send for StreamId","synthetic":true,"types":[]},{"text":"impl Send for Host","synthetic":true,"types":[]},{"text":"impl Send for Device","synthetic":true,"types":[]},{"text":"impl Send for Devices","synthetic":true,"types":[]},{"text":"impl Send for EventLoop","synthetic":true,"types":[]},{"text":"impl Send for StreamId","synthetic":true,"types":[]},{"text":"impl Send for SupportedInputFormats","synthetic":true,"types":[]},{"text":"impl Send for SupportedOutputFormats","synthetic":true,"types":[]},{"text":"impl Send for HostId","synthetic":true,"types":[]},{"text":"impl Send for SampleFormat","synthetic":true,"types":[]},{"text":"impl Send for SampleRate","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for SupportedFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StreamData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for InputBuffer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for OutputBuffer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnknownTypeInputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnknownTypeOutputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Devices","synthetic":false,"types":[]},{"text":"impl Send for EventLoop","synthetic":false,"types":[]}];
implementors["crc"] = [{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Send for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Send for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Send for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Send for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dlib"] = [{"text":"impl Send for DlError","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl !Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for WriteStyle","synthetic":true,"types":[]},{"text":"impl Send for TimestampPrecision","synthetic":true,"types":[]},{"text":"impl !Send for Formatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Logger","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]}];
implementors["erased_serde"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T&gt; Send for Angle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Box2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Box3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for HomogeneousVector&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Unit&gt; Send for Length&lt;T, Unit&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Unit: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NonEmpty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Point2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Point3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Rect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for RigidTransform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for Rotation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for Rotation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for Scale&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for SideOffsets2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Size2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Size3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for Transform2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for Transform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for Translation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; Send for Translation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Vector2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Vector3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BoolVector2D","synthetic":true,"types":[]},{"text":"impl Send for BoolVector3D","synthetic":true,"types":[]},{"text":"impl Send for UnknownUnit","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl Send for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SyncFailure&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Send for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fern"] = [{"text":"impl Send for Dispatch","synthetic":true,"types":[]},{"text":"impl Send for Panic","synthetic":true,"types":[]},{"text":"impl Send for Output","synthetic":true,"types":[]},{"text":"impl Send for InitError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for FormatCallback&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WithFgColor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColoredLevelConfig","synthetic":true,"types":[]}];
implementors["float_ord"] = [{"text":"impl&lt;T&gt; Send for FloatOrd&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fluent_bundle"] = [{"text":"impl&lt;'m&gt; Send for FluentMessage&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl Send for FluentError","synthetic":true,"types":[]},{"text":"impl Send for ResolverError","synthetic":true,"types":[]},{"text":"impl&lt;'bundle, R, M&gt; !Send for Scope&lt;'bundle, R, M&gt;","synthetic":true,"types":[]},{"text":"impl Send for FluentResource","synthetic":true,"types":[]},{"text":"impl Send for FluentNumberStyle","synthetic":true,"types":[]},{"text":"impl Send for FluentNumberCurrencyDisplayStyle","synthetic":true,"types":[]},{"text":"impl Send for FluentNumberOptions","synthetic":true,"types":[]},{"text":"impl Send for FluentNumber","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; Send for DisplayableNodeType&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; Send for DisplayableNode&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; !Send for FluentValue&lt;'source&gt;","synthetic":true,"types":[]}];
implementors["fluent_langneg"] = [{"text":"impl Send for NegotiationStrategy","synthetic":true,"types":[]}];
implementors["fluent_syntax"] = [{"text":"impl&lt;'ast&gt; Send for Resource&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for ResourceEntry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Entry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Message&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Term&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Pattern&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for PatternElement&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Attribute&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Identifier&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Variant&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for VariantKey&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Comment&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for InlineExpression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for CallArguments&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for NamedArgument&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; Send for Expression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParserError","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]}];
implementors["fmod_sys"] = [{"text":"impl Send for FMOD_SYSTEM","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SOUND","synthetic":true,"types":[]},{"text":"impl Send for FMOD_CHANNELCONTROL","synthetic":true,"types":[]},{"text":"impl Send for FMOD_CHANNEL","synthetic":true,"types":[]},{"text":"impl Send for FMOD_CHANNELGROUP","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SOUNDGROUP","synthetic":true,"types":[]},{"text":"impl Send for FMOD_REVERB3D","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSPCONNECTION","synthetic":true,"types":[]},{"text":"impl Send for FMOD_POLYGON","synthetic":true,"types":[]},{"text":"impl Send for FMOD_GEOMETRY","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SYNCPOINT","synthetic":true,"types":[]},{"text":"impl Send for FMOD_RESULT","synthetic":true,"types":[]},{"text":"impl Send for FMOD_CHANNELCONTROL_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_OUTPUTTYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DEBUG_MODE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SPEAKER","synthetic":true,"types":[]},{"text":"impl Send for FMOD_CHANNELORDER","synthetic":true,"types":[]},{"text":"impl Send for FMOD_PLUGINTYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SOUND_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SOUND_FORMAT","synthetic":true,"types":[]},{"text":"impl Send for FMOD_OPENSTATE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_SOUNDGROUP_BEHAVIOR","synthetic":true,"types":[]},{"text":"impl Send for FMOD_CHANNELCONTROL_CALLBACK_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_CHANNELCONTROL_DSP_INDEX","synthetic":true,"types":[]},{"text":"impl Send for FMOD_ERRORCALLBACK_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_RESAMPLER","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSPCONNECTION_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_TAGTYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_TAGDATATYPE","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_ASYNCREADINFO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_VECTOR","synthetic":true,"types":[]},{"text":"impl Send for FMOD_3D_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Send for FMOD_GUID","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_PLUGINLIST","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_TAG","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_CREATESOUNDEXINFO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_REVERB_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_ERRORCALLBACK_INFO","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_CODEC_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_CODEC_WAVEFORMAT","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_CODEC_STATE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_OSCILLATOR","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_LOWPASS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_ITLOWPASS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_HIGHPASS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_ECHO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_FADER","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_FLANGE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_DISTORTION","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_NORMALIZE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_LIMITER","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMEQ","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_MULTIBAND_EQ","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PITCHSHIFT","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_CHORUS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_ITECHO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_COMPRESSOR","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_SFXREVERB","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_LOWPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_DELAY","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_TREMOLO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_SEND","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_RETURN","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_HIGHPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PAN_2D_STEREO_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PAN_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PAN_3D_ROLLOFF_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PAN","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_THREE_EQ","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_FFT_WINDOW","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_FFT","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_ENVELOPEFOLLOWER","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_CONVOLUTION_REVERB","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_CHANNELMIX_OUTPUT","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_CHANNELMIX","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_TRANSCEIVER_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_TRANSCEIVER","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_OBJECTPAN","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PROCESS_OPERATION","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PAN_SURROUND_FLAGS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_DATA_TYPE","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_BUFFER_ARRAY","synthetic":true,"types":[]},{"text":"impl Send for FMOD_COMPLEX","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_FLOAT_MAPPING","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_DESC_FLOAT","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_DESC_INT","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_DESC_BOOL","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_DESC_DATA","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_DESC","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_DESC__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_OVERALLGAIN","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_3DATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_PARAMETER_SIDECHAIN","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_PARAMETER_FFT","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_STATE_DFT_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_STATE_PAN_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_STATE_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_DSP_STATE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_DSP_METERING_INFO","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_OUTPUT_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_OUTPUT_STATE","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_OUTPUT_OBJECT3DINFO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_SYSTEM","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_EVENTDESCRIPTION","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_EVENTINSTANCE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_BUS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_VCA","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_BANK","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_COMMANDREPLAY","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_LOADING_STATE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_LOAD_MEMORY_MODE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_USER_PROPERTY_TYPE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_EVENT_PROPERTY","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_PLAYBACK_STATE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_STOP_MODE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_BANK_INFO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_PARAMETER_ID","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_PARAMETER_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_USER_PROPERTY","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_CPU_USAGE","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_BUFFER_INFO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_BUFFER_USAGE","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_SOUND_INFO","synthetic":true,"types":[]},{"text":"impl !Send for FMOD_STUDIO_COMMAND_INFO","synthetic":true,"types":[]},{"text":"impl Send for FMOD_STUDIO_MEMORY_USAGE","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["font_kit"] = [{"text":"impl Send for Canvas","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for RasterizationOptions","synthetic":true,"types":[]},{"text":"impl Send for FontLoadingError","synthetic":true,"types":[]},{"text":"impl Send for GlyphLoadingError","synthetic":true,"types":[]},{"text":"impl Send for SelectionError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Family&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FamilyHandle","synthetic":true,"types":[]},{"text":"impl Send for FamilyName","synthetic":true,"types":[]},{"text":"impl Send for FileType","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl Send for HintingOptions","synthetic":true,"types":[]},{"text":"impl Send for FontTransform","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; Send for FallbackResult&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; Send for FallbackFont&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for Font","synthetic":true,"types":[]},{"text":"impl Send for Metrics","synthetic":true,"types":[]},{"text":"impl Send for Properties","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for Weight","synthetic":true,"types":[]},{"text":"impl Send for Stretch","synthetic":true,"types":[]},{"text":"impl !Send for FontconfigSource","synthetic":true,"types":[]},{"text":"impl Send for FsSource","synthetic":true,"types":[]},{"text":"impl Send for MemSource","synthetic":true,"types":[]},{"text":"impl !Send for MultiSource","synthetic":true,"types":[]}];
implementors["fontconfig"] = [{"text":"impl Send for struct__FcMatrix","synthetic":true,"types":[]},{"text":"impl !Send for struct__FcObjectType","synthetic":true,"types":[]},{"text":"impl !Send for struct__FcConstant","synthetic":true,"types":[]},{"text":"impl Send for struct__FcValue","synthetic":true,"types":[]},{"text":"impl !Send for struct__FcFontSet","synthetic":true,"types":[]},{"text":"impl !Send for struct__FcObjectSet","synthetic":true,"types":[]}];
implementors["freetype"] = [{"text":"impl&lt;T&gt; Send for __BindgenUnionField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for FT_MemoryRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_StreamRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_StreamDesc_","synthetic":true,"types":[]},{"text":"impl Send for FT_Vector_","synthetic":true,"types":[]},{"text":"impl Send for FT_BBox_","synthetic":true,"types":[]},{"text":"impl Send for FT_Pixel_Mode_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Bitmap_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Outline_","synthetic":true,"types":[]},{"text":"impl Send for FT_Outline_Funcs_","synthetic":true,"types":[]},{"text":"impl Send for FT_Glyph_Format_","synthetic":true,"types":[]},{"text":"impl Send for FT_RasterRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_Span_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Raster_Params_","synthetic":true,"types":[]},{"text":"impl Send for FT_Raster_Funcs_","synthetic":true,"types":[]},{"text":"impl Send for FT_UnitVector_","synthetic":true,"types":[]},{"text":"impl Send for FT_Matrix_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Data_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Generic_","synthetic":true,"types":[]},{"text":"impl !Send for FT_ListNodeRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_ListRec_","synthetic":true,"types":[]},{"text":"impl Send for _bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl Send for _bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl Send for FT_Glyph_Metrics_","synthetic":true,"types":[]},{"text":"impl Send for FT_Bitmap_Size_","synthetic":true,"types":[]},{"text":"impl Send for FT_LibraryRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_ModuleRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_DriverRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_RendererRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_FaceRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_SizeRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_GlyphSlotRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_CharMapRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_Encoding_","synthetic":true,"types":[]},{"text":"impl Send for FT_Face_InternalRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_Size_InternalRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_Size_Metrics_","synthetic":true,"types":[]},{"text":"impl Send for FT_SubGlyphRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_Slot_InternalRec_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Parameter_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Open_Args_","synthetic":true,"types":[]},{"text":"impl Send for FT_Size_Request_Type_","synthetic":true,"types":[]},{"text":"impl Send for FT_Size_RequestRec_","synthetic":true,"types":[]},{"text":"impl Send for FT_Render_Mode_","synthetic":true,"types":[]},{"text":"impl Send for FT_Kerning_Mode_","synthetic":true,"types":[]},{"text":"impl Send for FT_LcdFilter_","synthetic":true,"types":[]},{"text":"impl Send for FT_Sfnt_Tag_","synthetic":true,"types":[]},{"text":"impl !Send for FT_Module_Class_","synthetic":true,"types":[]},{"text":"impl Send for FT_TrueTypeEngineType_","synthetic":true,"types":[]},{"text":"impl Send for FT_Orientation_","synthetic":true,"types":[]},{"text":"impl Send for TT_OS2","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl Send for FxHasher","synthetic":true,"types":[]},{"text":"impl Send for FxHasher64","synthetic":true,"types":[]},{"text":"impl Send for FxHasher32","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Send for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send, N:&nbsp;ArrayLength&lt;T&gt;&gt; Send for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["genmesh"] = [{"text":"impl&lt;'a, T, V&gt; Send for SharedVertexIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, V&gt; Send for IndexedPolygonIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for LruIndexer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Neighbors&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Quad&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Triangle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Polygon&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; Send for VerticesIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Line&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; Send for TriangulateIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Circle","synthetic":true,"types":[]},{"text":"impl Send for Cone","synthetic":true,"types":[]},{"text":"impl Send for Cube","synthetic":true,"types":[]},{"text":"impl Send for Cylinder","synthetic":true,"types":[]},{"text":"impl Send for IcoSphere","synthetic":true,"types":[]},{"text":"impl Send for Plane","synthetic":true,"types":[]},{"text":"impl Send for SphereUv","synthetic":true,"types":[]},{"text":"impl Send for Torus","synthetic":true,"types":[]},{"text":"impl Send for Vertex","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["gfx_backend_empty"] = [{"text":"impl Send for Backend","synthetic":true,"types":[]},{"text":"impl Send for PhysicalDevice","synthetic":true,"types":[]},{"text":"impl Send for RawCommandQueue","synthetic":true,"types":[]},{"text":"impl Send for Device","synthetic":true,"types":[]},{"text":"impl Send for QueueFamily","synthetic":true,"types":[]},{"text":"impl Send for RawCommandPool","synthetic":true,"types":[]},{"text":"impl Send for RawCommandBuffer","synthetic":true,"types":[]},{"text":"impl Send for DescriptorPool","synthetic":true,"types":[]},{"text":"impl Send for Surface","synthetic":true,"types":[]},{"text":"impl Send for Swapchain","synthetic":true,"types":[]},{"text":"impl Send for Instance","synthetic":true,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl Send for MemoryTypeId","synthetic":true,"types":[]},{"text":"impl Send for MemoryType","synthetic":true,"types":[]},{"text":"impl Send for MemoryProperties","synthetic":true,"types":[]},{"text":"impl Send for DeviceType","synthetic":true,"types":[]},{"text":"impl Send for AdapterInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Adapter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PhysicalDevice: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl Send for ViewCreationError","synthetic":true,"types":[]},{"text":"impl Send for Usage","synthetic":true,"types":[]},{"text":"impl Send for Access","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for IndexBufferView&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ClearColor","synthetic":true,"types":[]},{"text":"impl Send for ClearDepthStencil","synthetic":true,"types":[]},{"text":"impl Send for ClearValue","synthetic":true,"types":[]},{"text":"impl Send for AttachmentClear","synthetic":true,"types":[]},{"text":"impl Send for ImageResolve","synthetic":true,"types":[]},{"text":"impl Send for ImageBlit","synthetic":true,"types":[]},{"text":"impl Send for ClearColorRaw","synthetic":true,"types":[]},{"text":"impl Send for ClearDepthStencilRaw","synthetic":true,"types":[]},{"text":"impl Send for ClearValueRaw","synthetic":true,"types":[]},{"text":"impl Send for CommandBufferFlags","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for CommandBufferInheritanceInfo&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Framebuffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SubpassContents","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Send for RenderSubpassCommon&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for RenderPassInlineEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for RenderPassSecondaryEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, S, R&gt; Send for SubpassCommandBuffer&lt;B, S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BufferCopy","synthetic":true,"types":[]},{"text":"impl Send for ImageCopy","synthetic":true,"types":[]},{"text":"impl Send for BufferImageCopy","synthetic":true,"types":[]},{"text":"impl Send for OneShot","synthetic":true,"types":[]},{"text":"impl Send for MultiShot","synthetic":true,"types":[]},{"text":"impl Send for Primary","synthetic":true,"types":[]},{"text":"impl Send for Secondary","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; Send for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DeviceLost","synthetic":true,"types":[]},{"text":"impl Send for SurfaceLost","synthetic":true,"types":[]},{"text":"impl Send for WindowInUse","synthetic":true,"types":[]},{"text":"impl Send for OutOfMemory","synthetic":true,"types":[]},{"text":"impl Send for OomOrDeviceLost","synthetic":true,"types":[]},{"text":"impl Send for AllocationError","synthetic":true,"types":[]},{"text":"impl Send for BindError","synthetic":true,"types":[]},{"text":"impl Send for WaitFor","synthetic":true,"types":[]},{"text":"impl Send for ShaderError","synthetic":true,"types":[]},{"text":"impl Send for DeviceCreationError","synthetic":true,"types":[]},{"text":"impl Send for HostExecutionError","synthetic":true,"types":[]},{"text":"impl Send for Aspects","synthetic":true,"types":[]},{"text":"impl Send for FormatDesc","synthetic":true,"types":[]},{"text":"impl Send for FormatBits","synthetic":true,"types":[]},{"text":"impl Send for Component","synthetic":true,"types":[]},{"text":"impl Send for Swizzle","synthetic":true,"types":[]},{"text":"impl Send for Properties","synthetic":true,"types":[]},{"text":"impl Send for ImageFeature","synthetic":true,"types":[]},{"text":"impl Send for BufferFeature","synthetic":true,"types":[]},{"text":"impl Send for ChannelType","synthetic":true,"types":[]},{"text":"impl Send for SurfaceType","synthetic":true,"types":[]},{"text":"impl Send for BaseFormat","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Rg4Unorm","synthetic":true,"types":[]},{"text":"impl Send for Rgba4Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bgra4Unorm","synthetic":true,"types":[]},{"text":"impl Send for R5g6b5Unorm","synthetic":true,"types":[]},{"text":"impl Send for B5g6r5Unorm","synthetic":true,"types":[]},{"text":"impl Send for R5g5b5a1Unorm","synthetic":true,"types":[]},{"text":"impl Send for B5g5r5a1Unorm","synthetic":true,"types":[]},{"text":"impl Send for A1r5g5b5Unorm","synthetic":true,"types":[]},{"text":"impl Send for R8Unorm","synthetic":true,"types":[]},{"text":"impl Send for R8Snorm","synthetic":true,"types":[]},{"text":"impl Send for R8Uscaled","synthetic":true,"types":[]},{"text":"impl Send for R8Sscaled","synthetic":true,"types":[]},{"text":"impl Send for R8Uint","synthetic":true,"types":[]},{"text":"impl Send for R8Sint","synthetic":true,"types":[]},{"text":"impl Send for R8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Rg8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Rg8Snorm","synthetic":true,"types":[]},{"text":"impl Send for Rg8Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Rg8Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Rg8Uint","synthetic":true,"types":[]},{"text":"impl Send for Rg8Sint","synthetic":true,"types":[]},{"text":"impl Send for Rg8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Rgb8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Rgb8Snorm","synthetic":true,"types":[]},{"text":"impl Send for Rgb8Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgb8Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgb8Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgb8Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgb8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Bgr8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bgr8Snorm","synthetic":true,"types":[]},{"text":"impl Send for Bgr8Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Bgr8Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Bgr8Uint","synthetic":true,"types":[]},{"text":"impl Send for Bgr8Sint","synthetic":true,"types":[]},{"text":"impl Send for Bgr8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Rgba8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Rgba8Snorm","synthetic":true,"types":[]},{"text":"impl Send for Rgba8Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgba8Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgba8Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgba8Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgba8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Bgra8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bgra8Snorm","synthetic":true,"types":[]},{"text":"impl Send for Bgra8Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Bgra8Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Bgra8Uint","synthetic":true,"types":[]},{"text":"impl Send for Bgra8Sint","synthetic":true,"types":[]},{"text":"impl Send for Bgra8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Abgr8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Abgr8Snorm","synthetic":true,"types":[]},{"text":"impl Send for Abgr8Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Abgr8Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Abgr8Uint","synthetic":true,"types":[]},{"text":"impl Send for Abgr8Sint","synthetic":true,"types":[]},{"text":"impl Send for Abgr8Srgb","synthetic":true,"types":[]},{"text":"impl Send for A2r10g10b10Unorm","synthetic":true,"types":[]},{"text":"impl Send for A2r10g10b10Snorm","synthetic":true,"types":[]},{"text":"impl Send for A2r10g10b10Uscaled","synthetic":true,"types":[]},{"text":"impl Send for A2r10g10b10Sscaled","synthetic":true,"types":[]},{"text":"impl Send for A2r10g10b10Uint","synthetic":true,"types":[]},{"text":"impl Send for A2r10g10b10Sint","synthetic":true,"types":[]},{"text":"impl Send for A2b10g10r10Unorm","synthetic":true,"types":[]},{"text":"impl Send for A2b10g10r10Snorm","synthetic":true,"types":[]},{"text":"impl Send for A2b10g10r10Uscaled","synthetic":true,"types":[]},{"text":"impl Send for A2b10g10r10Sscaled","synthetic":true,"types":[]},{"text":"impl Send for A2b10g10r10Uint","synthetic":true,"types":[]},{"text":"impl Send for A2b10g10r10Sint","synthetic":true,"types":[]},{"text":"impl Send for R16Unorm","synthetic":true,"types":[]},{"text":"impl Send for R16Snorm","synthetic":true,"types":[]},{"text":"impl Send for R16Uscaled","synthetic":true,"types":[]},{"text":"impl Send for R16Sscaled","synthetic":true,"types":[]},{"text":"impl Send for R16Uint","synthetic":true,"types":[]},{"text":"impl Send for R16Sint","synthetic":true,"types":[]},{"text":"impl Send for R16Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rg16Unorm","synthetic":true,"types":[]},{"text":"impl Send for Rg16Snorm","synthetic":true,"types":[]},{"text":"impl Send for Rg16Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Rg16Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Rg16Uint","synthetic":true,"types":[]},{"text":"impl Send for Rg16Sint","synthetic":true,"types":[]},{"text":"impl Send for Rg16Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rgb16Unorm","synthetic":true,"types":[]},{"text":"impl Send for Rgb16Snorm","synthetic":true,"types":[]},{"text":"impl Send for Rgb16Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgb16Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgb16Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgb16Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgb16Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rgba16Unorm","synthetic":true,"types":[]},{"text":"impl Send for Rgba16Snorm","synthetic":true,"types":[]},{"text":"impl Send for Rgba16Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgba16Sscaled","synthetic":true,"types":[]},{"text":"impl Send for Rgba16Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgba16Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgba16Sfloat","synthetic":true,"types":[]},{"text":"impl Send for R32Uint","synthetic":true,"types":[]},{"text":"impl Send for R32Sint","synthetic":true,"types":[]},{"text":"impl Send for R32Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rg32Uint","synthetic":true,"types":[]},{"text":"impl Send for Rg32Sint","synthetic":true,"types":[]},{"text":"impl Send for Rg32Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rgb32Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgb32Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgb32Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rgba32Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgba32Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgba32Sfloat","synthetic":true,"types":[]},{"text":"impl Send for R64Uint","synthetic":true,"types":[]},{"text":"impl Send for R64Sint","synthetic":true,"types":[]},{"text":"impl Send for R64Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rg64Uint","synthetic":true,"types":[]},{"text":"impl Send for Rg64Sint","synthetic":true,"types":[]},{"text":"impl Send for Rg64Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rgb64Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgb64Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgb64Sfloat","synthetic":true,"types":[]},{"text":"impl Send for Rgba64Uint","synthetic":true,"types":[]},{"text":"impl Send for Rgba64Sint","synthetic":true,"types":[]},{"text":"impl Send for Rgba64Sfloat","synthetic":true,"types":[]},{"text":"impl Send for B10g11r11Ufloat","synthetic":true,"types":[]},{"text":"impl Send for E5b9g9r9Ufloat","synthetic":true,"types":[]},{"text":"impl Send for D16Unorm","synthetic":true,"types":[]},{"text":"impl Send for X8D24Unorm","synthetic":true,"types":[]},{"text":"impl Send for D32Sfloat","synthetic":true,"types":[]},{"text":"impl Send for S8Uint","synthetic":true,"types":[]},{"text":"impl Send for D16UnormS8Uint","synthetic":true,"types":[]},{"text":"impl Send for D24UnormS8Uint","synthetic":true,"types":[]},{"text":"impl Send for D32SfloatS8Uint","synthetic":true,"types":[]},{"text":"impl Send for Bc1RgbUnorm","synthetic":true,"types":[]},{"text":"impl Send for Bc1RgbSrgb","synthetic":true,"types":[]},{"text":"impl Send for Bc1RgbaUnorm","synthetic":true,"types":[]},{"text":"impl Send for Bc1RgbaSrgb","synthetic":true,"types":[]},{"text":"impl Send for Bc2Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bc2Srgb","synthetic":true,"types":[]},{"text":"impl Send for Bc3Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bc3Srgb","synthetic":true,"types":[]},{"text":"impl Send for Bc4Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bc4Snorm","synthetic":true,"types":[]},{"text":"impl Send for Bc5Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bc5Snorm","synthetic":true,"types":[]},{"text":"impl Send for Bc6hUfloat","synthetic":true,"types":[]},{"text":"impl Send for Bc6hSfloat","synthetic":true,"types":[]},{"text":"impl Send for Bc7Unorm","synthetic":true,"types":[]},{"text":"impl Send for Bc7Srgb","synthetic":true,"types":[]},{"text":"impl Send for Etc2R8g8b8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Etc2R8g8b8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Etc2R8g8b8a1Unorm","synthetic":true,"types":[]},{"text":"impl Send for Etc2R8g8b8a1Srgb","synthetic":true,"types":[]},{"text":"impl Send for Etc2R8g8b8a8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Etc2R8g8b8a8Srgb","synthetic":true,"types":[]},{"text":"impl Send for EacR11Unorm","synthetic":true,"types":[]},{"text":"impl Send for EacR11Snorm","synthetic":true,"types":[]},{"text":"impl Send for EacR11g11Unorm","synthetic":true,"types":[]},{"text":"impl Send for EacR11g11Snorm","synthetic":true,"types":[]},{"text":"impl Send for Astc4x4Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc4x4Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc5x4Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc5x4Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc5x5Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc5x5Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc6x5Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc6x5Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc6x6Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc6x6Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc8x5Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc8x5Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc8x6Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc8x6Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc8x8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc8x8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc10x5Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc10x5Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc10x6Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc10x6Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc10x8Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc10x8Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc10x10Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc10x10Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc12x10Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc12x10Srgb","synthetic":true,"types":[]},{"text":"impl Send for Astc12x12Unorm","synthetic":true,"types":[]},{"text":"impl Send for Astc12x12Srgb","synthetic":true,"types":[]},{"text":"impl Send for Extent","synthetic":true,"types":[]},{"text":"impl Send for Offset","synthetic":true,"types":[]},{"text":"impl Send for Tiling","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl Send for ViewError","synthetic":true,"types":[]},{"text":"impl Send for LayerError","synthetic":true,"types":[]},{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Anisotropic","synthetic":true,"types":[]},{"text":"impl Send for CubeFace","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for ViewKind","synthetic":true,"types":[]},{"text":"impl Send for ViewCapabilities","synthetic":true,"types":[]},{"text":"impl Send for Usage","synthetic":true,"types":[]},{"text":"impl Send for WrapMode","synthetic":true,"types":[]},{"text":"impl Send for Lod","synthetic":true,"types":[]},{"text":"impl Send for PackedColor","synthetic":true,"types":[]},{"text":"impl Send for SamplerInfo","synthetic":true,"types":[]},{"text":"impl Send for Layout","synthetic":true,"types":[]},{"text":"impl Send for Access","synthetic":true,"types":[]},{"text":"impl Send for Subresource","synthetic":true,"types":[]},{"text":"impl Send for SubresourceLayers","synthetic":true,"types":[]},{"text":"impl Send for SubresourceRange","synthetic":true,"types":[]},{"text":"impl Send for FormatProperties","synthetic":true,"types":[]},{"text":"impl Send for SubresourceFootprint","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; Send for Reader&lt;'a, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; Send for Writer&lt;'a, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Properties","synthetic":true,"types":[]},{"text":"impl Send for Dependencies","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Barrier&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Requirements","synthetic":true,"types":[]},{"text":"impl Send for AttachmentLoadOp","synthetic":true,"types":[]},{"text":"impl Send for AttachmentStoreOp","synthetic":true,"types":[]},{"text":"impl Send for AttachmentOps","synthetic":true,"types":[]},{"text":"impl Send for Attachment","synthetic":true,"types":[]},{"text":"impl Send for SubpassRef","synthetic":true,"types":[]},{"text":"impl Send for SubpassDependency","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubpassDesc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Subpass&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CommandPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Send for CommandPool&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for ComputePipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ComputePipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DescriptorType","synthetic":true,"types":[]},{"text":"impl Send for DescriptorSetLayoutBinding","synthetic":true,"types":[]},{"text":"impl Send for DescriptorRangeDesc","synthetic":true,"types":[]},{"text":"impl Send for AllocationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, WI&gt; Send for DescriptorSetWrite&lt;'a, B, WI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;WI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Descriptor&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::BufferView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for DescriptorSetCopy&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DescriptorPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl Send for Rect","synthetic":true,"types":[]},{"text":"impl Send for ClearRect","synthetic":true,"types":[]},{"text":"impl Send for Viewport","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for GraphicsShaderSet&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BakedStates","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for GraphicsPipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PolygonMode","synthetic":true,"types":[]},{"text":"impl Send for FrontFace","synthetic":true,"types":[]},{"text":"impl Send for DepthBias","synthetic":true,"types":[]},{"text":"impl Send for Rasterizer","synthetic":true,"types":[]},{"text":"impl Send for BlendDesc","synthetic":true,"types":[]},{"text":"impl Send for LogicOp","synthetic":true,"types":[]},{"text":"impl Send for Multisampling","synthetic":true,"types":[]},{"text":"impl Send for VertexInputRate","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Element&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VertexBufferDesc","synthetic":true,"types":[]},{"text":"impl Send for AttributeDesc","synthetic":true,"types":[]},{"text":"impl Send for PrimitiveRestart","synthetic":true,"types":[]},{"text":"impl Send for InputAssemblerDesc","synthetic":true,"types":[]},{"text":"impl Send for Comparison","synthetic":true,"types":[]},{"text":"impl Send for ColorMask","synthetic":true,"types":[]},{"text":"impl Send for Factor","synthetic":true,"types":[]},{"text":"impl Send for BlendOp","synthetic":true,"types":[]},{"text":"impl Send for BlendState","synthetic":true,"types":[]},{"text":"impl Send for ColorBlendDesc","synthetic":true,"types":[]},{"text":"impl Send for DepthTest","synthetic":true,"types":[]},{"text":"impl Send for StencilOp","synthetic":true,"types":[]},{"text":"impl Send for StencilFace","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sided&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StencilTest","synthetic":true,"types":[]},{"text":"impl Send for DepthStencilDesc","synthetic":true,"types":[]},{"text":"impl Send for Face","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl Send for PipelineStage","synthetic":true,"types":[]},{"text":"impl Send for ShaderStageFlags","synthetic":true,"types":[]},{"text":"impl Send for Stage","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for EntryPoint&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PipelineCreationFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for BasePipeline&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SpecializationConstant","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Specialization&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for State&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Query&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueryPool: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ControlFlags","synthetic":true,"types":[]},{"text":"impl Send for ResultFlags","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for PipelineStatistic","synthetic":true,"types":[]},{"text":"impl Send for General","synthetic":true,"types":[]},{"text":"impl Send for Graphics","synthetic":true,"types":[]},{"text":"impl Send for Compute","synthetic":true,"types":[]},{"text":"impl Send for Transfer","synthetic":true,"types":[]},{"text":"impl Send for GraphicsOrCompute","synthetic":true,"types":[]},{"text":"impl Send for QueueFamilyId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Send for QueueGroup&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Queues&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for QueueType","synthetic":true,"types":[]},{"text":"impl&lt;Ic, Iw, Is&gt; Send for Submission&lt;Ic, Iw, Is&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ic: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Is: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Iw: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Send for CommandQueue&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl Send for Extent2D","synthetic":true,"types":[]},{"text":"impl Send for SurfaceCapabilities","synthetic":true,"types":[]},{"text":"impl Send for PresentMode","synthetic":true,"types":[]},{"text":"impl Send for CompositeAlpha","synthetic":true,"types":[]},{"text":"impl Send for SwapchainConfig","synthetic":true,"types":[]},{"text":"impl Send for Suboptimal","synthetic":true,"types":[]},{"text":"impl Send for AcquireError","synthetic":true,"types":[]},{"text":"impl Send for PresentError","synthetic":true,"types":[]},{"text":"impl Send for InitError","synthetic":true,"types":[]},{"text":"impl Send for Features","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl Send for Primitive","synthetic":true,"types":[]},{"text":"impl Send for IndexType","synthetic":true,"types":[]},{"text":"impl Send for SubmissionError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Gpu&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl Send for DisposalMethod","synthetic":true,"types":[]},{"text":"impl Send for Block","synthetic":true,"types":[]},{"text":"impl Send for Extension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Send for ColorOutput","synthetic":true,"types":[]},{"text":"impl Send for MemoryLimit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for ExtensionData","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["gimli"] = [{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for LineEncoding","synthetic":true,"types":[]},{"text":"impl Send for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAbbrevOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAddrBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugAddrIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugInfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLineOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLineStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocationListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLocListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugLocListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugMacinfoOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugMacroOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RangeListsOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugRngListsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugRngListsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffsetsBase&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugStrOffsetsIndex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugTypesOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DebugTypeSignature","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for EhFrameOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnitSectionOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SectionId","synthetic":true,"types":[]},{"text":"impl Send for Arm","synthetic":true,"types":[]},{"text":"impl Send for X86","synthetic":true,"types":[]},{"text":"impl Send for X86_64","synthetic":true,"types":[]},{"text":"impl Send for DwUt","synthetic":true,"types":[]},{"text":"impl Send for DwCfa","synthetic":true,"types":[]},{"text":"impl Send for DwChildren","synthetic":true,"types":[]},{"text":"impl Send for DwTag","synthetic":true,"types":[]},{"text":"impl Send for DwAt","synthetic":true,"types":[]},{"text":"impl Send for DwForm","synthetic":true,"types":[]},{"text":"impl Send for DwAte","synthetic":true,"types":[]},{"text":"impl Send for DwLle","synthetic":true,"types":[]},{"text":"impl Send for DwDs","synthetic":true,"types":[]},{"text":"impl Send for DwEnd","synthetic":true,"types":[]},{"text":"impl Send for DwAccess","synthetic":true,"types":[]},{"text":"impl Send for DwVis","synthetic":true,"types":[]},{"text":"impl Send for DwVirtuality","synthetic":true,"types":[]},{"text":"impl Send for DwLang","synthetic":true,"types":[]},{"text":"impl Send for DwAddr","synthetic":true,"types":[]},{"text":"impl Send for DwId","synthetic":true,"types":[]},{"text":"impl Send for DwCc","synthetic":true,"types":[]},{"text":"impl Send for DwInl","synthetic":true,"types":[]},{"text":"impl Send for DwOrd","synthetic":true,"types":[]},{"text":"impl Send for DwDsc","synthetic":true,"types":[]},{"text":"impl Send for DwIdx","synthetic":true,"types":[]},{"text":"impl Send for DwDefaulted","synthetic":true,"types":[]},{"text":"impl Send for DwLns","synthetic":true,"types":[]},{"text":"impl Send for DwLne","synthetic":true,"types":[]},{"text":"impl Send for DwLnct","synthetic":true,"types":[]},{"text":"impl Send for DwMacro","synthetic":true,"types":[]},{"text":"impl Send for DwRle","synthetic":true,"types":[]},{"text":"impl Send for DwOp","synthetic":true,"types":[]},{"text":"impl Send for DwEhPe","synthetic":true,"types":[]},{"text":"impl Send for RunTimeEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAddr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ParsedEhFrameHdr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for EhHdrTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EhFrame&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BaseAddresses","synthetic":true,"types":[]},{"text":"impl Send for SectionBaseAddresses","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Augmentation","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'bases, Section, R&gt; Send for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Section as UnwindSection&lt;R&gt;&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UninitializedUnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UnwindContext&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for UnwindTable&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'iter, R&gt; Send for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for UnwindTableRow&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CfaRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RegisterRule&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CallFrameInstruction&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for CallFrameInstructionIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pointer","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Dwarf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Unit&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RangeIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'input, Endian&gt; Send for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReaderOffsetId","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAbbrev&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Abbreviations","synthetic":true,"types":[]},{"text":"impl Send for Abbreviation","synthetic":true,"types":[]},{"text":"impl Send for AttributeSpecification","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ArangeEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugAranges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ArangeEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLine&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Program, Offset&gt; Send for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LineInstructions&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LineRow","synthetic":true,"types":[]},{"text":"impl Send for ColumnType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LineSequence&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FileEntryFormat","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLoc&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLocLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocationLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawLocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LocationListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DieReference&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EvaluationResult&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Expression&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for OperationIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Evaluation&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugPubNames&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubNamesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugPubTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PubTypesEntryIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugRanges&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugRngLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RangeLists&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RawRngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RawRngListEntry&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for RngListIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugStrOffsets&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugLineStr&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnitOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugInfo&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R, Offset&gt; Send for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Attribute&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R&gt; !Send for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesCursor&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R&gt; Send for EntriesTree&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Send for EntriesTreeNode&lt;'abbrev, 'unit, 'tree, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'abbrev, 'unit, 'tree, R&gt; Send for EntriesTreeIter&lt;'abbrev, 'unit, 'tree, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DebugTypes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Reader&gt;::Offset: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Offset&gt; Send for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ValueType","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["glsl_layout"] = [{"text":"impl Send for boolean","synthetic":true,"types":[]},{"text":"impl Send for bvec2","synthetic":true,"types":[]},{"text":"impl Send for bvec3","synthetic":true,"types":[]},{"text":"impl Send for bvec4","synthetic":true,"types":[]},{"text":"impl Send for ivec2","synthetic":true,"types":[]},{"text":"impl Send for ivec3","synthetic":true,"types":[]},{"text":"impl Send for ivec4","synthetic":true,"types":[]},{"text":"impl Send for uvec2","synthetic":true,"types":[]},{"text":"impl Send for uvec3","synthetic":true,"types":[]},{"text":"impl Send for uvec4","synthetic":true,"types":[]},{"text":"impl Send for vec2","synthetic":true,"types":[]},{"text":"impl Send for vec3","synthetic":true,"types":[]},{"text":"impl Send for vec4","synthetic":true,"types":[]},{"text":"impl Send for dvec2","synthetic":true,"types":[]},{"text":"impl Send for dvec3","synthetic":true,"types":[]},{"text":"impl Send for dvec4","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Element&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AsStd140&gt;::Align: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for bmat2x2","synthetic":true,"types":[]},{"text":"impl Send for bmat2x3","synthetic":true,"types":[]},{"text":"impl Send for bmat2x4","synthetic":true,"types":[]},{"text":"impl Send for bmat3x2","synthetic":true,"types":[]},{"text":"impl Send for bmat3x3","synthetic":true,"types":[]},{"text":"impl Send for bmat3x4","synthetic":true,"types":[]},{"text":"impl Send for bmat4x2","synthetic":true,"types":[]},{"text":"impl Send for bmat4x3","synthetic":true,"types":[]},{"text":"impl Send for bmat4x4","synthetic":true,"types":[]},{"text":"impl Send for imat2x2","synthetic":true,"types":[]},{"text":"impl Send for imat2x3","synthetic":true,"types":[]},{"text":"impl Send for imat2x4","synthetic":true,"types":[]},{"text":"impl Send for imat3x2","synthetic":true,"types":[]},{"text":"impl Send for imat3x3","synthetic":true,"types":[]},{"text":"impl Send for imat3x4","synthetic":true,"types":[]},{"text":"impl Send for imat4x2","synthetic":true,"types":[]},{"text":"impl Send for imat4x3","synthetic":true,"types":[]},{"text":"impl Send for imat4x4","synthetic":true,"types":[]},{"text":"impl Send for umat2x2","synthetic":true,"types":[]},{"text":"impl Send for umat2x3","synthetic":true,"types":[]},{"text":"impl Send for umat2x4","synthetic":true,"types":[]},{"text":"impl Send for umat3x2","synthetic":true,"types":[]},{"text":"impl Send for umat3x3","synthetic":true,"types":[]},{"text":"impl Send for umat3x4","synthetic":true,"types":[]},{"text":"impl Send for umat4x2","synthetic":true,"types":[]},{"text":"impl Send for umat4x3","synthetic":true,"types":[]},{"text":"impl Send for umat4x4","synthetic":true,"types":[]},{"text":"impl Send for mat2x2","synthetic":true,"types":[]},{"text":"impl Send for mat2x3","synthetic":true,"types":[]},{"text":"impl Send for mat2x4","synthetic":true,"types":[]},{"text":"impl Send for mat3x2","synthetic":true,"types":[]},{"text":"impl Send for mat3x3","synthetic":true,"types":[]},{"text":"impl Send for mat3x4","synthetic":true,"types":[]},{"text":"impl Send for mat4x2","synthetic":true,"types":[]},{"text":"impl Send for mat4x3","synthetic":true,"types":[]},{"text":"impl Send for mat4x4","synthetic":true,"types":[]},{"text":"impl Send for dmat2x2","synthetic":true,"types":[]},{"text":"impl Send for dmat2x3","synthetic":true,"types":[]},{"text":"impl Send for dmat2x4","synthetic":true,"types":[]},{"text":"impl Send for dmat3x2","synthetic":true,"types":[]},{"text":"impl Send for dmat3x3","synthetic":true,"types":[]},{"text":"impl Send for dmat3x4","synthetic":true,"types":[]},{"text":"impl Send for dmat4x2","synthetic":true,"types":[]},{"text":"impl Send for dmat4x3","synthetic":true,"types":[]},{"text":"impl Send for dmat4x4","synthetic":true,"types":[]}];
implementors["gltf"] = [{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SparseIndicesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SparseIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ItemIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IndexType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Sparse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Accessor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Channels&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for I8","synthetic":true,"types":[]},{"text":"impl Send for U8","synthetic":true,"types":[]},{"text":"impl Send for I16","synthetic":true,"types":[]},{"text":"impl Send for U16","synthetic":true,"types":[]},{"text":"impl Send for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for I8","synthetic":true,"types":[]},{"text":"impl Send for U8","synthetic":true,"types":[]},{"text":"impl Send for I16","synthetic":true,"types":[]},{"text":"impl Send for U16","synthetic":true,"types":[]},{"text":"impl Send for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Send for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Rotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MorphTargetWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadOutputs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Animation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Channel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Target&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Glb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for ChunkType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for View&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Projection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Camera&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Orthographic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Perspective&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Image&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExtensionsUsed&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ExtensionsRequired&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Accessors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Animations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Buffers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Views&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Cameras&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Images&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Lights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Materials&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Meshes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Scenes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Skins&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Textures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Light&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Material&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PbrMetallicRoughness&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NormalTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OcclusionTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MorphTargets&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Primitives&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RgbU8","synthetic":true,"types":[]},{"text":"impl Send for RgbU16","synthetic":true,"types":[]},{"text":"impl Send for RgbF32","synthetic":true,"types":[]},{"text":"impl Send for RgbaU8","synthetic":true,"types":[]},{"text":"impl Send for RgbaU16","synthetic":true,"types":[]},{"text":"impl Send for RgbaF32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for U32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for U16","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for U8","synthetic":true,"types":[]},{"text":"impl Send for U16","synthetic":true,"types":[]},{"text":"impl Send for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for U8","synthetic":true,"types":[]},{"text":"impl Send for U16","synthetic":true,"types":[]},{"text":"impl Send for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadColors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadJoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadTexCoords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Send for ReadMorphTargets&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bounds&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Mesh&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MorphTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Primitive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Send for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Children&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Transform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Scene&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Joints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; Send for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Skin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Info&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Texture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Gltf","synthetic":true,"types":[]},{"text":"impl Send for Document","synthetic":true,"types":[]}];
implementors["gltf_json"] = [{"text":"impl Send for Indices","synthetic":true,"types":[]},{"text":"impl Send for Sparse","synthetic":true,"types":[]},{"text":"impl Send for Values","synthetic":true,"types":[]},{"text":"impl Send for ComponentType","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Accessor","synthetic":true,"types":[]},{"text":"impl Send for IndexComponentType","synthetic":true,"types":[]},{"text":"impl Send for GenericComponentType","synthetic":true,"types":[]},{"text":"impl Send for Interpolation","synthetic":true,"types":[]},{"text":"impl Send for Property","synthetic":true,"types":[]},{"text":"impl Send for Animation","synthetic":true,"types":[]},{"text":"impl Send for Channel","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for Sampler","synthetic":true,"types":[]},{"text":"impl Send for Asset","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl Send for View","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Camera","synthetic":true,"types":[]},{"text":"impl Send for Orthographic","synthetic":true,"types":[]},{"text":"impl Send for Perspective","synthetic":true,"types":[]},{"text":"impl Send for Indices","synthetic":true,"types":[]},{"text":"impl Send for Sparse","synthetic":true,"types":[]},{"text":"impl Send for Values","synthetic":true,"types":[]},{"text":"impl Send for Accessor","synthetic":true,"types":[]},{"text":"impl Send for Animation","synthetic":true,"types":[]},{"text":"impl Send for Channel","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for Sampler","synthetic":true,"types":[]},{"text":"impl Send for Asset","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl Send for View","synthetic":true,"types":[]},{"text":"impl Send for Camera","synthetic":true,"types":[]},{"text":"impl Send for Orthographic","synthetic":true,"types":[]},{"text":"impl Send for Perspective","synthetic":true,"types":[]},{"text":"impl Send for Image","synthetic":true,"types":[]},{"text":"impl Send for Material","synthetic":true,"types":[]},{"text":"impl Send for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Send for NormalTexture","synthetic":true,"types":[]},{"text":"impl Send for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl Send for Mesh","synthetic":true,"types":[]},{"text":"impl Send for Primitive","synthetic":true,"types":[]},{"text":"impl Send for Root","synthetic":true,"types":[]},{"text":"impl Send for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl Send for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Light","synthetic":true,"types":[]},{"text":"impl Send for Spot","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for Scene","synthetic":true,"types":[]},{"text":"impl Send for Skin","synthetic":true,"types":[]},{"text":"impl Send for Sampler","synthetic":true,"types":[]},{"text":"impl Send for Texture","synthetic":true,"types":[]},{"text":"impl Send for Info","synthetic":true,"types":[]},{"text":"impl Send for Void","synthetic":true,"types":[]},{"text":"impl Send for Image","synthetic":true,"types":[]},{"text":"impl Send for MimeType","synthetic":true,"types":[]},{"text":"impl Send for AlphaMode","synthetic":true,"types":[]},{"text":"impl Send for Material","synthetic":true,"types":[]},{"text":"impl Send for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl Send for NormalTexture","synthetic":true,"types":[]},{"text":"impl Send for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl Send for AlphaCutoff","synthetic":true,"types":[]},{"text":"impl Send for EmissiveFactor","synthetic":true,"types":[]},{"text":"impl Send for PbrBaseColorFactor","synthetic":true,"types":[]},{"text":"impl Send for StrengthFactor","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for Mesh","synthetic":true,"types":[]},{"text":"impl Send for Primitive","synthetic":true,"types":[]},{"text":"impl Send for MorphTarget","synthetic":true,"types":[]},{"text":"impl Send for Semantic","synthetic":true,"types":[]},{"text":"impl Send for Path","synthetic":true,"types":[]},{"text":"impl Send for Root","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for Scene","synthetic":true,"types":[]},{"text":"impl Send for UnitQuaternion","synthetic":true,"types":[]},{"text":"impl Send for Skin","synthetic":true,"types":[]},{"text":"impl Send for MagFilter","synthetic":true,"types":[]},{"text":"impl Send for MinFilter","synthetic":true,"types":[]},{"text":"impl Send for WrappingMode","synthetic":true,"types":[]},{"text":"impl Send for Sampler","synthetic":true,"types":[]},{"text":"impl Send for Texture","synthetic":true,"types":[]},{"text":"impl Send for Info","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Checked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Index&lt;T&gt;","synthetic":false,"types":[]}];
implementors["glyph_brush"] = [{"text":"impl&lt;'a, H&gt; Send for GlyphBrushBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, V, H&gt; Send for GlyphBrush&lt;'font, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GlyphVertex","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for BrushAction&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BrushError","synthetic":true,"types":[]},{"text":"impl&lt;'font, H&gt; Send for GlyphCalculator&lt;'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'brush, 'font, H&nbsp;=&nbsp;RandomXxHashBuilder64&gt; !Send for GlyphCalculatorGuard&lt;'brush, 'font, H&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; Send for GlyphCalculatorBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OwnedVariedSection","synthetic":true,"types":[]},{"text":"impl Send for OwnedSectionText","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VariedSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Section&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["glyph_brush_layout"] = [{"text":"impl&lt;L&gt; Send for Layout&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HorizontalAlign","synthetic":true,"types":[]},{"text":"impl Send for VerticalAlign","synthetic":true,"types":[]},{"text":"impl Send for FontId","synthetic":true,"types":[]},{"text":"impl Send for LineBreak","synthetic":true,"types":[]},{"text":"impl Send for BuiltInLineBreaker","synthetic":true,"types":[]},{"text":"impl Send for SectionGeometry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SectionText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GlyphChange","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Send for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Send for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send&gt; Send for IterMut&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Send for RawOccupiedEntryMut&lt;'_, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hibitset"] = [{"text":"impl Send for AtomicBitSet","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for DrainBitIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BitParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for BitProducer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BitIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BitSetAll","synthetic":true,"types":[]},{"text":"impl Send for BitSet","synthetic":true,"types":[]}];
implementors["hound"] = [{"text":"impl&lt;R&gt; Send for WavReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'wr, R, S&gt; Send for WavSamples&lt;'wr, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S&gt; Send for WavIntoSamples&lt;R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WavWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'parent, W&gt; Send for SampleWriter16&lt;'parent, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SampleFormat","synthetic":true,"types":[]},{"text":"impl Send for WavSpec","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Rfc3339Timestamp","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl Send for ImageError","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedError","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl Send for EncodingError","synthetic":true,"types":[]},{"text":"impl Send for ParameterError","synthetic":true,"types":[]},{"text":"impl Send for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for LimitError","synthetic":true,"types":[]},{"text":"impl Send for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumeratePixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for EnumerateRowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for PixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for RowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NeuQuant","synthetic":true,"types":[]},{"text":"impl Send for Rect","synthetic":true,"types":[]},{"text":"impl Send for BiLevel","synthetic":true,"types":[]},{"text":"impl Send for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Send for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Send for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Send for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl Send for PixelDensity","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for JpegEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CompressionType","synthetic":true,"types":[]},{"text":"impl Send for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl Send for Delay","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Send for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColorType","synthetic":true,"types":[]},{"text":"impl Send for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DynamicImage","synthetic":true,"types":[]},{"text":"impl Send for ImageFormat","synthetic":true,"types":[]},{"text":"impl Send for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Send for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Send for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["inflate"] = [{"text":"impl&lt;W&gt; Send for InflateWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoderBuf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InflateStream","synthetic":true,"types":[]}];
implementors["intl_memoizer"] = [{"text":"impl Send for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl !Send for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl !Send for IntlMemoizer","synthetic":true,"types":[]}];
implementors["intl_pluralrules"] = [{"text":"impl Send for PluralOperands","synthetic":true,"types":[]},{"text":"impl Send for PluralCategory","synthetic":true,"types":[]},{"text":"impl Send for PluralRuleType","synthetic":true,"types":[]},{"text":"impl Send for PluralRules","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FilterMapOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FilterOk&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for GroupingMap&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; Send for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ElemF&gt; Send for IntersperseWith&lt;I, ElemF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ElemF: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PeekNth&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Send for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Powerset&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for CircularTupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Send for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Send for PixelFormat","synthetic":true,"types":[]},{"text":"impl Send for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnsupportedFeature","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["laminar"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for SocketEvent","synthetic":true,"types":[]},{"text":"impl Send for LinkConditioner","synthetic":true,"types":[]},{"text":"impl Send for Socket","synthetic":true,"types":[]},{"text":"impl Send for DeliveryGuarantee","synthetic":true,"types":[]},{"text":"impl Send for OrderingGuarantee","synthetic":true,"types":[]},{"text":"impl Send for Packet","synthetic":true,"types":[]}];
implementors["lewton"] = [{"text":"impl Send for HeaderReadError","synthetic":true,"types":[]},{"text":"impl Send for IdentHeader","synthetic":true,"types":[]},{"text":"impl Send for CommentHeader","synthetic":true,"types":[]},{"text":"impl Send for SetupHeader","synthetic":true,"types":[]},{"text":"impl Send for AudioReadError","synthetic":true,"types":[]},{"text":"impl Send for PreviousWindowRight","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OggStreamReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for InterleavedSamples&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VorbisError","synthetic":true,"types":[]}];
implementors["lexical"] = [{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Result&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RoundingKind","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Library","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Symbol&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Library","synthetic":false,"types":[]},{"text":"impl&lt;'lib, T:&nbsp;Send&gt; Send for Symbol&lt;'lib, T&gt;","synthetic":false,"types":[]}];
implementors["line_drawing"] = [{"text":"impl&lt;T, I&gt; Send for Steps&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Octant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bresenham&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Send for Midpoint&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Send for XiaolinWu&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WalkGrid&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Supercover&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bresenham3d&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for VoxelOrigin","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; Send for WalkVoxels&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BresenhamCircle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, S:&nbsp;Send&gt; Send for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawMutex&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T&gt; !Send for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Send for RwLockUpgradableReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GuardSend","synthetic":true,"types":[]},{"text":"impl !Send for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedMutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send&gt; Send for RawReentrantMutex&lt;R, G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Send, G:&nbsp;GetThreadId + Send, T:&nbsp;?Sized + Send&gt; Send for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Send, T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Send for MappedRwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::GuardMarker: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]}];
implementors["lyon_geom"] = [{"text":"impl&lt;S&gt; Send for BezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for QuadraticBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flattened&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for CubicBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SvgArc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Arc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ArcFlags","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Triangle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for LineSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Line&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for LineEquation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Monotonic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lyon_path"] = [{"text":"impl Send for SvgEvent","synthetic":true,"types":[]},{"text":"impl Send for PathEvent","synthetic":true,"types":[]},{"text":"impl Send for QuadraticEvent","synthetic":true,"types":[]},{"text":"impl Send for FlattenedEvent","synthetic":true,"types":[]},{"text":"impl Send for PathState","synthetic":true,"types":[]},{"text":"impl Send for Path","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for PathSlice&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Cursor","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; Send for Iter&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;SvgIter&gt; Send for PathEvents&lt;SvgIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SvgIter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for Flattened&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for SvgPathIter&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Transformed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for FromPolyline&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for BezierSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for LineSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; Send for SvgPathBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; Send for FlatteningBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FillRule","synthetic":true,"types":[]},{"text":"impl Send for VertexId","synthetic":true,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DecoderEarlyChange&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Bits","synthetic":true,"types":[]},{"text":"impl Send for LsbReader","synthetic":true,"types":[]},{"text":"impl Send for MsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for LsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for MsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Send for MmapOptions","synthetic":true,"types":[]},{"text":"impl Send for Mmap","synthetic":true,"types":[]},{"text":"impl Send for MmapMut","synthetic":true,"types":[]}];
implementors["minimp3"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;Send&gt; Send for Decoder&lt;R&gt;","synthetic":false,"types":[]}];
implementors["minimp3_sys"] = [{"text":"impl Send for __fsid_t","synthetic":true,"types":[]},{"text":"impl Send for mp3dec_frame_info_t","synthetic":true,"types":[]},{"text":"impl Send for mp3dec_t","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Send for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Send for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Send for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Send for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Send for MinReset","synthetic":true,"types":[]},{"text":"impl Send for ZeroReset","synthetic":true,"types":[]},{"text":"impl Send for FullReset","synthetic":true,"types":[]},{"text":"impl Send for InflateState","synthetic":true,"types":[]},{"text":"impl Send for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Send for MZFlush","synthetic":true,"types":[]},{"text":"impl Send for MZStatus","synthetic":true,"types":[]},{"text":"impl Send for MZError","synthetic":true,"types":[]},{"text":"impl Send for DataFormat","synthetic":true,"types":[]},{"text":"impl Send for StreamResult","synthetic":true,"types":[]}];
implementors["mint"] = [{"text":"impl&lt;T&gt; Send for RowMatrix2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix2x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix2x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix3x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix3x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix4x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix4x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RowMatrix4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix2x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix2x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix3x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix3x4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix4x2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix4x3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ColumnMatrix4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Quaternion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for EulerAngles&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IntraXYZ","synthetic":true,"types":[]},{"text":"impl Send for IntraZXZ","synthetic":true,"types":[]},{"text":"impl Send for IntraZYX","synthetic":true,"types":[]},{"text":"impl Send for ExtraXYZ","synthetic":true,"types":[]},{"text":"impl Send for ExtraZXZ","synthetic":true,"types":[]},{"text":"impl Send for ExtraZYX","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Vector3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Vector4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Point2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Point3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["minterpolate"] = [{"text":"impl&lt;T&gt; Send for InterpolationFunction&lt;T&gt;","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl Send for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl Send for Dynamic","synthetic":true,"types":[]},{"text":"impl Send for U1","synthetic":true,"types":[]},{"text":"impl Send for U0","synthetic":true,"types":[]},{"text":"impl Send for U2","synthetic":true,"types":[]},{"text":"impl Send for U3","synthetic":true,"types":[]},{"text":"impl Send for U4","synthetic":true,"types":[]},{"text":"impl Send for U5","synthetic":true,"types":[]},{"text":"impl Send for U6","synthetic":true,"types":[]},{"text":"impl Send for U7","synthetic":true,"types":[]},{"text":"impl Send for U8","synthetic":true,"types":[]},{"text":"impl Send for U9","synthetic":true,"types":[]},{"text":"impl Send for U10","synthetic":true,"types":[]},{"text":"impl Send for U11","synthetic":true,"types":[]},{"text":"impl Send for U12","synthetic":true,"types":[]},{"text":"impl Send for U13","synthetic":true,"types":[]},{"text":"impl Send for U14","synthetic":true,"types":[]},{"text":"impl Send for U15","synthetic":true,"types":[]},{"text":"impl Send for U16","synthetic":true,"types":[]},{"text":"impl Send for U17","synthetic":true,"types":[]},{"text":"impl Send for U18","synthetic":true,"types":[]},{"text":"impl Send for U19","synthetic":true,"types":[]},{"text":"impl Send for U20","synthetic":true,"types":[]},{"text":"impl Send for U21","synthetic":true,"types":[]},{"text":"impl Send for U22","synthetic":true,"types":[]},{"text":"impl Send for U23","synthetic":true,"types":[]},{"text":"impl Send for U24","synthetic":true,"types":[]},{"text":"impl Send for U25","synthetic":true,"types":[]},{"text":"impl Send for U26","synthetic":true,"types":[]},{"text":"impl Send for U27","synthetic":true,"types":[]},{"text":"impl Send for U28","synthetic":true,"types":[]},{"text":"impl Send for U29","synthetic":true,"types":[]},{"text":"impl Send for U30","synthetic":true,"types":[]},{"text":"impl Send for U31","synthetic":true,"types":[]},{"text":"impl Send for U32","synthetic":true,"types":[]},{"text":"impl Send for U33","synthetic":true,"types":[]},{"text":"impl Send for U34","synthetic":true,"types":[]},{"text":"impl Send for U35","synthetic":true,"types":[]},{"text":"impl Send for U36","synthetic":true,"types":[]},{"text":"impl Send for U37","synthetic":true,"types":[]},{"text":"impl Send for U38","synthetic":true,"types":[]},{"text":"impl Send for U39","synthetic":true,"types":[]},{"text":"impl Send for U40","synthetic":true,"types":[]},{"text":"impl Send for U41","synthetic":true,"types":[]},{"text":"impl Send for U42","synthetic":true,"types":[]},{"text":"impl Send for U43","synthetic":true,"types":[]},{"text":"impl Send for U44","synthetic":true,"types":[]},{"text":"impl Send for U45","synthetic":true,"types":[]},{"text":"impl Send for U46","synthetic":true,"types":[]},{"text":"impl Send for U47","synthetic":true,"types":[]},{"text":"impl Send for U48","synthetic":true,"types":[]},{"text":"impl Send for U49","synthetic":true,"types":[]},{"text":"impl Send for U50","synthetic":true,"types":[]},{"text":"impl Send for U51","synthetic":true,"types":[]},{"text":"impl Send for U52","synthetic":true,"types":[]},{"text":"impl Send for U53","synthetic":true,"types":[]},{"text":"impl Send for U54","synthetic":true,"types":[]},{"text":"impl Send for U55","synthetic":true,"types":[]},{"text":"impl Send for U56","synthetic":true,"types":[]},{"text":"impl Send for U57","synthetic":true,"types":[]},{"text":"impl Send for U58","synthetic":true,"types":[]},{"text":"impl Send for U59","synthetic":true,"types":[]},{"text":"impl Send for U60","synthetic":true,"types":[]},{"text":"impl Send for U61","synthetic":true,"types":[]},{"text":"impl Send for U62","synthetic":true,"types":[]},{"text":"impl Send for U63","synthetic":true,"types":[]},{"text":"impl Send for U64","synthetic":true,"types":[]},{"text":"impl Send for U65","synthetic":true,"types":[]},{"text":"impl Send for U66","synthetic":true,"types":[]},{"text":"impl Send for U67","synthetic":true,"types":[]},{"text":"impl Send for U68","synthetic":true,"types":[]},{"text":"impl Send for U69","synthetic":true,"types":[]},{"text":"impl Send for U70","synthetic":true,"types":[]},{"text":"impl Send for U71","synthetic":true,"types":[]},{"text":"impl Send for U72","synthetic":true,"types":[]},{"text":"impl Send for U73","synthetic":true,"types":[]},{"text":"impl Send for U74","synthetic":true,"types":[]},{"text":"impl Send for U75","synthetic":true,"types":[]},{"text":"impl Send for U76","synthetic":true,"types":[]},{"text":"impl Send for U77","synthetic":true,"types":[]},{"text":"impl Send for U78","synthetic":true,"types":[]},{"text":"impl Send for U79","synthetic":true,"types":[]},{"text":"impl Send for U80","synthetic":true,"types":[]},{"text":"impl Send for U81","synthetic":true,"types":[]},{"text":"impl Send for U82","synthetic":true,"types":[]},{"text":"impl Send for U83","synthetic":true,"types":[]},{"text":"impl Send for U84","synthetic":true,"types":[]},{"text":"impl Send for U85","synthetic":true,"types":[]},{"text":"impl Send for U86","synthetic":true,"types":[]},{"text":"impl Send for U87","synthetic":true,"types":[]},{"text":"impl Send for U88","synthetic":true,"types":[]},{"text":"impl Send for U89","synthetic":true,"types":[]},{"text":"impl Send for U90","synthetic":true,"types":[]},{"text":"impl Send for U91","synthetic":true,"types":[]},{"text":"impl Send for U92","synthetic":true,"types":[]},{"text":"impl Send for U93","synthetic":true,"types":[]},{"text":"impl Send for U94","synthetic":true,"types":[]},{"text":"impl Send for U95","synthetic":true,"types":[]},{"text":"impl Send for U96","synthetic":true,"types":[]},{"text":"impl Send for U97","synthetic":true,"types":[]},{"text":"impl Send for U98","synthetic":true,"types":[]},{"text":"impl Send for U99","synthetic":true,"types":[]},{"text":"impl Send for U100","synthetic":true,"types":[]},{"text":"impl Send for U101","synthetic":true,"types":[]},{"text":"impl Send for U102","synthetic":true,"types":[]},{"text":"impl Send for U103","synthetic":true,"types":[]},{"text":"impl Send for U104","synthetic":true,"types":[]},{"text":"impl Send for U105","synthetic":true,"types":[]},{"text":"impl Send for U106","synthetic":true,"types":[]},{"text":"impl Send for U107","synthetic":true,"types":[]},{"text":"impl Send for U108","synthetic":true,"types":[]},{"text":"impl Send for U109","synthetic":true,"types":[]},{"text":"impl Send for U110","synthetic":true,"types":[]},{"text":"impl Send for U111","synthetic":true,"types":[]},{"text":"impl Send for U112","synthetic":true,"types":[]},{"text":"impl Send for U113","synthetic":true,"types":[]},{"text":"impl Send for U114","synthetic":true,"types":[]},{"text":"impl Send for U115","synthetic":true,"types":[]},{"text":"impl Send for U116","synthetic":true,"types":[]},{"text":"impl Send for U117","synthetic":true,"types":[]},{"text":"impl Send for U118","synthetic":true,"types":[]},{"text":"impl Send for U119","synthetic":true,"types":[]},{"text":"impl Send for U120","synthetic":true,"types":[]},{"text":"impl Send for U121","synthetic":true,"types":[]},{"text":"impl Send for U122","synthetic":true,"types":[]},{"text":"impl Send for U123","synthetic":true,"types":[]},{"text":"impl Send for U124","synthetic":true,"types":[]},{"text":"impl Send for U125","synthetic":true,"types":[]},{"text":"impl Send for U126","synthetic":true,"types":[]},{"text":"impl Send for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for MatrixIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for MatrixIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Send for RowIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Send for ColumnIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Send for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C, S&gt; Send for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Send for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Send for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl Send for LpNorm","synthetic":true,"types":[]},{"text":"impl Send for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Send for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Send for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for TGeneral","synthetic":true,"types":[]},{"text":"impl Send for TProjective","synthetic":true,"types":[]},{"text":"impl Send for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !Send for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; Send for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Send for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Send for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Send for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Send, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Send for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Send, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Send for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl&lt;'d&gt; Send for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Errno","synthetic":true,"types":[]},{"text":"impl Send for AtFlags","synthetic":true,"types":[]},{"text":"impl Send for OFlag","synthetic":true,"types":[]},{"text":"impl Send for SealFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FlockArg","synthetic":true,"types":[]},{"text":"impl Send for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Send for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Send for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl !Send for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Send for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Send for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MntFlags","synthetic":true,"types":[]},{"text":"impl Send for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl Send for MqAttr","synthetic":true,"types":[]},{"text":"impl Send for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Send for PollFd","synthetic":true,"types":[]},{"text":"impl Send for PollFlags","synthetic":true,"types":[]},{"text":"impl Send for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Send for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Send for PtyMaster","synthetic":true,"types":[]},{"text":"impl Send for CloneFlags","synthetic":true,"types":[]},{"text":"impl Send for CpuSet","synthetic":true,"types":[]},{"text":"impl Send for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Send for LioOpcode","synthetic":true,"types":[]},{"text":"impl Send for LioMode","synthetic":true,"types":[]},{"text":"impl Send for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EpollFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollOp","synthetic":true,"types":[]},{"text":"impl Send for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollEvent","synthetic":true,"types":[]},{"text":"impl Send for EfdFlags","synthetic":true,"types":[]},{"text":"impl Send for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Send for ProtFlags","synthetic":true,"types":[]},{"text":"impl Send for MapFlags","synthetic":true,"types":[]},{"text":"impl Send for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for QuotaType","synthetic":true,"types":[]},{"text":"impl Send for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Send for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Send for Dqblk","synthetic":true,"types":[]},{"text":"impl Send for RebootMode","synthetic":true,"types":[]},{"text":"impl Send for FdSet","synthetic":true,"types":[]},{"text":"impl !Send for SigEvent","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl Send for SignalIterator","synthetic":true,"types":[]},{"text":"impl Send for SaFlags","synthetic":true,"types":[]},{"text":"impl Send for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Send for SigSet","synthetic":true,"types":[]},{"text":"impl Send for SigHandler","synthetic":true,"types":[]},{"text":"impl Send for SigAction","synthetic":true,"types":[]},{"text":"impl Send for SigevNotify","synthetic":true,"types":[]},{"text":"impl Send for SfdFlags","synthetic":true,"types":[]},{"text":"impl Send for SignalFd","synthetic":true,"types":[]},{"text":"impl Send for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Send for AlgAddr","synthetic":true,"types":[]},{"text":"impl Send for LinkAddr","synthetic":true,"types":[]},{"text":"impl Send for AddressFamily","synthetic":true,"types":[]},{"text":"impl Send for InetAddr","synthetic":true,"types":[]},{"text":"impl Send for IpAddr","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Send for UnixAddr","synthetic":true,"types":[]},{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Send for ReusePort","synthetic":true,"types":[]},{"text":"impl Send for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Send for Linger","synthetic":true,"types":[]},{"text":"impl Send for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Send for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Send for SendTimeout","synthetic":true,"types":[]},{"text":"impl Send for Broadcast","synthetic":true,"types":[]},{"text":"impl Send for OobInline","synthetic":true,"types":[]},{"text":"impl Send for SocketError","synthetic":true,"types":[]},{"text":"impl Send for KeepAlive","synthetic":true,"types":[]},{"text":"impl Send for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Send for RcvBuf","synthetic":true,"types":[]},{"text":"impl Send for SndBuf","synthetic":true,"types":[]},{"text":"impl Send for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Send for SndBufForce","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for AcceptConn","synthetic":true,"types":[]},{"text":"impl Send for OriginalDst","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Send for IpTransparent","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for PassCred","synthetic":true,"types":[]},{"text":"impl Send for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Send for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Send for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Send for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for SockProtocol","synthetic":true,"types":[]},{"text":"impl Send for SockFlag","synthetic":true,"types":[]},{"text":"impl Send for MsgFlags","synthetic":true,"types":[]},{"text":"impl Send for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Send for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Send for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CmsgSpace&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SockLevel","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl Send for SFlag","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Send for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Send for FsFlags","synthetic":true,"types":[]},{"text":"impl Send for Statvfs","synthetic":true,"types":[]},{"text":"impl Send for SysInfo","synthetic":true,"types":[]},{"text":"impl Send for Termios","synthetic":true,"types":[]},{"text":"impl Send for BaudRate","synthetic":true,"types":[]},{"text":"impl Send for SetArg","synthetic":true,"types":[]},{"text":"impl Send for FlushArg","synthetic":true,"types":[]},{"text":"impl Send for FlowArg","synthetic":true,"types":[]},{"text":"impl Send for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Send for InputFlags","synthetic":true,"types":[]},{"text":"impl Send for OutputFlags","synthetic":true,"types":[]},{"text":"impl Send for ControlFlags","synthetic":true,"types":[]},{"text":"impl Send for LocalFlags","synthetic":true,"types":[]},{"text":"impl Send for TimeSpec","synthetic":true,"types":[]},{"text":"impl Send for TimeVal","synthetic":true,"types":[]},{"text":"impl Send for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for UtsName","synthetic":true,"types":[]},{"text":"impl Send for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Send for WaitStatus","synthetic":true,"types":[]},{"text":"impl Send for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Send for InitFlags","synthetic":true,"types":[]},{"text":"impl Send for Inotify","synthetic":true,"types":[]},{"text":"impl Send for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Send for InotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for UContext","synthetic":true,"types":[]},{"text":"impl Send for Uid","synthetic":true,"types":[]},{"text":"impl Send for Gid","synthetic":true,"types":[]},{"text":"impl Send for Pid","synthetic":true,"types":[]},{"text":"impl Send for ForkResult","synthetic":true,"types":[]},{"text":"impl Send for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Send for Whence","synthetic":true,"types":[]},{"text":"impl Send for PathconfVar","synthetic":true,"types":[]},{"text":"impl Send for SysconfVar","synthetic":true,"types":[]},{"text":"impl Send for AccessFlags","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Dir","synthetic":false,"types":[]}];
implementors["nodrop"] = [{"text":"impl&lt;T&gt; Send for NoDrop&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Send for Sign","synthetic":true,"types":[]},{"text":"impl Send for BigInt","synthetic":true,"types":[]},{"text":"impl Send for BigUint","synthetic":true,"types":[]},{"text":"impl Send for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Send for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Send for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Send for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]}];
implementors["object"] = [{"text":"impl Send for Architecture","synthetic":true,"types":[]},{"text":"impl Send for AddressSize","synthetic":true,"types":[]},{"text":"impl Send for BinaryFormat","synthetic":true,"types":[]},{"text":"impl Send for SectionKind","synthetic":true,"types":[]},{"text":"impl Send for SymbolKind","synthetic":true,"types":[]},{"text":"impl Send for SymbolScope","synthetic":true,"types":[]},{"text":"impl Send for RelocationKind","synthetic":true,"types":[]},{"text":"impl Send for RelocationEncoding","synthetic":true,"types":[]},{"text":"impl Send for FileFlags","synthetic":true,"types":[]},{"text":"impl Send for SectionFlags","synthetic":true,"types":[]},{"text":"impl&lt;Section&gt; Send for SymbolFlags&lt;Section&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Endianness","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]},{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Bytes&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for Bytes&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for StringTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for File&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Segment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for Section&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for SymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for RelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for CoffFile&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SectionTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSegmentIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSegment&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSectionIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSection&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SymbolTable&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffSymbolIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for CoffRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for ElfFile&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSegmentIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSegment&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSectionIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSection&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfSymbolIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RelocationSections","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Elf&gt; Send for ElfRelocationIterator&lt;'data, 'file, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::ProgramHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rel: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Rela: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::SectionHeader: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Sym: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for ElfNoteIterator&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::Endian: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Elf&gt; Send for ElfNote&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Elf as FileHeader&gt;::NoteHeader: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Send for MachOFile&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSegmentIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSegment&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Segment: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSectionIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSection&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Mach&gt; Send for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachOSymbolIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Mach&gt; Send for MachORelocationIterator&lt;'data, 'file, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Endian: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Nlist: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Mach as MachHeader&gt;::Section: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, Pe&gt; Send for PeFile&lt;'data, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSegmentIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSegment&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSectionIterator&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file, Pe&gt; Send for PeSection&lt;'data, 'file, Pe&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Pe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, 'file&gt; Send for PeRelocationIterator&lt;'data, 'file&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for SectionIndex","synthetic":true,"types":[]},{"text":"impl Send for SymbolIndex","synthetic":true,"types":[]},{"text":"impl Send for SymbolSection","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for Symbol&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for SymbolMap&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for RelocationTarget","synthetic":true,"types":[]},{"text":"impl Send for Relocation","synthetic":true,"types":[]},{"text":"impl&lt;'data&gt; Send for CompressedData&lt;'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompressionFormat","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FileHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FileHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Ident","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SectionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SectionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CompressionHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CompressionHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Sym32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Sym64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Syminfo32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Syminfo64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rel32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rela32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rel64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Rela64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ProgramHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ProgramHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dyn32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dyn64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FatHeader","synthetic":true,"types":[]},{"text":"impl Send for FatArch32","synthetic":true,"types":[]},{"text":"impl Send for FatArch64","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MachHeader32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for MachHeader64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LoadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LcStr&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SegmentCommand32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SegmentCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Section32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Section64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Fvmlib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FvmlibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Dylib&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubFrameworkCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubClientCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubUmbrellaCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SubLibraryCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PreboundDylibCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylinkerCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ThreadCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RoutinesCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RoutinesCommand_64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DysymtabCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibTableOfContents&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibModule32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibModule64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DylibReference&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TwolevelHintsCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for TwolevelHint&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for PrebindCksumCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UuidCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for RpathCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LinkeditDataCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncryptionInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EncryptionInfoCommand64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for VersionMinCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BuildVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BuildToolVersion&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DyldInfoCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for LinkerOptionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SymSegCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IdentCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for FvmfileCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EntryPointCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SourceVersionCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for DataInCodeEntry&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for NoteCommand&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Nlist32&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Nlist64&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Relocation&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RelocationInfo","synthetic":true,"types":[]},{"text":"impl Send for ScatteredRelocationInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageDosHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageOs2Header","synthetic":true,"types":[]},{"text":"impl Send for ImageVxdHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageFileHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageDataDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageOptionalHeader32","synthetic":true,"types":[]},{"text":"impl Send for ImageRomOptionalHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageOptionalHeader64","synthetic":true,"types":[]},{"text":"impl Send for ImageNtHeaders64","synthetic":true,"types":[]},{"text":"impl Send for ImageNtHeaders32","synthetic":true,"types":[]},{"text":"impl Send for ImageRomHeaders","synthetic":true,"types":[]},{"text":"impl Send for Guid","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeader","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeaderV2","synthetic":true,"types":[]},{"text":"impl Send for AnonObjectHeaderBigobj","synthetic":true,"types":[]},{"text":"impl Send for ImageSectionHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbol","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolBytes","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolEx","synthetic":true,"types":[]},{"text":"impl Send for ImageSymbolExBytes","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolTokenDef","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolFunction","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolFunctionBeginEnd","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolWeak","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolSection","synthetic":true,"types":[]},{"text":"impl Send for ImageAuxSymbolCrc","synthetic":true,"types":[]},{"text":"impl Send for ImageRelocation","synthetic":true,"types":[]},{"text":"impl Send for ImageLinenumber","synthetic":true,"types":[]},{"text":"impl Send for ImageBaseRelocation","synthetic":true,"types":[]},{"text":"impl Send for ImageArchiveMemberHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageExportDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageImportByName","synthetic":true,"types":[]},{"text":"impl Send for ImageTlsDirectory64","synthetic":true,"types":[]},{"text":"impl Send for ImageTlsDirectory32","synthetic":true,"types":[]},{"text":"impl Send for ImageImportDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageBoundImportDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageBoundForwarderRef","synthetic":true,"types":[]},{"text":"impl Send for ImageDelayloadDescriptor","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectoryEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirectoryString","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDirStringU","synthetic":true,"types":[]},{"text":"impl Send for ImageResourceDataEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigCodeIntegrity","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocationTable","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation32","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation64","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation32V2","synthetic":true,"types":[]},{"text":"impl Send for ImageDynamicRelocation64V2","synthetic":true,"types":[]},{"text":"impl Send for ImagePrologueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageEpilogueDynamicRelocationHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigDirectory32","synthetic":true,"types":[]},{"text":"impl Send for ImageLoadConfigDirectory64","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchBase","synthetic":true,"types":[]},{"text":"impl Send for ImageHotPatchHashes","synthetic":true,"types":[]},{"text":"impl Send for ImageArmRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageArm64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageAlpha64RuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageAlphaRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageRuntimeFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveConfig32","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveConfig64","synthetic":true,"types":[]},{"text":"impl Send for ImageEnclaveImport","synthetic":true,"types":[]},{"text":"impl Send for ImageDebugDirectory","synthetic":true,"types":[]},{"text":"impl Send for ImageCoffSymbolsHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageDebugMisc","synthetic":true,"types":[]},{"text":"impl Send for ImageFunctionEntry","synthetic":true,"types":[]},{"text":"impl Send for ImageFunctionEntry64","synthetic":true,"types":[]},{"text":"impl Send for ImageSeparateDebugHeader","synthetic":true,"types":[]},{"text":"impl Send for NonPagedDebugInfo","synthetic":true,"types":[]},{"text":"impl Send for ImageArchitectureEntry","synthetic":true,"types":[]},{"text":"impl Send for ImportObjectHeader","synthetic":true,"types":[]},{"text":"impl Send for ImageCor20Header","synthetic":true,"types":[]}];
implementors["ogg"] = [{"text":"impl Send for OggReadError","synthetic":true,"types":[]},{"text":"impl Send for OggPage","synthetic":true,"types":[]},{"text":"impl Send for PageParser","synthetic":true,"types":[]},{"text":"impl Send for BasePacketReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PacketReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PacketWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PacketWriteEndInfo","synthetic":true,"types":[]},{"text":"impl Send for Packet","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Send for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["palette"] = [{"text":"impl Send for Equations","synthetic":true,"types":[]},{"text":"impl Send for Equation","synthetic":true,"types":[]},{"text":"impl Send for Parameters","synthetic":true,"types":[]},{"text":"impl Send for Parameter","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Send for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Send for Gradient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Send for Take&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Send for Slice&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Send for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Send for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Send for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Send for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Send for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ConeResponseMatrices&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Srgb","synthetic":true,"types":[]},{"text":"impl&lt;S, N&gt; Send for Gamma&lt;S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for GammaFn&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for F2p2","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Linear&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for LinearFn","synthetic":true,"types":[]},{"text":"impl Send for A","synthetic":true,"types":[]},{"text":"impl Send for B","synthetic":true,"types":[]},{"text":"impl Send for C","synthetic":true,"types":[]},{"text":"impl Send for D50","synthetic":true,"types":[]},{"text":"impl Send for D55","synthetic":true,"types":[]},{"text":"impl Send for D65","synthetic":true,"types":[]},{"text":"impl Send for D75","synthetic":true,"types":[]},{"text":"impl Send for E","synthetic":true,"types":[]},{"text":"impl Send for F2","synthetic":true,"types":[]},{"text":"impl Send for F7","synthetic":true,"types":[]},{"text":"impl Send for F11","synthetic":true,"types":[]},{"text":"impl Send for D50Degree10","synthetic":true,"types":[]},{"text":"impl Send for D55Degree10","synthetic":true,"types":[]},{"text":"impl Send for D65Degree10","synthetic":true,"types":[]},{"text":"impl Send for D75Degree10","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for Color&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as RgbSpace&gt;::WhitePoint: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Send for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Send for Condvar","synthetic":true,"types":[]},{"text":"impl Send for OnceState","synthetic":true,"types":[]},{"text":"impl Send for Once","synthetic":true,"types":[]},{"text":"impl Send for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Send for RawMutex","synthetic":true,"types":[]},{"text":"impl Send for RawRwLock","synthetic":true,"types":[]},{"text":"impl Send for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Send for ParkResult","synthetic":true,"types":[]},{"text":"impl Send for UnparkResult","synthetic":true,"types":[]},{"text":"impl Send for RequeueOp","synthetic":true,"types":[]},{"text":"impl Send for FilterOp","synthetic":true,"types":[]},{"text":"impl Send for UnparkToken","synthetic":true,"types":[]},{"text":"impl Send for ParkToken","synthetic":true,"types":[]},{"text":"impl Send for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for OrderedMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Send for Decoded","synthetic":true,"types":[]},{"text":"impl Send for DecodingError","synthetic":true,"types":[]},{"text":"impl Send for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Send for OutputInfo","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EncodingError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FilterType","synthetic":true,"types":[]},{"text":"impl Send for ColorType","synthetic":true,"types":[]},{"text":"impl Send for BitDepth","synthetic":true,"types":[]},{"text":"impl Send for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Send for Unit","synthetic":true,"types":[]},{"text":"impl Send for FrameControl","synthetic":true,"types":[]},{"text":"impl Send for AnimationControl","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for Info","synthetic":true,"types":[]},{"text":"impl Send for Transformations","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Send for YesS3","synthetic":true,"types":[]},{"text":"impl Send for NoS3","synthetic":true,"types":[]},{"text":"impl Send for YesS4","synthetic":true,"types":[]},{"text":"impl Send for NoS4","synthetic":true,"types":[]},{"text":"impl Send for YesA1","synthetic":true,"types":[]},{"text":"impl Send for NoA1","synthetic":true,"types":[]},{"text":"impl Send for YesA2","synthetic":true,"types":[]},{"text":"impl Send for NoA2","synthetic":true,"types":[]},{"text":"impl Send for YesNI","synthetic":true,"types":[]},{"text":"impl Send for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Send for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Send for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for vec128_storage","synthetic":true,"types":[]},{"text":"impl Send for vec256_storage","synthetic":true,"types":[]},{"text":"impl Send for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl !Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Send for SpanRange","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Send for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quickcheck"] = [{"text":"impl&lt;R&gt; Send for StdGen&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for StdThreadGen","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for QuickCheck&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TestResult","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for BernoulliError","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UniformDuration","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WeightedError","synthetic":true,"types":[]},{"text":"impl Send for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Send for Open01","synthetic":true,"types":[]},{"text":"impl Send for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Send for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntropyRng","synthetic":true,"types":[]},{"text":"impl Send for StepRng","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl Send for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Send for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Send for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Send for UnitSphere","synthetic":true,"types":[]},{"text":"impl Send for UnitBall","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitDisc","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Gamma&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for ChiSquared&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for FisherF&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FisherFError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for StudentT&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Beta&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BetaError","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Normal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for LogNormal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Exp&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Pareto&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Pert&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PertError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Poisson&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Cauchy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Dirichlet&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Triangular&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TriangularError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Weibull&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Send for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl Send for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl Send for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl !Send for X11Handle","synthetic":true,"types":[]},{"text":"impl !Send for WaylandHandle","synthetic":true,"types":[]},{"text":"impl !Send for RawWindowHandle","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Chain&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Chunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cloned&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Copied&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Enumerate&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Flatten&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Send for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MinLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MaxLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Send for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Send for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PanicFuse&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatN&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Rev&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Send for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Send for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for ZipEq&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StepBy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Send for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Send for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Configuration","synthetic":true,"types":[]},{"text":"impl !Send for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]}];
implementors["relevant"] = [{"text":"impl Send for Relevant","synthetic":true,"types":[]}];
implementors["rendy_chain"] = [{"text":"impl&lt;R&gt; Send for Link&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for LinkNode&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Chain&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Unsynchronized","synthetic":true,"types":[]},{"text":"impl Send for Chains","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for State&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl Send for Image","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Family&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Queue&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SubmissionId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Submission&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Schedule&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Signal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Barrier&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;S, W&gt; Send for SyncData&lt;S, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]}];
implementors["rendy_command"] = [{"text":"impl Send for DrawCommand","synthetic":true,"types":[]},{"text":"impl Send for DrawIndexedCommand","synthetic":true,"types":[]},{"text":"impl Send for DispatchCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; Send for EncoderCommon&lt;'a, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for RenderPassEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for RenderPassInlineEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for RenderPassSecondaryEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C, L&gt; Send for Encoder&lt;'a, B, C, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PrimaryLevel","synthetic":true,"types":[]},{"text":"impl Send for SecondaryLevel","synthetic":true,"types":[]},{"text":"impl Send for IndividualReset","synthetic":true,"types":[]},{"text":"impl Send for NoIndividualReset","synthetic":true,"types":[]},{"text":"impl Send for InitialState","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; Send for RecordingState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; Send for ExecutableState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for PendingState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InvalidState","synthetic":true,"types":[]},{"text":"impl Send for OneShot","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MultiShot&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SimultaneousUse","synthetic":true,"types":[]},{"text":"impl Send for NoSimultaneousUse","synthetic":true,"types":[]},{"text":"impl Send for RenderPassContinue","synthetic":true,"types":[]},{"text":"impl Send for OutsideRenderPass","synthetic":true,"types":[]},{"text":"impl Send for Transfer","synthetic":true,"types":[]},{"text":"impl Send for Execute","synthetic":true,"types":[]},{"text":"impl Send for Compute","synthetic":true,"types":[]},{"text":"impl Send for Graphics","synthetic":true,"types":[]},{"text":"impl Send for General","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Queue&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, W, C, S&gt; Send for Submission&lt;B, W, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FamilyId","synthetic":true,"types":[]},{"text":"impl Send for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; Send for Family&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Families&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FenceEpoch","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Fence&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C, R&gt; Send for CommandPool&lt;B, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, S, L, P&gt; Send for Submit&lt;B, S, L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::CommandBuffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;FamilyId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; Send for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::CommandBuffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;FamilyId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Relevant: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rendy_descriptor"] = [{"text":"impl&lt;B&gt; Send for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DescriptorAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorPool: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DescriptorRanges","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DescriptorRangesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_factory"] = [{"text":"impl&lt;B&gt; Send for Barriers&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Blitter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BlitRegion","synthetic":true,"types":[]},{"text":"impl Send for BlitImageState","synthetic":true,"types":[]},{"text":"impl&lt;D, H, Q&gt; Send for Config&lt;D, H, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OneGraphicsQueue","synthetic":true,"types":[]},{"text":"impl Send for SavedQueueConfig","synthetic":true,"types":[]},{"text":"impl Send for BasicHeapsConfigure","synthetic":true,"types":[]},{"text":"impl Send for SavedHeapsConfig","synthetic":true,"types":[]},{"text":"impl Send for BasicDevicesConfigure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Factory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorPool: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PhysicalDevice: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BufferState","synthetic":true,"types":[]},{"text":"impl Send for ImageState","synthetic":true,"types":[]},{"text":"impl Send for ImageStateOrLayout","synthetic":true,"types":[]}];
implementors["rendy_frame"] = [{"text":"impl&lt;'a, T, I, P&gt; Send for CirqueRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Send for InitialRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; Send for ReadyRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; Send for Cirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; Send for DependentCirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Frame","synthetic":true,"types":[]},{"text":"impl Send for CompleteFrame","synthetic":true,"types":[]},{"text":"impl Send for FramesRange","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Frames&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_graph"] = [{"text":"impl&lt;B, T:&nbsp;?Sized&gt; Send for Graph&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Semaphore: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for GraphContext&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !Send for GraphBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for PresentBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; Send for SimpleRenderGroup&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SimpleRenderGroupDesc&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !Send for SubpassBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !Send for RenderPassNodeBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for PrepareResult","synthetic":true,"types":[]},{"text":"impl Send for BufferAccess","synthetic":true,"types":[]},{"text":"impl Send for BufferBarrier","synthetic":true,"types":[]},{"text":"impl Send for NodeBuffer","synthetic":true,"types":[]},{"text":"impl Send for ImageAccess","synthetic":true,"types":[]},{"text":"impl Send for ImageBarrier","synthetic":true,"types":[]},{"text":"impl Send for NodeImage","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized, N&gt; Send for DescBuilder&lt;B, T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BufferId","synthetic":true,"types":[]},{"text":"impl Send for ImageId","synthetic":true,"types":[]},{"text":"impl Send for NodeId","synthetic":true,"types":[]},{"text":"impl&lt;B:&nbsp;Backend&gt; Send for PresentNode&lt;B&gt;","synthetic":false,"types":[]}];
implementors["rendy_memory"] = [{"text":"impl Send for DedicatedAllocator","synthetic":true,"types":[]},{"text":"impl Send for DynamicConfig","synthetic":true,"types":[]},{"text":"impl Send for LinearConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for LinearAllocator&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for HeapsError","synthetic":true,"types":[]},{"text":"impl Send for HeapsConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Heaps&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for MemoryBlock&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Send for NonCoherent","synthetic":true,"types":[]},{"text":"impl Send for Coherent","synthetic":true,"types":[]},{"text":"impl Send for MaybeCoherent","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&nbsp;=&nbsp;MaybeCoherent&gt; !Send for MappedRange&lt;'a, B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Memory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Data","synthetic":true,"types":[]},{"text":"impl Send for Dynamic","synthetic":true,"types":[]},{"text":"impl Send for Upload","synthetic":true,"types":[]},{"text":"impl Send for Download","synthetic":true,"types":[]},{"text":"impl Send for MemoryUsageValue","synthetic":true,"types":[]},{"text":"impl Send for MemoryUtilization","synthetic":true,"types":[]},{"text":"impl Send for MemoryHeapUtilization","synthetic":true,"types":[]},{"text":"impl Send for MemoryTypeUtilization","synthetic":true,"types":[]},{"text":"impl Send for TotalMemoryUtilization","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DedicatedBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Send for DynamicBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Send for DynamicAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Send for LinearBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Backend,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rendy_mesh"] = [{"text":"impl Send for VertexBufferLayout","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for IndexBuffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MeshBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Mesh&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Incompatible","synthetic":true,"types":[]}];
implementors["rendy_resource"] = [{"text":"impl Send for BufferInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Buffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Escape&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Terminal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Handle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Image&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ImageViewInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ImageView&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DescriptorSetInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DescriptorSetLayout&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ResourceTracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SamplerCache&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Sampler&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_shader"] = [{"text":"impl Send for SpirvShader","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ShaderSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SpecConstantSet","synthetic":true,"types":[]},{"text":"impl Send for ShaderSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ShaderStorage&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_texture"] = [{"text":"impl Send for Repr","synthetic":true,"types":[]},{"text":"impl Send for TextureKind","synthetic":true,"types":[]},{"text":"impl Send for ImageTextureConfig","synthetic":true,"types":[]},{"text":"impl Send for Unorm","synthetic":true,"types":[]},{"text":"impl Send for Inorm","synthetic":true,"types":[]},{"text":"impl Send for Uint","synthetic":true,"types":[]},{"text":"impl Send for Int","synthetic":true,"types":[]},{"text":"impl Send for Uscaled","synthetic":true,"types":[]},{"text":"impl Send for Iscaled","synthetic":true,"types":[]},{"text":"impl Send for Srgb","synthetic":true,"types":[]},{"text":"impl Send for Float","synthetic":true,"types":[]},{"text":"impl Send for _8","synthetic":true,"types":[]},{"text":"impl Send for _16","synthetic":true,"types":[]},{"text":"impl Send for _32","synthetic":true,"types":[]},{"text":"impl Send for _64","synthetic":true,"types":[]},{"text":"impl Send for R","synthetic":true,"types":[]},{"text":"impl Send for Rg","synthetic":true,"types":[]},{"text":"impl Send for Rgb","synthetic":true,"types":[]},{"text":"impl Send for Rgba","synthetic":true,"types":[]},{"text":"impl Send for Bgr","synthetic":true,"types":[]},{"text":"impl Send for Bgra","synthetic":true,"types":[]},{"text":"impl Send for Abgr","synthetic":true,"types":[]},{"text":"impl&lt;C, S, T&gt; Send for Pixel&lt;C, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as PixelRepr&lt;S, T&gt;&gt;::Repr: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Texture&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for MipLevels","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TextureBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_util"] = [{"text":"impl Send for AttrUuid","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for Tangent","synthetic":true,"types":[]},{"text":"impl Send for TexCoord","synthetic":true,"types":[]},{"text":"impl Send for VertexFormat","synthetic":true,"types":[]},{"text":"impl&lt;N, I&gt; Send for AttrGenIter&lt;N, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Attribute","synthetic":true,"types":[]},{"text":"impl Send for PosColor","synthetic":true,"types":[]},{"text":"impl Send for PosNorm","synthetic":true,"types":[]},{"text":"impl Send for PosColorNorm","synthetic":true,"types":[]},{"text":"impl Send for PosTex","synthetic":true,"types":[]},{"text":"impl Send for PosNormTex","synthetic":true,"types":[]},{"text":"impl Send for PosNormTangTex","synthetic":true,"types":[]},{"text":"impl Send for Model","synthetic":true,"types":[]},{"text":"impl Send for SetLayout","synthetic":true,"types":[]},{"text":"impl Send for Layout","synthetic":true,"types":[]},{"text":"impl Send for InstanceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Instance&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl Send for DeviceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Device&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_wsi"] = [{"text":"impl&lt;B&gt; Send for Surface&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Target&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for NextImages&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rental"] = [{"text":"impl Send for SimpleRef","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRef_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRef_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleMut","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleMut_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleMut_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleRefDebug","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefDebug_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefDebug_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleRefClone","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefClone_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefClone_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleRefDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleMutDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleMutDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleMutDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleRefCovariant","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefCovariant_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; Send for SimpleRefCovariant_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SimpleRefMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; Send for SimpleRefMap_Borrow&lt;'head, 'iref, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; Send for SimpleRefMap_BorrowMut&lt;'head, 'iref, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Send for RentRef&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Send for RentRef_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Send for RentRef_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Send for RentMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Send for RentMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Send for RentMut_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !Send for RentRefCell&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Send for RentRefCell_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Send for RentRefCell_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !Send for RentRefCellMut&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Send for RentRefCellMut_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Send for RentRefCellMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !Send for RentMutex&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Send for RentMutex_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Send for RentMutex_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !Send for RentRwLock&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Send for RentRwLock_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Send for RentRwLock_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !Send for RentRwLockMut&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; Send for RentRwLockMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !Send for RentRwLockMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, H&gt; Send for RentalError&lt;E, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rodio"] = [{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl Send for SpatialSink","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecoderError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for DynamicMixerController&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for DynamicMixer&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SourcesQueueInput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SourcesQueueOutput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Amplify&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for BltFilter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Buffered&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ChannelVolume&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Delay&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Done&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Empty&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FadeIn&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FromFactoryIter&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FromIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; Send for Mix&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I1 as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I2 as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Pausable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for PeriodicAccess&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Repeat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; Send for SamplesConverter&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SineWave","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Spatial&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Speed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Stoppable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TakeDuration&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; Send for UniformSourceIterator&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Zero&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StaticSamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ron"] = [{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl&lt;'de&gt; Send for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl Send for PrettyConfig","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for Compound&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for Map","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Float","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Extensions","synthetic":true,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl&lt;'a&gt; Send for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TryDemangleError","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl Send for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_version"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Channel","synthetic":true,"types":[]},{"text":"impl Send for VersionMeta","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N&gt; Send for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Line","synthetic":true,"types":[]},{"text":"impl Send for Curve","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; Send for Cache&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl Send for CacheBuilder","synthetic":true,"types":[]},{"text":"impl Send for CacheReadErr","synthetic":true,"types":[]},{"text":"impl Send for CacheWriteErr","synthetic":true,"types":[]},{"text":"impl Send for CachedBy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FontCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SharedBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Codepoint","synthetic":true,"types":[]},{"text":"impl Send for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Glyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SharedGlyphData","synthetic":true,"types":[]},{"text":"impl Send for HMetrics","synthetic":true,"types":[]},{"text":"impl Send for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ScaledGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PositionedGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IntoFontsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, I&gt; Send for GlyphIter&lt;'a, 'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for LayoutIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Segment","synthetic":true,"types":[]},{"text":"impl Send for Contour","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl Send for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; Send for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Send for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for SemVerError","synthetic":true,"types":[]},{"text":"impl Send for VersionReq","synthetic":true,"types":[]},{"text":"impl Send for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for VersionReq","synthetic":true,"types":[]},{"text":"impl Send for WildcardVersion","synthetic":true,"types":[]},{"text":"impl Send for Op","synthetic":true,"types":[]},{"text":"impl Send for Predicate","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl Send for Bytes","synthetic":true,"types":[]},{"text":"impl Send for ByteBuf","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for RawValue","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]}];
implementors["shred"] = [{"text":"impl Send for InvalidBorrow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Ref&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for RefMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrustCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Send for AsyncDispatcher&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for BatchAccessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BatchUncheckedWorld&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for DispatcherBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for Dispatcher&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Send for Par&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; Send for ParSeq&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Send for Seq&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MetaIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MetaIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for MetaTable&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;?Sized&gt; Send for AccessorCow&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as System&lt;'a&gt;&gt;::SystemData as DynamicSystemData&lt;'a&gt;&gt;::Accessor: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RunningTime","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StaticAccessor&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Send for Read&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Send for Write&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultProvider","synthetic":true,"types":[]},{"text":"impl Send for PanicHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Fetch&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for FetchMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResourceId","synthetic":true,"types":[]},{"text":"impl Send for World","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for DefaultBatchControllerSystem&lt;'a, 'b&gt;","synthetic":false,"types":[]}];
implementors["shrev"] = [{"text":"impl&lt;T&gt; Send for ReaderId&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for StorageIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for EventChannel&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["siphasher"] = [{"text":"impl Send for SipHasher13","synthetic":true,"types":[]},{"text":"impl Send for SipHasher24","synthetic":true,"types":[]},{"text":"impl Send for SipHasher","synthetic":true,"types":[]},{"text":"impl Send for Hash128","synthetic":true,"types":[]},{"text":"impl Send for SipHasher13","synthetic":true,"types":[]},{"text":"impl Send for SipHasher24","synthetic":true,"types":[]},{"text":"impl Send for SipHasher","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Send for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slice_deque"] = [{"text":"impl Send for AllocError","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Splice&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Send for DrainFilter&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Buffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for SliceDeque&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for IntoIter&lt;T&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send + Array&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Send for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl Send for DataDevice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DndEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for DataOffer","synthetic":true,"types":[]},{"text":"impl Send for ReadPipe","synthetic":true,"types":[]},{"text":"impl Send for DataSource","synthetic":true,"types":[]},{"text":"impl Send for DataSourceEvent","synthetic":true,"types":[]},{"text":"impl Send for WritePipe","synthetic":true,"types":[]},{"text":"impl Send for ModifiersState","synthetic":true,"types":[]},{"text":"impl Send for KeyRepeatKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RMLVO","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for KeyRepeatEvent","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for OutputInfo","synthetic":true,"types":[]},{"text":"impl Send for OutputMgr","synthetic":true,"types":[]},{"text":"impl Send for ThemeManager","synthetic":true,"types":[]},{"text":"impl Send for ThemedPointer","synthetic":true,"types":[]},{"text":"impl Send for AutoThemer","synthetic":true,"types":[]},{"text":"impl Send for AutoPointer","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for DoubleMemPool","synthetic":true,"types":[]},{"text":"impl Send for MemPool","synthetic":true,"types":[]},{"text":"impl Send for BasicFrame","synthetic":true,"types":[]},{"text":"impl Send for ConceptFrame","synthetic":true,"types":[]},{"text":"impl Send for ButtonState","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Window&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Send for FrameRequest","synthetic":true,"types":[]},{"text":"impl Send for Shell","synthetic":true,"types":[]},{"text":"impl Send for Environment","synthetic":true,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; Send for ChangeSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BoxedErr","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WrongGeneration","synthetic":true,"types":[]},{"text":"impl Send for NoError","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Send for JoinParIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Send for MaybeJoin&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Send for JoinIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Mask: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Value: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ComponentEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DefaultVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DenseVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Send for FlaggedStorage&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HashMapStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NullStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for VecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Entity","synthetic":true,"types":[]},{"text":"impl Send for LazyUpdate","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Send for Entries&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Send for OccupiedEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Send for VacantEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Send for StorageEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SequentialRestriction","synthetic":true,"types":[]},{"text":"impl Send for MutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl Send for ImmutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl&lt;'rf, 'st, C, S, B, Restrict&gt; Send for RestrictedStorage&lt;'rf, 'st, C, S, B, Restrict&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Restrict: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BTreeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AntiStorage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MaskedStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Component&gt;::Storage: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'e, T, D&gt; Send for Storage&lt;'e, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CreateIterAtomic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EntitiesRes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EntityResBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Generation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LazyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CreateIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EntityBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["specs_hierarchy"] = [{"text":"impl Send for HierarchyEvent","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Hierarchy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for SubHierarchyIterator&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Send for ParentData&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Component&gt;::Storage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for HierarchySystem&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data&gt; Send for FontInfo&lt;Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Vertex","synthetic":true,"types":[]},{"text":"impl Send for VertexType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HMetrics","synthetic":true,"types":[]},{"text":"impl Send for VMetrics","synthetic":true,"types":[]},{"text":"impl Send for PlatformId","synthetic":true,"types":[]},{"text":"impl Send for UnicodeEid","synthetic":true,"types":[]},{"text":"impl Send for MicrosoftEid","synthetic":true,"types":[]},{"text":"impl Send for MacEid","synthetic":true,"types":[]},{"text":"impl Send for MicrosoftLang","synthetic":true,"types":[]},{"text":"impl Send for MacLang","synthetic":true,"types":[]},{"text":"impl Send for PlatformEncodingLanguageId","synthetic":true,"types":[]},{"text":"impl&lt;'a, Data&gt; Send for FontNameIter&lt;'a, Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Apostrophe","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for CapSelf","synthetic":true,"types":[]},{"text":"impl !Send for Catch","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for Self_","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl Send for ExprBox","synthetic":true,"types":[]},{"text":"impl Send for ExprInPlace","synthetic":true,"types":[]},{"text":"impl Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl Send for ExprType","synthetic":true,"types":[]},{"text":"impl Send for ExprIf","synthetic":true,"types":[]},{"text":"impl Send for ExprIfLet","synthetic":true,"types":[]},{"text":"impl Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl Send for ExprWhileLet","synthetic":true,"types":[]},{"text":"impl Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl Send for ExprReference","synthetic":true,"types":[]},{"text":"impl Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl Send for ExprTry","synthetic":true,"types":[]},{"text":"impl Send for ExprCatch","synthetic":true,"types":[]},{"text":"impl Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl !Send for LitVerbatim","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl Send for IntSuffix","synthetic":true,"types":[]},{"text":"impl Send for FloatSuffix","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArgName","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for PathTokens&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl Send for AddBounds","synthetic":true,"types":[]},{"text":"impl Send for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Send for ColorChoice","synthetic":true,"types":[]},{"text":"impl Send for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl Send for BufferWriter","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColorSpec","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for ParseColorError","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; Send for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl Send for CompressionMethod","synthetic":true,"types":[]},{"text":"impl Send for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl Send for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Gray8","synthetic":true,"types":[]},{"text":"impl Send for Gray16","synthetic":true,"types":[]},{"text":"impl Send for RGB8","synthetic":true,"types":[]},{"text":"impl Send for RGB16","synthetic":true,"types":[]},{"text":"impl Send for RGBA8","synthetic":true,"types":[]},{"text":"impl Send for RGBA16","synthetic":true,"types":[]},{"text":"impl Send for CMYK8","synthetic":true,"types":[]},{"text":"impl Send for Rational","synthetic":true,"types":[]},{"text":"impl Send for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for DirectoryEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; Send for ImageEncoder&lt;'a, W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TiffError","synthetic":true,"types":[]},{"text":"impl Send for TiffFormatError","synthetic":true,"types":[]},{"text":"impl Send for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl Send for ColorType","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tinystr"] = [{"text":"impl Send for TinyStr16","synthetic":true,"types":[]},{"text":"impl Send for TinyStr4","synthetic":true,"types":[]},{"text":"impl Send for TinyStr8","synthetic":true,"types":[]},{"text":"impl Send for TinyStrAuto","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for ArrayVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Datetime","synthetic":true,"types":[]},{"text":"impl Send for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl Send for XxHash64","synthetic":true,"types":[]},{"text":"impl Send for XxHash32","synthetic":true,"types":[]},{"text":"impl Send for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl Send for RandomXxHashBuilder32","synthetic":true,"types":[]}];
implementors["tynm"] = [{"text":"impl&lt;'s&gt; Send for TypeNameDisplay&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Send for TypeName&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["type_map"] = [{"text":"impl&lt;'a, T&gt; Send for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for TypeMap","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]}];
implementors["unic_langid_impl"] = [{"text":"impl Send for LanguageIdentifierError","synthetic":true,"types":[]},{"text":"impl Send for CharacterDirection","synthetic":true,"types":[]},{"text":"impl Send for LanguageIdentifier","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Send for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl Send for GraphemeIncomplete","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Send for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WalkDir","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wavefront_obj"] = [{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for MtlSet","synthetic":true,"types":[]},{"text":"impl Send for Material","synthetic":true,"types":[]},{"text":"impl Send for Illumination","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for ObjSet","synthetic":true,"types":[]},{"text":"impl Send for Object","synthetic":true,"types":[]},{"text":"impl Send for Geometry","synthetic":true,"types":[]},{"text":"impl Send for Shape","synthetic":true,"types":[]},{"text":"impl Send for Primitive","synthetic":true,"types":[]},{"text":"impl Send for Vertex","synthetic":true,"types":[]},{"text":"impl Send for TVertex","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Send for ConnectError","synthetic":true,"types":[]},{"text":"impl Send for Display","synthetic":true,"types":[]},{"text":"impl !Send for EventQueue","synthetic":true,"types":[]},{"text":"impl !Send for QueueToken","synthetic":true,"types":[]},{"text":"impl !Send for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl Send for GlobalManager","synthetic":true,"types":[]},{"text":"impl Send for GlobalError","synthetic":true,"types":[]},{"text":"impl Send for GlobalEvent","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Proxy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for NewProxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProxyMap","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlDisplay","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlRegistry","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlCallback","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlCompositor","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlShmPool","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlShm","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlBuffer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlDataOffer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlDataSource","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlDataDevice","synthetic":true,"types":[]},{"text":"impl Send for DndAction","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlShell","synthetic":true,"types":[]},{"text":"impl Send for Resize","synthetic":true,"types":[]},{"text":"impl Send for Transient","synthetic":true,"types":[]},{"text":"impl Send for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlShellSurface","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlSurface","synthetic":true,"types":[]},{"text":"impl Send for Capability","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlSeat","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ButtonState","synthetic":true,"types":[]},{"text":"impl Send for Axis","synthetic":true,"types":[]},{"text":"impl Send for AxisSource","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlPointer","synthetic":true,"types":[]},{"text":"impl Send for KeymapFormat","synthetic":true,"types":[]},{"text":"impl Send for KeyState","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlKeyboard","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlTouch","synthetic":true,"types":[]},{"text":"impl Send for Subpixel","synthetic":true,"types":[]},{"text":"impl Send for Transform","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlOutput","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlRegion","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WlSubsurface","synthetic":true,"types":[]},{"text":"impl Send for CursorTheme","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for CursorImageBuffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Send for WlEglSurface","synthetic":false,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl&lt;Meta&gt; Send for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; Send for ObjectMap&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Socket","synthetic":true,"types":[]},{"text":"impl Send for BufferedSocket","synthetic":true,"types":[]},{"text":"impl Send for UserDataMap","synthetic":true,"types":[]},{"text":"impl Send for MessageDesc","synthetic":true,"types":[]},{"text":"impl Send for ArgumentType","synthetic":true,"types":[]},{"text":"impl Send for Argument","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for MessageWriteError","synthetic":true,"types":[]},{"text":"impl Send for MessageParseError","synthetic":true,"types":[]},{"text":"impl Send for AnonymousObject","synthetic":true,"types":[]},{"text":"impl Send for NoMessage","synthetic":true,"types":[]},{"text":"impl Send for UserData","synthetic":false,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl Send for Capability","synthetic":true,"types":[]},{"text":"impl Send for PresentMethod","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Lifetime","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Capability","synthetic":true,"types":[]},{"text":"impl Send for ButtonState","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Capability","synthetic":true,"types":[]},{"text":"impl Send for ButtonState","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl Send for Source","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl Send for Source","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl Send for ButtonState","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl Send for ContentHint","synthetic":true,"types":[]},{"text":"impl Send for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Send for PreeditStyle","synthetic":true,"types":[]},{"text":"impl Send for TextDirection","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl Send for ChangeCause","synthetic":true,"types":[]},{"text":"impl Send for ContentHint","synthetic":true,"types":[]},{"text":"impl Send for ContentPurpose","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgShell","synthetic":true,"types":[]},{"text":"impl Send for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgSurface","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgPopup","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for Gravity","synthetic":true,"types":[]},{"text":"impl Send for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl Send for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for CancelReason","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl !Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Layer","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WpPresentation","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgWmBase","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for Gravity","synthetic":true,"types":[]},{"text":"impl Send for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgPositioner","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgSurface","synthetic":true,"types":[]},{"text":"impl Send for ResizeEdge","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgToplevel","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for XdgPopup","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WpViewporter","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WpViewport","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl !Send for wl_message","synthetic":true,"types":[]},{"text":"impl !Send for wl_interface","synthetic":true,"types":[]},{"text":"impl !Send for wl_list","synthetic":true,"types":[]},{"text":"impl !Send for wl_array","synthetic":true,"types":[]},{"text":"impl !Send for wl_argument","synthetic":true,"types":[]},{"text":"impl Send for wl_proxy","synthetic":true,"types":[]},{"text":"impl Send for wl_display","synthetic":true,"types":[]},{"text":"impl Send for wl_event_queue","synthetic":true,"types":[]},{"text":"impl Send for WaylandClient","synthetic":true,"types":[]},{"text":"impl Send for WAYLAND_CLIENT_OPTION","synthetic":true,"types":[]},{"text":"impl Send for WAYLAND_CLIENT_HANDLE","synthetic":true,"types":[]},{"text":"impl Send for wl_egl_window","synthetic":true,"types":[]},{"text":"impl Send for WaylandEgl","synthetic":true,"types":[]},{"text":"impl Send for WAYLAND_EGL_OPTION","synthetic":true,"types":[]},{"text":"impl Send for WAYLAND_EGL_HANDLE","synthetic":true,"types":[]},{"text":"impl Send for wl_cursor_theme","synthetic":true,"types":[]},{"text":"impl Send for wl_cursor_image","synthetic":true,"types":[]},{"text":"impl !Send for wl_cursor","synthetic":true,"types":[]},{"text":"impl Send for WaylandCursor","synthetic":true,"types":[]},{"text":"impl Send for WAYLAND_CURSOR_OPTION","synthetic":true,"types":[]},{"text":"impl Send for WAYLAND_CURSOR_HANDLE","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl Send for LogicalPosition","synthetic":true,"types":[]},{"text":"impl Send for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl Send for LogicalSize","synthetic":true,"types":[]},{"text":"impl Send for PhysicalSize","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for WindowEvent","synthetic":true,"types":[]},{"text":"impl Send for DeviceEvent","synthetic":true,"types":[]},{"text":"impl Send for KeyboardInput","synthetic":true,"types":[]},{"text":"impl Send for TouchPhase","synthetic":true,"types":[]},{"text":"impl Send for Touch","synthetic":true,"types":[]},{"text":"impl Send for ElementState","synthetic":true,"types":[]},{"text":"impl Send for MouseButton","synthetic":true,"types":[]},{"text":"impl Send for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl Send for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl Send for ModifiersState","synthetic":true,"types":[]},{"text":"impl Send for BadIcon","synthetic":true,"types":[]},{"text":"impl Send for Icon","synthetic":true,"types":[]},{"text":"impl Send for XNotSupported","synthetic":true,"types":[]},{"text":"impl Send for WindowType","synthetic":true,"types":[]},{"text":"impl Send for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl Send for MonitorId","synthetic":true,"types":[]},{"text":"impl Send for WaylandTheme","synthetic":true,"types":[]},{"text":"impl Send for Window","synthetic":true,"types":[]},{"text":"impl Send for WindowId","synthetic":true,"types":[]},{"text":"impl Send for DeviceId","synthetic":true,"types":[]},{"text":"impl !Send for EventsLoop","synthetic":true,"types":[]},{"text":"impl Send for ControlFlow","synthetic":true,"types":[]},{"text":"impl Send for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl Send for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl !Send for WindowBuilder","synthetic":true,"types":[]},{"text":"impl Send for CreationError","synthetic":true,"types":[]},{"text":"impl Send for MouseCursor","synthetic":true,"types":[]},{"text":"impl Send for WindowAttributes","synthetic":true,"types":[]}];
implementors["x11_clipboard"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Atoms","synthetic":true,"types":[]},{"text":"impl Send for Clipboard","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]}];
implementors["x11_dl"] = [{"text":"impl Send for OpenError","synthetic":true,"types":[]},{"text":"impl Send for OpenErrorKind","synthetic":true,"types":[]},{"text":"impl Send for _XDisplay","synthetic":true,"types":[]},{"text":"impl Send for xError","synthetic":true,"types":[]},{"text":"impl Send for xEvent","synthetic":true,"types":[]},{"text":"impl Send for _XGC","synthetic":true,"types":[]},{"text":"impl Send for _XIC","synthetic":true,"types":[]},{"text":"impl Send for _XIM","synthetic":true,"types":[]},{"text":"impl Send for _XRegion","synthetic":true,"types":[]},{"text":"impl Send for _XOC","synthetic":true,"types":[]},{"text":"impl Send for _XOM","synthetic":true,"types":[]},{"text":"impl Send for _XrmHashBucketRec","synthetic":true,"types":[]},{"text":"impl Send for _XcmsCCC","synthetic":true,"types":[]},{"text":"impl Send for XcmsColor","synthetic":true,"types":[]},{"text":"impl Send for _XcmsColorSpace","synthetic":true,"types":[]},{"text":"impl Send for _XcmsFunctionSet","synthetic":true,"types":[]},{"text":"impl Send for _XkbAction","synthetic":true,"types":[]},{"text":"impl Send for _XkbBounds","synthetic":true,"types":[]},{"text":"impl Send for _XkbChanges","synthetic":true,"types":[]},{"text":"impl Send for _XkbClientMapRec","synthetic":true,"types":[]},{"text":"impl Send for _XkbColor","synthetic":true,"types":[]},{"text":"impl Send for _XkbComponentList","synthetic":true,"types":[]},{"text":"impl Send for _XkbComponentNames","synthetic":true,"types":[]},{"text":"impl Send for _XkbControls","synthetic":true,"types":[]},{"text":"impl Send for _XkbControlsChanges","synthetic":true,"types":[]},{"text":"impl Send for _XkbControlsNotify","synthetic":true,"types":[]},{"text":"impl Send for _XkbDeviceChanges","synthetic":true,"types":[]},{"text":"impl Send for _XkbDeviceInfo","synthetic":true,"types":[]},{"text":"impl Send for _XkbDeviceLedInfo","synthetic":true,"types":[]},{"text":"impl Send for _XkbDoodad","synthetic":true,"types":[]},{"text":"impl Send for _XkbExtensionDeviceNotify","synthetic":true,"types":[]},{"text":"impl Send for _XkbGeometry","synthetic":true,"types":[]},{"text":"impl Send for _XkbGeometrySizes","synthetic":true,"types":[]},{"text":"impl Send for _XkbIndicatorMapRec","synthetic":true,"types":[]},{"text":"impl Send for _XkbKey","synthetic":true,"types":[]},{"text":"impl Send for _XkbKeyType","synthetic":true,"types":[]},{"text":"impl Send for _XkbMapChanges","synthetic":true,"types":[]},{"text":"impl Send for _XkbMods","synthetic":true,"types":[]},{"text":"impl Send for _XkbNameChanges","synthetic":true,"types":[]},{"text":"impl Send for _XkbNamesNotify","synthetic":true,"types":[]},{"text":"impl Send for _XkbOutline","synthetic":true,"types":[]},{"text":"impl Send for _XkbOverlay","synthetic":true,"types":[]},{"text":"impl Send for _XkbOverlayKey","synthetic":true,"types":[]},{"text":"impl Send for _XkbOverlayRow","synthetic":true,"types":[]},{"text":"impl Send for _XkbProperty","synthetic":true,"types":[]},{"text":"impl Send for _XkbRow","synthetic":true,"types":[]},{"text":"impl Send for _XkbSection","synthetic":true,"types":[]},{"text":"impl Send for _XkbServerMapRec","synthetic":true,"types":[]},{"text":"impl Send for _XkbShape","synthetic":true,"types":[]},{"text":"impl Send for _XkbSymInterpretRec","synthetic":true,"types":[]},{"text":"impl !Send for XEvent","synthetic":true,"types":[]},{"text":"impl !Send for XAnyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XButtonEvent","synthetic":true,"types":[]},{"text":"impl !Send for XCirculateEvent","synthetic":true,"types":[]},{"text":"impl !Send for XCirculateRequestEvent","synthetic":true,"types":[]},{"text":"impl !Send for XClientMessageEvent","synthetic":true,"types":[]},{"text":"impl !Send for XColormapEvent","synthetic":true,"types":[]},{"text":"impl !Send for XConfigureEvent","synthetic":true,"types":[]},{"text":"impl !Send for XConfigureRequestEvent","synthetic":true,"types":[]},{"text":"impl !Send for XCreateWindowEvent","synthetic":true,"types":[]},{"text":"impl !Send for XCrossingEvent","synthetic":true,"types":[]},{"text":"impl !Send for XDestroyWindowEvent","synthetic":true,"types":[]},{"text":"impl !Send for XErrorEvent","synthetic":true,"types":[]},{"text":"impl !Send for XExposeEvent","synthetic":true,"types":[]},{"text":"impl !Send for XFocusChangeEvent","synthetic":true,"types":[]},{"text":"impl !Send for XGraphicsExposeEvent","synthetic":true,"types":[]},{"text":"impl !Send for XGravityEvent","synthetic":true,"types":[]},{"text":"impl !Send for XKeyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XKeymapEvent","synthetic":true,"types":[]},{"text":"impl !Send for XMapEvent","synthetic":true,"types":[]},{"text":"impl !Send for XMappingEvent","synthetic":true,"types":[]},{"text":"impl !Send for XMapRequestEvent","synthetic":true,"types":[]},{"text":"impl !Send for XMotionEvent","synthetic":true,"types":[]},{"text":"impl !Send for XNoExposeEvent","synthetic":true,"types":[]},{"text":"impl !Send for XPropertyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XReparentEvent","synthetic":true,"types":[]},{"text":"impl !Send for XResizeRequestEvent","synthetic":true,"types":[]},{"text":"impl !Send for XSelectionClearEvent","synthetic":true,"types":[]},{"text":"impl !Send for XSelectionEvent","synthetic":true,"types":[]},{"text":"impl !Send for XSelectionRequestEvent","synthetic":true,"types":[]},{"text":"impl !Send for XUnmapEvent","synthetic":true,"types":[]},{"text":"impl !Send for XVisibilityEvent","synthetic":true,"types":[]},{"text":"impl !Send for _XkbCompatMapRec","synthetic":true,"types":[]},{"text":"impl !Send for _XkbDesc","synthetic":true,"types":[]},{"text":"impl Send for _XkbIndicatorRec","synthetic":true,"types":[]},{"text":"impl Send for _XkbKeyAliasRec","synthetic":true,"types":[]},{"text":"impl Send for _XkbKeyNameRec","synthetic":true,"types":[]},{"text":"impl !Send for _XkbNamesRec","synthetic":true,"types":[]},{"text":"impl Send for _XkbStateRec","synthetic":true,"types":[]},{"text":"impl !Send for XkbAnyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XkbNewKeyboardNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for _XkbMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XkbStateNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for _XkbControlsNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XkbIndicatorNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for _XkbNamesNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XkbCompatMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XkbBellNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XkbActionMessageEvent","synthetic":true,"types":[]},{"text":"impl !Send for XkbAccessXNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for _XkbExtensionDeviceNotifyEvent","synthetic":true,"types":[]},{"text":"impl Send for XkbEvent","synthetic":true,"types":[]},{"text":"impl Send for XkbKbdDpyStateRec","synthetic":true,"types":[]},{"text":"impl !Send for Depth","synthetic":true,"types":[]},{"text":"impl !Send for Screen","synthetic":true,"types":[]},{"text":"impl !Send for ScreenFormat","synthetic":true,"types":[]},{"text":"impl !Send for Visual","synthetic":true,"types":[]},{"text":"impl Send for XArc","synthetic":true,"types":[]},{"text":"impl Send for XChar2b","synthetic":true,"types":[]},{"text":"impl Send for XCharStruct","synthetic":true,"types":[]},{"text":"impl !Send for XClassHint","synthetic":true,"types":[]},{"text":"impl Send for XColor","synthetic":true,"types":[]},{"text":"impl !Send for XComposeStatus","synthetic":true,"types":[]},{"text":"impl Send for XExtCodes","synthetic":true,"types":[]},{"text":"impl !Send for XExtData","synthetic":true,"types":[]},{"text":"impl Send for XFontProp","synthetic":true,"types":[]},{"text":"impl Send for XFontSetExtents","synthetic":true,"types":[]},{"text":"impl !Send for XFontStruct","synthetic":true,"types":[]},{"text":"impl Send for XGCValues","synthetic":true,"types":[]},{"text":"impl !Send for XGenericEventCookie","synthetic":true,"types":[]},{"text":"impl !Send for XHostAddress","synthetic":true,"types":[]},{"text":"impl Send for XIconSize","synthetic":true,"types":[]},{"text":"impl !Send for XImage","synthetic":true,"types":[]},{"text":"impl Send for XKeyboardControl","synthetic":true,"types":[]},{"text":"impl Send for XKeyboardState","synthetic":true,"types":[]},{"text":"impl !Send for XmbTextItem","synthetic":true,"types":[]},{"text":"impl !Send for XModifierKeymap","synthetic":true,"types":[]},{"text":"impl !Send for XOMCharSetList","synthetic":true,"types":[]},{"text":"impl Send for XPixmapFormatValues","synthetic":true,"types":[]},{"text":"impl Send for XPoint","synthetic":true,"types":[]},{"text":"impl Send for XRectangle","synthetic":true,"types":[]},{"text":"impl !Send for XrmOptionDescRec","synthetic":true,"types":[]},{"text":"impl !Send for XrmValue","synthetic":true,"types":[]},{"text":"impl Send for XSegment","synthetic":true,"types":[]},{"text":"impl Send for XSetWindowAttributes","synthetic":true,"types":[]},{"text":"impl Send for XSizeHints","synthetic":true,"types":[]},{"text":"impl Send for XStandardColormap","synthetic":true,"types":[]},{"text":"impl !Send for XTextItem","synthetic":true,"types":[]},{"text":"impl !Send for XTextItem16","synthetic":true,"types":[]},{"text":"impl !Send for XTextProperty","synthetic":true,"types":[]},{"text":"impl Send for XTimeCoord","synthetic":true,"types":[]},{"text":"impl !Send for XVisualInfo","synthetic":true,"types":[]},{"text":"impl !Send for XwcTextItem","synthetic":true,"types":[]},{"text":"impl !Send for XWindowAttributes","synthetic":true,"types":[]},{"text":"impl Send for XWindowChanges","synthetic":true,"types":[]},{"text":"impl Send for XWMHints","synthetic":true,"types":[]},{"text":"impl !Send for XIMCallback","synthetic":true,"types":[]},{"text":"impl Send for XIMCaretDirection","synthetic":true,"types":[]},{"text":"impl Send for XIMCaretStyle","synthetic":true,"types":[]},{"text":"impl !Send for XIMPreeditDrawCallbackStruct","synthetic":true,"types":[]},{"text":"impl Send for XIMPreeditCaretCallbackStruct","synthetic":true,"types":[]},{"text":"impl !Send for XIMTextString","synthetic":true,"types":[]},{"text":"impl !Send for XIMText","synthetic":true,"types":[]},{"text":"impl !Send for XICCallback","synthetic":true,"types":[]},{"text":"impl Send for AspectRatio","synthetic":true,"types":[]},{"text":"impl Send for ClientMessageData","synthetic":true,"types":[]},{"text":"impl Send for ImageFns","synthetic":true,"types":[]},{"text":"impl Send for __GLXcontextRec","synthetic":true,"types":[]},{"text":"impl Send for __GLXFBConfigRec","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorAnimate","synthetic":true,"types":[]},{"text":"impl Send for _XcursorChunkHeader","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorComment","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorComments","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorCursors","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorFile","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorFileHeader","synthetic":true,"types":[]},{"text":"impl Send for _XcursorFileToc","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorImage","synthetic":true,"types":[]},{"text":"impl !Send for _XcursorImages","synthetic":true,"types":[]},{"text":"impl Send for XF86VidModeGamma","synthetic":true,"types":[]},{"text":"impl !Send for XF86VidModeModeInfo","synthetic":true,"types":[]},{"text":"impl !Send for XF86VidModeModeLine","synthetic":true,"types":[]},{"text":"impl !Send for XF86VidModeMonitor","synthetic":true,"types":[]},{"text":"impl Send for XF86VidModeSyncRange","synthetic":true,"types":[]},{"text":"impl !Send for XF86VidModeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Send for FT_FaceRec","synthetic":true,"types":[]},{"text":"impl Send for FcCharSet","synthetic":true,"types":[]},{"text":"impl Send for FcPattern","synthetic":true,"types":[]},{"text":"impl Send for FcEndian","synthetic":true,"types":[]},{"text":"impl Send for FcResult","synthetic":true,"types":[]},{"text":"impl Send for XftFontInfo","synthetic":true,"types":[]},{"text":"impl !Send for XftFont","synthetic":true,"types":[]},{"text":"impl Send for XftDraw","synthetic":true,"types":[]},{"text":"impl Send for XftColor","synthetic":true,"types":[]},{"text":"impl Send for XftCharSpec","synthetic":true,"types":[]},{"text":"impl !Send for XftCharFontSpec","synthetic":true,"types":[]},{"text":"impl !Send for XftFontSet","synthetic":true,"types":[]},{"text":"impl Send for XftGlyphSpec","synthetic":true,"types":[]},{"text":"impl !Send for XftGlyphFontSpec","synthetic":true,"types":[]},{"text":"impl Send for XftPattern","synthetic":true,"types":[]},{"text":"impl Send for XineramaScreenInfo","synthetic":true,"types":[]},{"text":"impl Send for XPanoramiXInfo","synthetic":true,"types":[]},{"text":"impl Send for _XAnyClassinfo","synthetic":true,"types":[]},{"text":"impl !Send for XDevice","synthetic":true,"types":[]},{"text":"impl Send for XDeviceControl","synthetic":true,"types":[]},{"text":"impl !Send for XDeviceInfo","synthetic":true,"types":[]},{"text":"impl !Send for XDeviceState","synthetic":true,"types":[]},{"text":"impl !Send for XDeviceTimeCoord","synthetic":true,"types":[]},{"text":"impl Send for XExtensionVersion","synthetic":true,"types":[]},{"text":"impl Send for XFeedbackControl","synthetic":true,"types":[]},{"text":"impl Send for XFeedbackState","synthetic":true,"types":[]},{"text":"impl Send for XInputClass","synthetic":true,"types":[]},{"text":"impl Send for XInputClassInfo","synthetic":true,"types":[]},{"text":"impl !Send for XIAddMasterInfo","synthetic":true,"types":[]},{"text":"impl Send for XIRemoveMasterInfo","synthetic":true,"types":[]},{"text":"impl Send for XIAttachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Send for XIDetachSlaveInfo","synthetic":true,"types":[]},{"text":"impl Send for XIAnyHierarchyChangeInfo","synthetic":true,"types":[]},{"text":"impl Send for XIModifierState","synthetic":true,"types":[]},{"text":"impl !Send for XIButtonState","synthetic":true,"types":[]},{"text":"impl !Send for XIValuatorState","synthetic":true,"types":[]},{"text":"impl !Send for XIEventMask","synthetic":true,"types":[]},{"text":"impl Send for XIAnyClassInfo","synthetic":true,"types":[]},{"text":"impl !Send for XIButtonClassInfo","synthetic":true,"types":[]},{"text":"impl !Send for XIKeyClassInfo","synthetic":true,"types":[]},{"text":"impl Send for XIValuatorClassInfo","synthetic":true,"types":[]},{"text":"impl Send for XIScrollClassInfo","synthetic":true,"types":[]},{"text":"impl Send for XITouchClassInfo","synthetic":true,"types":[]},{"text":"impl !Send for XIDeviceInfo","synthetic":true,"types":[]},{"text":"impl Send for XIGrabModifiers","synthetic":true,"types":[]},{"text":"impl Send for XIBarrierReleasePointerInfo","synthetic":true,"types":[]},{"text":"impl !Send for XIEvent","synthetic":true,"types":[]},{"text":"impl Send for XIHierarchyInfo","synthetic":true,"types":[]},{"text":"impl !Send for XIHierarchyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XIDeviceChangedEvent","synthetic":true,"types":[]},{"text":"impl !Send for XIDeviceEvent","synthetic":true,"types":[]},{"text":"impl !Send for XIRawEvent","synthetic":true,"types":[]},{"text":"impl !Send for XIEnterEvent","synthetic":true,"types":[]},{"text":"impl !Send for XIPropertyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XITouchOwnershipEvent","synthetic":true,"types":[]},{"text":"impl !Send for XIBarrierEvent","synthetic":true,"types":[]},{"text":"impl Send for _AtomRec","synthetic":true,"types":[]},{"text":"impl Send for _XmuArea","synthetic":true,"types":[]},{"text":"impl Send for _XmuDisplayQueue","synthetic":true,"types":[]},{"text":"impl Send for _XmuDisplayQueueEntry","synthetic":true,"types":[]},{"text":"impl Send for _XmuScanline","synthetic":true,"types":[]},{"text":"impl Send for _XmuSegment","synthetic":true,"types":[]},{"text":"impl Send for _XmuWidgetNode","synthetic":true,"types":[]},{"text":"impl !Send for XRecordClientInfo","synthetic":true,"types":[]},{"text":"impl Send for XRecordExtRange","synthetic":true,"types":[]},{"text":"impl !Send for XRecordInterceptData","synthetic":true,"types":[]},{"text":"impl Send for XRecordRange","synthetic":true,"types":[]},{"text":"impl Send for XRecordRange8","synthetic":true,"types":[]},{"text":"impl Send for XRecordRange16","synthetic":true,"types":[]},{"text":"impl !Send for XRecordState","synthetic":true,"types":[]},{"text":"impl Send for _XAnimCursor","synthetic":true,"types":[]},{"text":"impl Send for _XCircle","synthetic":true,"types":[]},{"text":"impl Send for _XConicalGradient","synthetic":true,"types":[]},{"text":"impl !Send for _XFilters","synthetic":true,"types":[]},{"text":"impl !Send for _XGlyphElt8","synthetic":true,"types":[]},{"text":"impl !Send for _XGlyphElt16","synthetic":true,"types":[]},{"text":"impl !Send for _XGlyphElt32","synthetic":true,"types":[]},{"text":"impl Send for _XGlyphInfo","synthetic":true,"types":[]},{"text":"impl Send for _XIndexValue","synthetic":true,"types":[]},{"text":"impl Send for _XLinearGradient","synthetic":true,"types":[]},{"text":"impl Send for _XLineFixed","synthetic":true,"types":[]},{"text":"impl Send for _XPointDouble","synthetic":true,"types":[]},{"text":"impl Send for _XPointFixed","synthetic":true,"types":[]},{"text":"impl Send for _XRadialGradient","synthetic":true,"types":[]},{"text":"impl Send for XRenderColor","synthetic":true,"types":[]},{"text":"impl Send for XRenderDirectFormat","synthetic":true,"types":[]},{"text":"impl Send for XRenderPictFormat","synthetic":true,"types":[]},{"text":"impl Send for _XRenderPictureAttributes","synthetic":true,"types":[]},{"text":"impl Send for _XSpanFix","synthetic":true,"types":[]},{"text":"impl Send for _XTrap","synthetic":true,"types":[]},{"text":"impl Send for _XTrapezoid","synthetic":true,"types":[]},{"text":"impl Send for _XTriangle","synthetic":true,"types":[]},{"text":"impl Send for _XTransform","synthetic":true,"types":[]},{"text":"impl Send for XScreenSaverInfo","synthetic":true,"types":[]},{"text":"impl !Send for XScreenSaverNotifyEvent","synthetic":true,"types":[]},{"text":"impl Send for Arg","synthetic":true,"types":[]},{"text":"impl Send for SubstitutionRec","synthetic":true,"types":[]},{"text":"impl Send for _TranslationData","synthetic":true,"types":[]},{"text":"impl Send for _WidgetClassRec","synthetic":true,"types":[]},{"text":"impl Send for _WidgetRec","synthetic":true,"types":[]},{"text":"impl Send for _XtActionsRec","synthetic":true,"types":[]},{"text":"impl Send for _XtAppStruct","synthetic":true,"types":[]},{"text":"impl Send for _XtCallbackRec","synthetic":true,"types":[]},{"text":"impl Send for _XtCheckpointTokenRec","synthetic":true,"types":[]},{"text":"impl Send for XtConvertArgRec","synthetic":true,"types":[]},{"text":"impl Send for _XtResource","synthetic":true,"types":[]},{"text":"impl Send for XtWidgetGeometry","synthetic":true,"types":[]},{"text":"impl Send for XRRScreenSize","synthetic":true,"types":[]},{"text":"impl Send for XRRScreenConfiguration","synthetic":true,"types":[]},{"text":"impl !Send for XRRModeInfo","synthetic":true,"types":[]},{"text":"impl !Send for XRRScreenResources","synthetic":true,"types":[]},{"text":"impl !Send for XRROutputInfo","synthetic":true,"types":[]},{"text":"impl !Send for XRRPropertyInfo","synthetic":true,"types":[]},{"text":"impl !Send for XRRCrtcInfo","synthetic":true,"types":[]},{"text":"impl !Send for XRRCrtcGamma","synthetic":true,"types":[]},{"text":"impl !Send for XRRCrtcTransformAttributes","synthetic":true,"types":[]},{"text":"impl Send for XRRPanning","synthetic":true,"types":[]},{"text":"impl !Send for XRRProviderResources","synthetic":true,"types":[]},{"text":"impl !Send for XRRProviderInfo","synthetic":true,"types":[]},{"text":"impl !Send for XRRMonitorInfo","synthetic":true,"types":[]},{"text":"impl !Send for XRRScreenChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XRRNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XRROutputChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XRRCrtcChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XRROutputPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XRRProviderChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XRRProviderPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl !Send for XRRResourceChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl Send for Xlib","synthetic":false,"types":[]},{"text":"impl Send for Xext","synthetic":false,"types":[]},{"text":"impl Send for Glx","synthetic":false,"types":[]},{"text":"impl Send for Xcursor","synthetic":false,"types":[]},{"text":"impl Send for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Send for Xft","synthetic":false,"types":[]},{"text":"impl Send for Xlib","synthetic":false,"types":[]},{"text":"impl Send for XInput","synthetic":false,"types":[]},{"text":"impl Send for XInput2","synthetic":false,"types":[]},{"text":"impl Send for Xmu","synthetic":false,"types":[]},{"text":"impl Send for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Send for Xrender","synthetic":false,"types":[]},{"text":"impl Send for Xss","synthetic":false,"types":[]},{"text":"impl Send for Xt","synthetic":false,"types":[]},{"text":"impl Send for Xf86vmode","synthetic":false,"types":[]},{"text":"impl Send for Xlib_xcb","synthetic":false,"types":[]},{"text":"impl Send for Xrandr","synthetic":false,"types":[]},{"text":"impl Send for Xrandr_2_2_0","synthetic":false,"types":[]}];
implementors["xcb"] = [{"text":"impl&lt;'a, T&gt; !Send for StructPtr&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for ConnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for QueryExtensionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RequestError","synthetic":true,"types":[]},{"text":"impl Send for ValueError","synthetic":true,"types":[]},{"text":"impl Send for WindowError","synthetic":true,"types":[]},{"text":"impl Send for PixmapError","synthetic":true,"types":[]},{"text":"impl Send for AtomError","synthetic":true,"types":[]},{"text":"impl Send for CursorError","synthetic":true,"types":[]},{"text":"impl Send for FontError","synthetic":true,"types":[]},{"text":"impl Send for MatchError","synthetic":true,"types":[]},{"text":"impl Send for DrawableError","synthetic":true,"types":[]},{"text":"impl Send for AccessError","synthetic":true,"types":[]},{"text":"impl Send for AllocError","synthetic":true,"types":[]},{"text":"impl Send for ColormapError","synthetic":true,"types":[]},{"text":"impl Send for GContextError","synthetic":true,"types":[]},{"text":"impl Send for IdChoiceError","synthetic":true,"types":[]},{"text":"impl Send for NameError","synthetic":true,"types":[]},{"text":"impl Send for LengthError","synthetic":true,"types":[]},{"text":"impl Send for ImplementationError","synthetic":true,"types":[]},{"text":"impl Send for Char2b","synthetic":true,"types":[]},{"text":"impl Send for Point","synthetic":true,"types":[]},{"text":"impl Send for Rectangle","synthetic":true,"types":[]},{"text":"impl Send for Arc","synthetic":true,"types":[]},{"text":"impl Send for Format","synthetic":true,"types":[]},{"text":"impl Send for Visualtype","synthetic":true,"types":[]},{"text":"impl Send for Timecoord","synthetic":true,"types":[]},{"text":"impl Send for Fontprop","synthetic":true,"types":[]},{"text":"impl Send for Charinfo","synthetic":true,"types":[]},{"text":"impl Send for Segment","synthetic":true,"types":[]},{"text":"impl Send for Coloritem","synthetic":true,"types":[]},{"text":"impl Send for Rgb","synthetic":true,"types":[]},{"text":"impl Send for PictFormatError","synthetic":true,"types":[]},{"text":"impl Send for PictureError","synthetic":true,"types":[]},{"text":"impl Send for PictOpError","synthetic":true,"types":[]},{"text":"impl Send for GlyphSetError","synthetic":true,"types":[]},{"text":"impl Send for GlyphError","synthetic":true,"types":[]},{"text":"impl Send for Directformat","synthetic":true,"types":[]},{"text":"impl Send for Pictforminfo","synthetic":true,"types":[]},{"text":"impl Send for Pictvisual","synthetic":true,"types":[]},{"text":"impl Send for Indexvalue","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for Pointfix","synthetic":true,"types":[]},{"text":"impl Send for Linefix","synthetic":true,"types":[]},{"text":"impl Send for Triangle","synthetic":true,"types":[]},{"text":"impl Send for Trapezoid","synthetic":true,"types":[]},{"text":"impl Send for Glyphinfo","synthetic":true,"types":[]},{"text":"impl Send for Transform","synthetic":true,"types":[]},{"text":"impl Send for Animcursorelt","synthetic":true,"types":[]},{"text":"impl Send for Spanfix","synthetic":true,"types":[]},{"text":"impl Send for Trap","synthetic":true,"types":[]},{"text":"impl Send for BadRegionError","synthetic":true,"types":[]},{"text":"impl Send for xcb_connection_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_extension_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_special_event_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_generic_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_generic_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_generic_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_ge_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_generic_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_void_cookie_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_auth_info_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_char2b_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_char2b_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_window_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_pixmap_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_cursor_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_font_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_gcontext_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_colormap_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_atom_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_drawable_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_fontable_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_visualid_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_timestamp_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_keysym_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_keycode_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_button_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_point_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_point_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_rectangle_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_rectangle_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_arc_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_arc_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_format_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_format_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_visualtype_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_visualtype_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_depth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_depth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_screen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_screen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_setup_request_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_setup_request_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_setup_failed_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_setup_failed_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_setup_authenticate_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_setup_authenticate_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_setup_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_setup_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_key_press_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_button_press_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_motion_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_enter_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_focus_in_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_keymap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_expose_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_graphics_exposure_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_no_exposure_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_visibility_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_create_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_destroy_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_unmap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_map_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_map_request_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_reparent_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_configure_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_configure_request_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_gravity_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_resize_request_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_circulate_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_property_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_selection_clear_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_selection_request_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_colormap_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_client_message_data_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_client_message_data_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_client_message_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_mapping_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_ge_generic_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_request_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_value_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_create_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_window_attributes_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_window_attributes_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_destroy_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_destroy_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_reparent_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_map_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_map_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_unmap_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_unmap_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_configure_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_circulate_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_geometry_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_geometry_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_geometry_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_tree_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_tree_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_tree_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_intern_atom_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_intern_atom_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_intern_atom_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_atom_name_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_atom_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_atom_name_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_property_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_delete_property_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_property_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_property_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_property_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_properties_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_properties_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_properties_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_selection_owner_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_selection_owner_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_convert_selection_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_send_event_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_ungrab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_button_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_ungrab_button_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_active_pointer_grab_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_keyboard_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_keyboard_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_ungrab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_key_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_ungrab_key_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_allow_events_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_grab_server_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_ungrab_server_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_timecoord_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_timecoord_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_motion_events_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_motion_events_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_motion_events_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_translate_coordinates_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_translate_coordinates_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_translate_coordinates_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_warp_pointer_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_input_focus_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_input_focus_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_keymap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_keymap_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_keymap_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_open_font_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_close_font_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_fontprop_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_fontprop_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_charinfo_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_charinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_font_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_font_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_font_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_text_extents_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_text_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_text_extents_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_str_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_str_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_fonts_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_fonts_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_fonts_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_fonts_with_info_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_fonts_with_info_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_fonts_with_info_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_font_path_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_font_path_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_font_path_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_font_path_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_create_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_free_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_create_gc_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_gc_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_copy_gc_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_dashes_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_free_gc_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_clear_area_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_copy_area_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_copy_plane_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_point_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_line_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_segment_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_segment_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_segment_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_arc_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_fill_poly_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_fill_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_fill_arc_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_put_image_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_image_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_image_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_image_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_text_8_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_poly_text_16_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_image_text_8_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_image_text_16_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_create_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_free_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_copy_colormap_and_free_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_install_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_uninstall_colormap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_installed_colormaps_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_installed_colormaps_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_installed_colormaps_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_named_color_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_named_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_named_color_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_cells_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_cells_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_cells_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_planes_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_planes_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_alloc_color_planes_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_free_colors_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_coloritem_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_coloritem_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_store_colors_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_store_named_color_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_rgb_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_rgb_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_colors_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_colors_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_colors_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_lookup_color_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_lookup_color_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_lookup_color_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_create_glyph_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_free_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_recolor_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_best_size_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_best_size_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_best_size_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_extension_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_extension_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_query_extension_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_extensions_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_extensions_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_extensions_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_keyboard_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_keyboard_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_keyboard_control_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_keyboard_control_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_bell_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_pointer_control_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_pointer_control_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_screen_saver_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_screen_saver_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_change_hosts_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_host_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_host_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_hosts_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_hosts_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_list_hosts_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_access_control_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_close_down_mode_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_kill_client_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_rotate_properties_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_force_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_set_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_get_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_no_operation_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_big_requests_enable_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_big_requests_enable_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_big_requests_enable_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_version_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_version_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_xid_range_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_xid_range_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_xid_range_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_xid_list_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_xid_list_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xc_misc_get_xid_list_reply_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_glyph_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_glyphset_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_picture_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_pictformat_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_fixed_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_pict_format_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_picture_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_pict_op_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_glyph_set_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_glyph_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_directformat_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_directformat_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_pictforminfo_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_pictforminfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_pictvisual_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_pictvisual_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_pictdepth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_render_pictdepth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_pictscreen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for xcb_render_pictscreen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_indexvalue_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_indexvalue_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_color_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_color_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_pointfix_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_pointfix_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_linefix_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_linefix_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_triangle_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_triangle_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_trapezoid_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_trapezoid_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_glyphinfo_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_glyphinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_pict_formats_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_pict_formats_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_pict_formats_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_pict_index_values_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_pict_index_values_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_pict_index_values_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_picture_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_change_picture_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_set_picture_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_free_picture_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_composite_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_trapezoids_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_triangles_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_tri_strip_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_tri_fan_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_reference_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_free_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_add_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_free_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_composite_glyphs_8_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_composite_glyphs_16_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_composite_glyphs_32_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_fill_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_transform_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_transform_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_set_picture_transform_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_filters_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_filters_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_query_filters_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_set_picture_filter_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_animcursorelt_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_animcursorelt_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_anim_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_spanfix_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_spanfix_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_trap_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_render_trap_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_add_traps_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_solid_fill_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_linear_gradient_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_radial_gradient_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_render_create_conical_gradient_request_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_shape_op_iterator_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_shape_kind_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_mask_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_combine_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_offset_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_query_extents_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_query_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_query_extents_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_select_input_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_input_selected_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_input_selected_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_input_selected_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_get_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_get_rectangles_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_shape_get_rectangles_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_query_version_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_select_selection_input_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_cursor_notify_event_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_select_cursor_input_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_image_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_image_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_image_reply_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_xfixes_region_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_bad_region_error_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_create_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_create_region_from_bitmap_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_create_region_from_window_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_create_region_from_gc_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_create_region_from_picture_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_destroy_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_set_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_copy_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_union_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_intersect_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_subtract_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_invert_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_translate_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_region_extents_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_fetch_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_fetch_region_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_fetch_region_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_set_gc_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_set_window_shape_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_set_picture_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_set_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_name_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_image_and_name_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_image_and_name_cookie_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_get_cursor_image_and_name_reply_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_change_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_change_cursor_by_name_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_expand_region_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_hide_cursor_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_show_cursor_request_t","synthetic":true,"types":[]},{"text":"impl !Send for xcb_xfixes_barrier_iterator_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_create_pointer_barrier_request_t","synthetic":true,"types":[]},{"text":"impl Send for xcb_xfixes_delete_pointer_barrier_request_t","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Event&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy&gt; Send for Cookie&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Reply&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Connection","synthetic":false,"types":[]}];
implementors["xdg"] = [{"text":"impl Send for BaseDirectories","synthetic":true,"types":[]},{"text":"impl Send for BaseDirectoriesError","synthetic":true,"types":[]},{"text":"impl Send for FileFindIterator","synthetic":true,"types":[]}];
implementors["xi_unicode"] = [{"text":"impl&lt;'a&gt; Send for LineBreakIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for LineBreakLeafIter","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Send for TextPosition","synthetic":true,"types":[]},{"text":"impl Send for XmlVersion","synthetic":true,"types":[]},{"text":"impl Send for Namespace","synthetic":true,"types":[]},{"text":"impl Send for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParserConfig","synthetic":true,"types":[]},{"text":"impl Send for XmlEvent","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EmitterError","synthetic":true,"types":[]},{"text":"impl Send for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()