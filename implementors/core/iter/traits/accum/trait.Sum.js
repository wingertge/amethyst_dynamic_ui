(function() {var implementors = {};
implementors["cgmath"] = [{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sum&lt;Matrix2&lt;S&gt;&gt; for Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseFloat&gt; Sum&lt;&amp;'a Matrix2&lt;S&gt;&gt; for Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sum&lt;Matrix3&lt;S&gt;&gt; for Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseFloat&gt; Sum&lt;&amp;'a Matrix3&lt;S&gt;&gt; for Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sum&lt;Matrix4&lt;S&gt;&gt; for Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseFloat&gt; Sum&lt;&amp;'a Matrix4&lt;S&gt;&gt; for Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sum&lt;Quaternion&lt;S&gt;&gt; for Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseFloat&gt; Sum&lt;&amp;'a Quaternion&lt;S&gt;&gt; for Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sum&lt;Vector1&lt;S&gt;&gt; for Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseNum&gt; Sum&lt;&amp;'a Vector1&lt;S&gt;&gt; for Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sum&lt;Vector2&lt;S&gt;&gt; for Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseNum&gt; Sum&lt;&amp;'a Vector2&lt;S&gt;&gt; for Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sum&lt;Vector3&lt;S&gt;&gt; for Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseNum&gt; Sum&lt;&amp;'a Vector3&lt;S&gt;&gt; for Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sum&lt;Vector4&lt;S&gt;&gt; for Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseNum&gt; Sum&lt;&amp;'a Vector4&lt;S&gt;&gt; for Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sum&lt;Rad&lt;S&gt;&gt; for Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseFloat&gt; Sum&lt;&amp;'a Rad&lt;S&gt;&gt; for Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sum&lt;Deg&lt;S&gt;&gt; for Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + BaseFloat&gt; Sum&lt;&amp;'a Deg&lt;S&gt;&gt; for Deg&lt;S&gt;","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R:&nbsp;DimName, C:&nbsp;DimName&gt; Sum&lt;Matrix&lt;N, R, C, &lt;DefaultAllocator as Allocator&lt;N, R, C&gt;&gt;::Buffer&gt;&gt; for MatrixMN&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd + Zero,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, C:&nbsp;Dim&gt; Sum&lt;Matrix&lt;N, Dynamic, C, &lt;DefaultAllocator as Allocator&lt;N, Dynamic, C&gt;&gt;::Buffer&gt;&gt; for MatrixMN&lt;N, Dynamic, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd + Zero,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, Dynamic, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R:&nbsp;DimName, C:&nbsp;DimName&gt; Sum&lt;&amp;'a Matrix&lt;N, R, C, &lt;DefaultAllocator as Allocator&lt;N, R, C&gt;&gt;::Buffer&gt;&gt; for MatrixMN&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd + Zero,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, C:&nbsp;Dim&gt; Sum&lt;&amp;'a Matrix&lt;N, Dynamic, C, &lt;DefaultAllocator as Allocator&lt;N, Dynamic, C&gt;&gt;::Buffer&gt;&gt; for MatrixMN&lt;N, Dynamic, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd + Zero,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, Dynamic, C&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl&lt;T&gt; Sum&lt;T&gt; for BigInt <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BigInt: Add&lt;T, Output = BigInt&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sum&lt;T&gt; for BigUint <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BigUint: Add&lt;T, Output = BigUint&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Num + Clone&gt; Sum&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;'a + Num + Clone&gt; Sum&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Integer + Clone&gt; Sum&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Integer + Clone&gt; Sum&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float + Sum&gt; Sum&lt;NotNan&lt;T&gt;&gt; for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Float + Sum&gt; Sum&lt;&amp;'a NotNan&lt;T&gt;&gt; for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()