(function() {var implementors = {};
implementors["amethyst_dynamic_ui"] = [{"text":"impl Sub&lt;&amp;'_ CalculatedDimensions&gt; for &amp;CalculatedDimensions","synthetic":false,"types":[]}];
implementors["andrew"] = [{"text":"impl Sub&lt;Sides&gt; for Sides","synthetic":false,"types":[]}];
implementors["cassowary"] = [{"text":"impl Sub&lt;f64&gt; for Variable","synthetic":false,"types":[]},{"text":"impl Sub&lt;f32&gt; for Variable","synthetic":false,"types":[]},{"text":"impl Sub&lt;Variable&gt; for Variable","synthetic":false,"types":[]},{"text":"impl Sub&lt;Term&gt; for Variable","synthetic":false,"types":[]},{"text":"impl Sub&lt;Variable&gt; for Term","synthetic":false,"types":[]},{"text":"impl Sub&lt;Expression&gt; for Variable","synthetic":false,"types":[]},{"text":"impl Sub&lt;Variable&gt; for Expression","synthetic":false,"types":[]},{"text":"impl Sub&lt;f64&gt; for Term","synthetic":false,"types":[]},{"text":"impl Sub&lt;f32&gt; for Term","synthetic":false,"types":[]},{"text":"impl Sub&lt;Term&gt; for Term","synthetic":false,"types":[]},{"text":"impl Sub&lt;Expression&gt; for Term","synthetic":false,"types":[]},{"text":"impl Sub&lt;Term&gt; for Expression","synthetic":false,"types":[]},{"text":"impl Sub&lt;f64&gt; for Expression","synthetic":false,"types":[]},{"text":"impl Sub&lt;f32&gt; for Expression","synthetic":false,"types":[]},{"text":"impl Sub&lt;Expression&gt; for Expression","synthetic":false,"types":[]}];
implementors["cgmath"] = [{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sub&lt;Matrix2&lt;S&gt;&gt; for Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Matrix2&lt;S&gt;&gt; for Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;Matrix2&lt;S&gt;&gt; for &amp;'a Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Matrix2&lt;S&gt;&gt; for &amp;'b Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sub&lt;Matrix3&lt;S&gt;&gt; for Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Matrix3&lt;S&gt;&gt; for Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;Matrix3&lt;S&gt;&gt; for &amp;'a Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Matrix3&lt;S&gt;&gt; for &amp;'b Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sub&lt;Matrix4&lt;S&gt;&gt; for Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Matrix4&lt;S&gt;&gt; for Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;Matrix4&lt;S&gt;&gt; for &amp;'a Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Matrix4&lt;S&gt;&gt; for &amp;'b Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sub&lt;Quaternion&lt;S&gt;&gt; for Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Quaternion&lt;S&gt;&gt; for Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;Quaternion&lt;S&gt;&gt; for &amp;'a Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Quaternion&lt;S&gt;&gt; for &amp;'b Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Vector1&lt;S&gt;&gt; for Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector1&lt;S&gt;&gt; for Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Vector1&lt;S&gt;&gt; for &amp;'a Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector1&lt;S&gt;&gt; for &amp;'b Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Vector2&lt;S&gt;&gt; for Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector2&lt;S&gt;&gt; for Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Vector2&lt;S&gt;&gt; for &amp;'a Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector2&lt;S&gt;&gt; for &amp;'b Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Vector3&lt;S&gt;&gt; for Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector3&lt;S&gt;&gt; for Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Vector3&lt;S&gt;&gt; for &amp;'a Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector3&lt;S&gt;&gt; for &amp;'b Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Vector4&lt;S&gt;&gt; for Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector4&lt;S&gt;&gt; for Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Vector4&lt;S&gt;&gt; for &amp;'a Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector4&lt;S&gt;&gt; for &amp;'b Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sub&lt;Rad&lt;S&gt;&gt; for Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Rad&lt;S&gt;&gt; for Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;Rad&lt;S&gt;&gt; for &amp;'a Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Rad&lt;S&gt;&gt; for &amp;'b Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Sub&lt;Deg&lt;S&gt;&gt; for Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Deg&lt;S&gt;&gt; for Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Sub&lt;Deg&lt;S&gt;&gt; for &amp;'a Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseFloat&gt; Sub&lt;&amp;'a Deg&lt;S&gt;&gt; for &amp;'b Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Vector1&lt;S&gt;&gt; for Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector1&lt;S&gt;&gt; for Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Vector1&lt;S&gt;&gt; for &amp;'a Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector1&lt;S&gt;&gt; for &amp;'b Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Point1&lt;S&gt;&gt; for Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Point1&lt;S&gt;&gt; for Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Point1&lt;S&gt;&gt; for &amp;'a Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Point1&lt;S&gt;&gt; for &amp;'b Point1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Vector2&lt;S&gt;&gt; for Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector2&lt;S&gt;&gt; for Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Vector2&lt;S&gt;&gt; for &amp;'a Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector2&lt;S&gt;&gt; for &amp;'b Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Point2&lt;S&gt;&gt; for Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Point2&lt;S&gt;&gt; for Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Point2&lt;S&gt;&gt; for &amp;'a Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Point2&lt;S&gt;&gt; for &amp;'b Point2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Vector3&lt;S&gt;&gt; for Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector3&lt;S&gt;&gt; for Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Vector3&lt;S&gt;&gt; for &amp;'a Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Vector3&lt;S&gt;&gt; for &amp;'b Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseNum&gt; Sub&lt;Point3&lt;S&gt;&gt; for Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Point3&lt;S&gt;&gt; for Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseNum&gt; Sub&lt;Point3&lt;S&gt;&gt; for &amp;'a Point3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, S:&nbsp;BaseNum&gt; Sub&lt;&amp;'a Point3&lt;S&gt;&gt; for &amp;'b Point3&lt;S&gt;","synthetic":false,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T:&nbsp;Sub&lt;T, Output = T&gt;&gt; Sub&lt;Angle&lt;T&gt;&gt; for Angle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Length&lt;T, U&gt;&gt; for Length&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Point2D&lt;T, U&gt;&gt; for Point2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Size2D&lt;T, U&gt;&gt; for Point2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Vector2D&lt;T, U&gt;&gt; for Point2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Point3D&lt;T, U&gt;&gt; for Point3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Size3D&lt;T, U&gt;&gt; for Point3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Vector3D&lt;T, U&gt;&gt; for Point3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, Src, Dst&gt; Sub&lt;Scale&lt;T, Src, Dst&gt;&gt; for Scale&lt;T, Src, Dst&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Size2D&lt;T, U&gt;&gt; for Size2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Size3D&lt;T, U&gt;&gt; for Size3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, Src, Dst1, Dst2&gt; Sub&lt;Translation2D&lt;T, Dst1, Dst2&gt;&gt; for Translation2D&lt;T, Src, Dst2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, Src, Dst1, Dst2&gt; Sub&lt;Translation3D&lt;T, Dst1, Dst2&gt;&gt; for Translation3D&lt;T, Src, Dst2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Vector2D&lt;T, U&gt;&gt; for Vector2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub, U&gt; Sub&lt;Vector3D&lt;T, U&gt;&gt; for Vector3D&lt;T, U&gt;","synthetic":false,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl Sub&lt;Usage&gt; for Usage","synthetic":false,"types":[]},{"text":"impl Sub&lt;Access&gt; for Access","synthetic":false,"types":[]},{"text":"impl Sub&lt;CommandBufferFlags&gt; for CommandBufferFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;Aspects&gt; for Aspects","synthetic":false,"types":[]},{"text":"impl Sub&lt;ImageFeature&gt; for ImageFeature","synthetic":false,"types":[]},{"text":"impl Sub&lt;BufferFeature&gt; for BufferFeature","synthetic":false,"types":[]},{"text":"impl Sub&lt;ViewCapabilities&gt; for ViewCapabilities","synthetic":false,"types":[]},{"text":"impl Sub&lt;Usage&gt; for Usage","synthetic":false,"types":[]},{"text":"impl Sub&lt;Access&gt; for Access","synthetic":false,"types":[]},{"text":"impl Sub&lt;Properties&gt; for Properties","synthetic":false,"types":[]},{"text":"impl Sub&lt;Dependencies&gt; for Dependencies","synthetic":false,"types":[]},{"text":"impl Sub&lt;CommandPoolCreateFlags&gt; for CommandPoolCreateFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;DescriptorPoolCreateFlags&gt; for DescriptorPoolCreateFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ColorMask&gt; for ColorMask","synthetic":false,"types":[]},{"text":"impl Sub&lt;Face&gt; for Face","synthetic":false,"types":[]},{"text":"impl Sub&lt;PipelineStage&gt; for PipelineStage","synthetic":false,"types":[]},{"text":"impl Sub&lt;ShaderStageFlags&gt; for ShaderStageFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PipelineCreationFlags&gt; for PipelineCreationFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ControlFlags&gt; for ControlFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ResultFlags&gt; for ResultFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PipelineStatistic&gt; for PipelineStatistic","synthetic":false,"types":[]},{"text":"impl Sub&lt;CompositeAlpha&gt; for CompositeAlpha","synthetic":false,"types":[]},{"text":"impl Sub&lt;Features&gt; for Features","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T, S&gt; Sub&lt;&amp;'_ HashSet&lt;T, S&gt;&gt; for &amp;HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["lyon_path"] = [{"text":"impl Sub&lt;u32&gt; for VertexId","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl Sub&lt;usize&gt; for Dynamic","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1, C1, R2, C2, SA, SB&gt; Sub&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: SameShapeAllocator&lt;N, R1, C1, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R1, R2&gt; + SameNumberOfColumns&lt;C1, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R1, C1, R2, C2, SA, SB&gt; Sub&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: SameShapeAllocator&lt;N, R2, C2, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R2, R1&gt; + SameNumberOfColumns&lt;C2, C1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1, C1, R2, C2, SA, SB&gt; Sub&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: SameShapeAllocator&lt;N, R1, C1, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R1, R2&gt; + SameNumberOfColumns&lt;C1, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, R1, C1, R2, C2, SA, SB&gt; Sub&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: SameShapeAllocator&lt;N, R1, C1, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R1, R2&gt; + SameNumberOfColumns&lt;C1, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Sub&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Sub&lt;Point&lt;N, D&gt;&gt; for &amp;'a Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Sub&lt;&amp;'b Point&lt;N, D&gt;&gt; for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Sub&lt;Point&lt;N, D&gt;&gt; for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D1:&nbsp;DimName, D2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, D2&gt;&gt; Sub&lt;&amp;'b Matrix&lt;N, D2, U1, SB&gt;&gt; for &amp;'a Point&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, U1&gt; + Allocator&lt;N, D2, U1&gt; + SameShapeAllocator&lt;N, D1, U1, D2, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D1, D2, Representative = D1&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D1:&nbsp;DimName, D2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, D2&gt;&gt; Sub&lt;Matrix&lt;N, D2, U1, SB&gt;&gt; for &amp;'a Point&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, U1&gt; + Allocator&lt;N, D2, U1&gt; + SameShapeAllocator&lt;N, D1, U1, D2, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D1, D2, Representative = D1&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D1:&nbsp;DimName, D2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, D2&gt;&gt; Sub&lt;&amp;'b Matrix&lt;N, D2, U1, SB&gt;&gt; for Point&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, U1&gt; + Allocator&lt;N, D2, U1&gt; + SameShapeAllocator&lt;N, D1, U1, D2, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D1, D2, Representative = D1&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D1:&nbsp;DimName, D2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, D2&gt;&gt; Sub&lt;Matrix&lt;N, D2, U1, SB&gt;&gt; for Point&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, U1&gt; + Allocator&lt;N, D2, U1&gt; + SameShapeAllocator&lt;N, D1, U1, D2, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D1, D2, Representative = D1&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;RealField&gt; Sub&lt;&amp;'b Quaternion&lt;N&gt;&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;RealField&gt; Sub&lt;Quaternion&lt;N&gt;&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;RealField&gt; Sub&lt;&amp;'b Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Sub&lt;Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Sub&lt;AtFlags&gt; for AtFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;OFlag&gt; for OFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;SealFlag&gt; for SealFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;SpliceFFlags&gt; for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;FallocateFlags&gt; for FallocateFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ModuleInitFlags&gt; for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;DeleteModuleFlags&gt; for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MntFlags&gt; for MntFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MQ_OFlag&gt; for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;FdFlag&gt; for FdFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;InterfaceFlags&gt; for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;PollFlags&gt; for PollFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;CloneFlags&gt; for CloneFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;EpollFlags&gt; for EpollFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;EpollCreateFlags&gt; for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;EfdFlags&gt; for EfdFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MemFdCreateFlag&gt; for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;ProtFlags&gt; for ProtFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MapFlags&gt; for MapFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MsFlags&gt; for MsFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;MlockAllFlags&gt; for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;Options&gt; for Options","synthetic":false,"types":[]},{"text":"impl Sub&lt;QuotaValidFlags&gt; for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SaFlags&gt; for SaFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SfdFlags&gt; for SfdFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SockFlag&gt; for SockFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;MsgFlags&gt; for MsgFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;SFlag&gt; for SFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;Mode&gt; for Mode","synthetic":false,"types":[]},{"text":"impl Sub&lt;FsFlags&gt; for FsFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;InputFlags&gt; for InputFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;OutputFlags&gt; for OutputFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ControlFlags&gt; for ControlFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;LocalFlags&gt; for LocalFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;TimeSpec&gt; for TimeSpec","synthetic":false,"types":[]},{"text":"impl Sub&lt;TimeVal&gt; for TimeVal","synthetic":false,"types":[]},{"text":"impl Sub&lt;WaitPidFlag&gt; for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl Sub&lt;AddWatchFlags&gt; for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;InitFlags&gt; for InitFlags","synthetic":false,"types":[]},{"text":"impl Sub&lt;AccessFlags&gt; for AccessFlags","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;usize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b usize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;isize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b isize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u8&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u8&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u16&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u16&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;usize&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b usize&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u32&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u32&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u64&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u64&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u128&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u128&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u128&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;u128&gt; for BigUint","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'b Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Sub&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Sub&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;T&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'a T&gt; for &amp;'b Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;OrderedFloat&lt;T&gt;&gt; for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;NotNan&lt;T&gt;&gt; for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;T&gt; for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C:&nbsp;Sub, T:&nbsp;Float&gt; Sub&lt;PreAlpha&lt;C, T&gt;&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float, C:&nbsp;Sub&lt;T&gt;&gt; Sub&lt;T&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Sub, T:&nbsp;Float&gt; Sub&lt;Alpha&lt;C, T&gt;&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub + Clone, C:&nbsp;Sub&lt;T&gt;&gt; Sub&lt;T&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Hsl&lt;S, T&gt;&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Hsv&lt;S, T&gt;&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Hwb&lt;S, T&gt;&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Lab&lt;Wp, T&gt;&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Lch&lt;Wp, T&gt;&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Luma&lt;S, T&gt;&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;Rgb&lt;S, T&gt;&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Sub&lt;T&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Sub,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Sub&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Xyz&lt;Wp, T&gt;&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;Yxy&lt;Wp, T&gt;&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Sub&lt;T&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;LabHue&lt;T&gt;&gt; for LabHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;T&gt; for LabHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;RgbHue&lt;T&gt;&gt; for RgbHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;T&gt; for RgbHue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Sub&lt;Transformations&gt; for Transformations","synthetic":false,"types":[]}];
implementors["rendy_descriptor"] = [{"text":"impl Sub&lt;DescriptorRanges&gt; for DescriptorRanges","synthetic":false,"types":[]}];
implementors["ron"] = [{"text":"impl Sub&lt;Extensions&gt; for Extensions","synthetic":false,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N:&nbsp;Sub&lt;Output = N&gt;&gt; Sub&lt;Point&lt;N&gt;&gt; for Point&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Sub&lt;Output = N&gt;&gt; Sub&lt;Vector&lt;N&gt;&gt; for Vector&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Sub&lt;Output = N&gt;&gt; Sub&lt;Vector&lt;N&gt;&gt; for Point&lt;N&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Sub&lt;Duration&gt; for Duration","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for Timespec","synthetic":false,"types":[]},{"text":"impl Sub&lt;Timespec&gt; for Timespec","synthetic":false,"types":[]},{"text":"impl Sub&lt;SteadyTime&gt; for SteadyTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for SteadyTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for Tm","synthetic":false,"types":[]},{"text":"impl Sub&lt;Tm&gt; for Tm","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Sub&lt;Z0&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Sub&lt;PInt&lt;U&gt;&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Sub&lt;NInt&lt;U&gt;&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Sub&lt;Z0&gt; for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Sub&lt;Z0&gt; for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Sub&lt;NInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Add&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Add&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Sub&lt;PInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Add&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Add&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Sub&lt;PInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Cmp&lt;Ur&gt; + PrivateIntegerAdd&lt;&lt;Ul as Cmp&lt;Ur&gt;&gt;::Output, Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Sub&lt;NInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ur: Cmp&lt;Ul&gt; + PrivateIntegerAdd&lt;&lt;Ur as Cmp&lt;Ul&gt;&gt;::Output, Ul&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Sub&lt;B0&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Sub&lt;B0&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Sub&lt;B1&gt; for UInt&lt;UInt&lt;U, B&gt;, B1&gt;","synthetic":false,"types":[]},{"text":"impl Sub&lt;B1&gt; for UInt&lt;UTerm, B1&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned&gt; Sub&lt;B1&gt; for UInt&lt;U, B0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sub&lt;B1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Sub1&lt;U&gt;: Unsigned,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Sub&lt;UTerm&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Bl:&nbsp;Bit, Ur:&nbsp;Unsigned&gt; Sub&lt;Ur&gt; for UInt&lt;Ul, Bl&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;UInt&lt;Ul, Bl&gt;: PrivateSub&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PrivateSubOut&lt;UInt&lt;Ul, Bl&gt;, Ur&gt;: Trim,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Sub&lt;ATerm&gt; for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;Vl, Al, Vr, Ar&gt; Sub&lt;TArr&lt;Vr, Ar&gt;&gt; for TArr&lt;Vl, Al&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Vl: Sub&lt;Vr&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Al: Sub&lt;Ar&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Sub&lt;DndAction&gt; for DndAction","synthetic":false,"types":[]},{"text":"impl Sub&lt;Resize&gt; for Resize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Transient&gt; for Transient","synthetic":false,"types":[]},{"text":"impl Sub&lt;Capability&gt; for Capability","synthetic":false,"types":[]},{"text":"impl Sub&lt;Mode&gt; for Mode","synthetic":false,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl Sub&lt;ContentHint&gt; for ContentHint","synthetic":false,"types":[]},{"text":"impl Sub&lt;Anchor&gt; for Anchor","synthetic":false,"types":[]},{"text":"impl Sub&lt;Gravity&gt; for Gravity","synthetic":false,"types":[]},{"text":"impl Sub&lt;ConstraintAdjustment&gt; for ConstraintAdjustment","synthetic":false,"types":[]},{"text":"impl Sub&lt;Anchor&gt; for Anchor","synthetic":false,"types":[]},{"text":"impl Sub&lt;Flags&gt; for Flags","synthetic":false,"types":[]},{"text":"impl Sub&lt;ConstraintAdjustment&gt; for ConstraintAdjustment","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()