(function() {var implementors = {};
implementors["cassowary"] = [{"text":"impl Neg for Variable","synthetic":false,"types":[]},{"text":"impl Neg for Term","synthetic":false,"types":[]},{"text":"impl Neg for Expression","synthetic":false,"types":[]}];
implementors["cgmath"] = [{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Neg for Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Neg for &amp;'a Matrix2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Neg for Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Neg for &amp;'a Matrix3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Neg for Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Neg for &amp;'a Matrix4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Neg for Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Neg for &amp;'a Quaternion&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Neg&lt;Output = S&gt;&gt; Neg for Vector1&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Neg&lt;Output = S&gt;&gt; Neg for Vector2&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Neg&lt;Output = S&gt;&gt; Neg for Vector3&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Neg&lt;Output = S&gt;&gt; Neg for Vector4&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Neg for Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Neg for &amp;'a Rad&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;BaseFloat&gt; Neg for Deg&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;BaseFloat&gt; Neg for &amp;'a Deg&lt;S&gt;","synthetic":false,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T:&nbsp;Neg&lt;Output = T&gt;&gt; Neg for Angle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U, T:&nbsp;Neg&gt; Neg for Length&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Neg, U&gt; Neg for Point2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Neg, U&gt; Neg for Point3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Neg, U&gt; Neg for Size2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Neg, U&gt; Neg for Size3D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Neg, U&gt; Neg for Vector2D&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Neg, U&gt; Neg for Vector3D&lt;T, U&gt;","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; Neg for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedNeg,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; Neg for &amp;'a Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedNeg,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Neg&gt; Neg for Unit&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + ClosedNeg, D:&nbsp;DimName&gt; Neg for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + ClosedNeg, D:&nbsp;DimName&gt; Neg for &amp;'a Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Neg for Quaternion&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;RealField&gt; Neg for &amp;'a Quaternion&lt;N&gt;","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Neg for TimeSpec","synthetic":false,"types":[]},{"text":"impl Neg for TimeVal","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Neg for Sign","synthetic":false,"types":[]},{"text":"impl Neg for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Neg for &amp;'a BigInt","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone + Num + Neg&lt;Output = T&gt;&gt; Neg for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num + Neg&lt;Output = T&gt;&gt; Neg for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Neg for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer + Neg&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Neg for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer + Neg&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; Neg for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Neg for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Neg for Duration","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Neg for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Neg for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Neg for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Neg for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V, A&gt; Neg for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Neg,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Neg,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()