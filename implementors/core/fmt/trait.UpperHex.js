(function() {var implementors = {};
implementors["andrew"] = [{"text":"impl UpperHex for Sides","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl UpperHex for Bytes","synthetic":false,"types":[]},{"text":"impl UpperHex for BytesMut","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a, T:&nbsp;UpperHex&gt; UpperHex for StyledValue&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;ArrayLength&lt;u8&gt;&gt; UpperHex for GenericArray&lt;u8, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Add&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Add&lt;T&gt;&gt;::Output: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl UpperHex for Usage","synthetic":false,"types":[]},{"text":"impl UpperHex for Access","synthetic":false,"types":[]},{"text":"impl UpperHex for CommandBufferFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for Aspects","synthetic":false,"types":[]},{"text":"impl UpperHex for ImageFeature","synthetic":false,"types":[]},{"text":"impl UpperHex for BufferFeature","synthetic":false,"types":[]},{"text":"impl UpperHex for ViewCapabilities","synthetic":false,"types":[]},{"text":"impl UpperHex for Usage","synthetic":false,"types":[]},{"text":"impl UpperHex for Access","synthetic":false,"types":[]},{"text":"impl UpperHex for Properties","synthetic":false,"types":[]},{"text":"impl UpperHex for Dependencies","synthetic":false,"types":[]},{"text":"impl UpperHex for CommandPoolCreateFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for DescriptorPoolCreateFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for ColorMask","synthetic":false,"types":[]},{"text":"impl UpperHex for Face","synthetic":false,"types":[]},{"text":"impl UpperHex for PipelineStage","synthetic":false,"types":[]},{"text":"impl UpperHex for ShaderStageFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for PipelineCreationFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for ControlFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for ResultFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for PipelineStatistic","synthetic":false,"types":[]},{"text":"impl UpperHex for CompositeAlpha","synthetic":false,"types":[]},{"text":"impl UpperHex for Features","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;'a, I&gt; UpperHex for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: UpperHex,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; UpperHex for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + UpperHex,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;usize, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl UpperHex for AtFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for OFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for SealFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for FdFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for SpliceFFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for FallocateFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for ModuleInitFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for DeleteModuleFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MsFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MntFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MQ_OFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for FdFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for InterfaceFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for PollFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for CloneFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for EpollFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for EpollCreateFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for EfdFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MemFdCreateFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for ProtFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MapFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MsFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for MlockAllFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for Options","synthetic":false,"types":[]},{"text":"impl UpperHex for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SaFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SfdFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SockFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for MsgFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for SFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for Mode","synthetic":false,"types":[]},{"text":"impl UpperHex for FsFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for InputFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for OutputFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for ControlFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for LocalFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for WaitPidFlag","synthetic":false,"types":[]},{"text":"impl UpperHex for AddWatchFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for InitFlags","synthetic":false,"types":[]},{"text":"impl UpperHex for AccessFlags","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl UpperHex for BigInt","synthetic":false,"types":[]},{"text":"impl UpperHex for BigUint","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; UpperHex for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UpperHex + Num + PartialOrd + Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;UpperHex + Clone + Integer&gt; UpperHex for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C, T&gt; UpperHex for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UpperHex,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UpperHex,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; UpperHex for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + UpperHex,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; UpperHex for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + UpperHex,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl UpperHex for Transformations","synthetic":false,"types":[]}];
implementors["ron"] = [{"text":"impl UpperHex for Extensions","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; UpperHex for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: UpperHex,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; UpperHex for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: UpperHex,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["wayland_client"] = [{"text":"impl UpperHex for DndAction","synthetic":false,"types":[]},{"text":"impl UpperHex for Resize","synthetic":false,"types":[]},{"text":"impl UpperHex for Transient","synthetic":false,"types":[]},{"text":"impl UpperHex for Capability","synthetic":false,"types":[]},{"text":"impl UpperHex for Mode","synthetic":false,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl UpperHex for ContentHint","synthetic":false,"types":[]},{"text":"impl UpperHex for Anchor","synthetic":false,"types":[]},{"text":"impl UpperHex for Gravity","synthetic":false,"types":[]},{"text":"impl UpperHex for ConstraintAdjustment","synthetic":false,"types":[]},{"text":"impl UpperHex for Anchor","synthetic":false,"types":[]},{"text":"impl UpperHex for Flags","synthetic":false,"types":[]},{"text":"impl UpperHex for ConstraintAdjustment","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()