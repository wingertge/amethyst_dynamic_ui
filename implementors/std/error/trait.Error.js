(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["amethyst_audio"] = [{"text":"impl Error for DecoderError","synthetic":false,"types":[]}];
implementors["amethyst_config"] = [{"text":"impl Error for ConfigError","synthetic":false,"types":[]}];
implementors["amethyst_fmod"] = [{"text":"impl Error for Status","synthetic":false,"types":[]}];
implementors["amethyst_input"] = [{"text":"impl&lt;T:&nbsp;BindingTypes&gt; Error for BindingError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Action: Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Axis: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;BindingTypes&gt; Error for BindingsFileError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Axis: Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Action: Display,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;T:&nbsp;Any&gt; Error for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]}];
implementors["claxon"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["cpal"] = [{"text":"impl Error for HostUnavailable","synthetic":false,"types":[]},{"text":"impl Error for BackendSpecificError","synthetic":false,"types":[]},{"text":"impl Error for DevicesError","synthetic":false,"types":[]},{"text":"impl Error for DeviceNameError","synthetic":false,"types":[]},{"text":"impl Error for SupportedFormatsError","synthetic":false,"types":[]},{"text":"impl Error for DefaultFormatError","synthetic":false,"types":[]},{"text":"impl Error for BuildStreamError","synthetic":false,"types":[]},{"text":"impl Error for PlayStreamError","synthetic":false,"types":[]},{"text":"impl Error for PauseStreamError","synthetic":false,"types":[]},{"text":"impl Error for StreamError","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TrySelectError","synthetic":false,"types":[]},{"text":"impl Error for SelectTimeoutError","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Error for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Error,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Error,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["erased_serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Display + Debug&gt; Error for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["fern"] = [{"text":"impl Error for InitError","synthetic":false,"types":[]}];
implementors["font_kit"] = [{"text":"impl Error for FontLoadingError","synthetic":false,"types":[]},{"text":"impl Error for GlyphLoadingError","synthetic":false,"types":[]},{"text":"impl Error for SelectionError","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl Error for SubmissionError","synthetic":false,"types":[]}];
implementors["gltf"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["gltf_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["glyph_brush"] = [{"text":"impl Error for BrushError","synthetic":false,"types":[]}];
implementors["hound"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl Error for ImageError","synthetic":false,"types":[]},{"text":"impl Error for UnsupportedError","synthetic":false,"types":[]},{"text":"impl Error for ParameterError","synthetic":false,"types":[]},{"text":"impl Error for EncodingError","synthetic":false,"types":[]},{"text":"impl Error for DecodingError","synthetic":false,"types":[]},{"text":"impl Error for LimitError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I&gt; Error for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Debug,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["laminar"] = [{"text":"impl Error for ErrorKind","synthetic":false,"types":[]}];
implementors["lewton"] = [{"text":"impl Error for HeaderReadError","synthetic":false,"types":[]},{"text":"impl Error for AudioReadError","synthetic":false,"types":[]},{"text":"impl Error for VorbisError","synthetic":false,"types":[]}];
implementors["lexical"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["libloading"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Error for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Error for ParseLevelError","synthetic":false,"types":[]}];
implementors["minimp3"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Error for Errno","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;E&gt; Error for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Error for ParseBigIntError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Error for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;E:&nbsp;Error&gt; Error for ParseComplexError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl Error for ParseRatioError","synthetic":false,"types":[]}];
implementors["ogg"] = [{"text":"impl Error for OggReadError","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl Error for FloatIsNan","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Error for ParseNotNanError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Error for DecodingError","synthetic":false,"types":[]},{"text":"impl Error for EncodingError","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Error for BernoulliError","synthetic":false,"types":[]},{"text":"impl Error for WeightedError","synthetic":false,"types":[]},{"text":"impl Error for ReadError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Error for ThreadPoolBuildError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Error for UnicodeWordError","synthetic":false,"types":[]}];
implementors["rodio"] = [{"text":"impl Error for DecoderError","synthetic":false,"types":[]}];
implementors["ron"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rustc_version"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rusttype"] = [{"text":"impl Error for CacheReadErr","synthetic":false,"types":[]},{"text":"impl Error for CacheWriteErr","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Error for SemVerError","synthetic":false,"types":[]},{"text":"impl Error for ReqParseError","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["shred"] = [{"text":"impl Error for InvalidBorrow","synthetic":false,"types":[]}];
implementors["specs"] = [{"text":"impl Error for BoxedErr","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for WrongGeneration","synthetic":false,"types":[]},{"text":"impl Error for NoError","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Error for ParseColorError","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Error for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Error for DatetimeParseError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["unic_langid_impl"] = [{"text":"impl Error for LanguageIdentifierError","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Error for Void","synthetic":false,"types":[]}];
implementors["walkdir"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["wayland_client"] = [{"text":"impl Error for ConnectError","synthetic":false,"types":[]},{"text":"impl Error for GlobalError","synthetic":false,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl Error for MessageWriteError","synthetic":false,"types":[]},{"text":"impl Error for MessageParseError","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Error for BadIcon","synthetic":false,"types":[]},{"text":"impl Error for XNotSupported","synthetic":false,"types":[]},{"text":"impl Error for EventsLoopClosed","synthetic":false,"types":[]},{"text":"impl Error for CreationError","synthetic":false,"types":[]}];
implementors["x11_clipboard"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["x11_dl"] = [{"text":"impl Error for OpenError","synthetic":false,"types":[]}];
implementors["xcb"] = [{"text":"impl&lt;T:&nbsp;Debug&gt; Error for Error&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for ConnError","synthetic":false,"types":[]}];
implementors["xdg"] = [{"text":"impl Error for BaseDirectoriesError","synthetic":false,"types":[]}];
implementors["xml"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for EmitterError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()