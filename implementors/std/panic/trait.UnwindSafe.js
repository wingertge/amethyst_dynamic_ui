(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl UnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O&gt; UnwindSafe for Id&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Additive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Multiplicative","synthetic":true,"types":[]}];
implementors["alsa_sys"] = [{"text":"impl UnwindSafe for snd_dlsym_link","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_async_handler_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_shm_area","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_input_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_output_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_config_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct__snd_config_iterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_config_update_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_devname_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_hw_params_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_sw_params_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_status_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_access_mask_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_format_mask_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_subformat_mask_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_channel_area_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_sync_id_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_scope_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_chmap_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_chmap_query_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_hook_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_pcm_scope_ops_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_rawmidi_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_rawmidi_params_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_rawmidi_status_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_rawmidi_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_id_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_ginfo_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_gparams_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_gstatus_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_params_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_status_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_read_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_tread_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_query_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_timer_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_hwdep_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_hwdep_dsp_status_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_hwdep_dsp_image_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_hwdep_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_aes_iec958_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_ctl_card_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_ctl_elem_id_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_ctl_elem_list_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_ctl_elem_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_ctl_elem_value_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_ctl_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_ctl_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_sctl_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_hctl_elem_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_hctl_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_mixer_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_mixer_class_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_mixer_elem_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_mixer_selem_regopt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_mixer_selem_id_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_addr_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_connect_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_real_time_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_timestamp_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_ev_note_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_ev_ctrl_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_ev_raw8_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_ev_raw32_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_ev_ext_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_result_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_queue_skew_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_ev_queue_control_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union_Unnamed9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union_Unnamed10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_system_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_client_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_client_pool_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_port_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_port_subscribe_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_query_subscribe_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_queue_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_queue_status_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_queue_tempo_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_queue_timer_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_seq_remove_events_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for snd_midi_event_t","synthetic":true,"types":[]},{"text":"impl&lt;Storage, Align&gt; UnwindSafe for __BindgenBitfieldUnit&lt;Storage, Align&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Align: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Storage: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _snd_pcm_audio_tstamp_config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _snd_pcm_audio_tstamp_report","synthetic":true,"types":[]}];
implementors["amethyst"] = [{"text":"impl&lt;'a, T, E&nbsp;=&nbsp;StateEvent&lt;StringBindings&gt;, R&nbsp;=&nbsp;StateEventReader&lt;StringBindings&gt;&gt; !UnwindSafe for CoreApplication&lt;'a, T, E, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T, E, R&gt; !UnwindSafe for ApplicationBuilder&lt;S, T, E, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CallbackQueue","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for GameData&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for GameDataBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdoutLog","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggerConfig","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for StateData&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !UnwindSafe for Trans&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, E&gt; !UnwindSafe for StateMachine&lt;'a, T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StateEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;StringBindings&gt; !UnwindSafe for StateEventReader&lt;T&gt;","synthetic":true,"types":[]}];
implementors["amethyst_animation"] = [{"text":"impl&lt;'a&gt; UnwindSafe for VertexSkinningBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for SamplingBundle&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; UnwindSafe for AnimationBundle&lt;'a, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaterialPrimitive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaterialChannel","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AnimationPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for AnimationSetPrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AnimationHierarchyPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for AnimatablePrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlendMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sampler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RestState&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AnimationHierarchy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Animation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EndControl","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SamplerControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SamplerControlSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepDirection","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AnimationCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AnimationControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeferStartRelation","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for AnimationControlSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for AnimationSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Joint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Skin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JointPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SkinPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SkinnablePrefab","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for VertexSkinningSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteRenderPrimitive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteRenderChannel","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for AnimationControlSystem&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SamplerInterpolationSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransformChannel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiTransformChannel","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SamplerPrimitive&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_assets"] = [{"text":"impl&lt;D&gt; !UnwindSafe for FormatValue&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Cache&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RonFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !UnwindSafe for AssetLoaderSystemData&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Loader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PrefabLoaderSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for PrefabLoaderSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Prefab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; UnwindSafe for AssetPrefab&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for PrefabLoader&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Completion","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ProgressCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HotReloadBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HotReloadStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HotReloadSystem","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for SingleFile&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Directory","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !UnwindSafe for AssetStorage&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ProcessingState&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Processor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized&gt; UnwindSafe for Handle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for WeakHandle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_audio"] = [{"text":"impl UnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioBundle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AudioEmitter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WavFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OggFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlacFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mp3Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioSink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioSystemDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; UnwindSafe for DjSystemDesc&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; UnwindSafe for DjSystem&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecoderError","synthetic":true,"types":[]}];
implementors["amethyst_config"] = [{"text":"impl !UnwindSafe for ConfigError","synthetic":true,"types":[]}];
implementors["amethyst_controls"] = [{"text":"impl&lt;T&gt; UnwindSafe for FlyControlBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ArcBallControlBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlyControlTag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArcBallControlTag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlTagPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowFocus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HideCursor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FlyMovementSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FlyMovementSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArcBallRotationSystem","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FreeRotationSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FreeRotationSystemDesc","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MouseFocusUpdateSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseFocusUpdateSystemDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CursorHideSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CursorHideSystemDesc","synthetic":true,"types":[]}];
implementors["amethyst_core"] = [{"text":"impl UnwindSafe for AddBarrier","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for AddSystem&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; UnwindSafe for AddSystemDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for AddThreadLocal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; UnwindSafe for AddThreadLocalDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for AddBundle&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameRateLimitStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameRateLimitConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameLimiter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Plane&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Scalar + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Ray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Scalar + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stopwatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TransformBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransformSystemDesc","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TransformSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Axis2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Axis3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hidden","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HiddenPropagate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HideHierarchySystemDesc","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HideHierarchySystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Named","synthetic":true,"types":[]},{"text":"impl&lt;S, V&gt; UnwindSafe for Pausable&lt;S, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_dynamic_ui"] = [{"text":"impl UnwindSafe for Fonts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Textures","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for DynamicUiBundle&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WidgetConstraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PaddableConstraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WidgetConstraintBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PaddableConstraintBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CenteredLayout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinearLayoutData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowDirection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemAlignment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinearLayout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LayoutVars","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VarType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExactFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VariableEditable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditVariable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LAYOUT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtraButtonData","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiCachedImage","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiCachedText","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FontFamilyPrefab","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for HtmlTextData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CalculatedDimensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LayoutIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tinted","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for DynamicUiFormat&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DynamicLayout","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DynamicLayoutData","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&nbsp;=&nbsp;NoCustomElements&gt; !UnwindSafe for DynamicUiLoader&lt;'a, C&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiTextPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizeSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonTintAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonTintActionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonTintRetrigger","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LimnSolver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LayoutManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SoundEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiFmodRetrigger","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiFmodSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiFmodSystemDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Styles","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FontFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HtmlText","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiButtonTintSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonTintSystemDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SizeConstraints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ModalData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoCustomElements","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiExtraTextData","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ImageButtonData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I18nData","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;NoCustomElements&gt; !UnwindSafe for LayoutElement&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]}];
implementors["amethyst_error"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Causes&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["amethyst_fmod"] = [{"text":"impl UnwindSafe for FmodBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventInstance","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StopMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SoundBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for System","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attributes3D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CoreSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DriverInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bank","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UpdateSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]}];
implementors["amethyst_input"] = [{"text":"impl UnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StringBindings","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bindings&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BindingError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for InputBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for BindingsFileError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Button","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControllerAxis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControllerButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControllerEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for InputEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for InputHandler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseAxis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScrollDirection","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for InputSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for InputSystem&lt;T&gt;","synthetic":true,"types":[]}];
implementors["amethyst_locale"] = [{"text":"impl UnwindSafe for LocaleFormat","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Locale","synthetic":true,"types":[]}];
implementors["amethyst_network"] = [{"text":"impl !UnwindSafe for NetworkSimulationEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeliveryRequirement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UrgencyRequirement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkSimulationTimeSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkSimulationTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LaminarNetworkBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LaminarSocketResource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNetworkBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpStreamManagementSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpConnectionListenerSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNetworkResource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpNetworkBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpSocketResource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransportResource","synthetic":true,"types":[]}];
implementors["amethyst_rendy"] = [{"text":"impl&lt;B, T&gt; UnwindSafe for DrawBase3DDesc&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; UnwindSafe for DrawBase3D&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Base3DPassDef&gt;::TextureSet: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; UnwindSafe for DrawBase3DTransparentDesc&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; UnwindSafe for DrawBase3DTransparent&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawDebugLinesDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DrawDebugLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlatPassDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawFlat2DDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DrawFlat2D&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawFlat2DTransparentDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DrawFlat2DTransparent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PbrPassDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShadedPassDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawSkyboxDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DrawSkybox&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, C&gt; UnwindSafe for TwoLevelBatch&lt;PK, SK, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, D&gt; UnwindSafe for OrderedTwoLevelBatch&lt;PK, SK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; UnwindSafe for OneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; UnwindSafe for OrderedOneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for RenderingBundle&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for RenderPlan&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetMetadata","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !UnwindSafe for TargetPlanContext&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TargetImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageOptions","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for OutputColor&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for TargetPlanOutputs&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for RenderableAction&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderOrder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Camera","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActiveCamera","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CameraPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActiveCameraPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebugLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebugLinesParams","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebugLinesComponent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebugLines","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjFormat","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; !UnwindSafe for MeshPrefab&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MaterialPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TexturePrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextureGenerator","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; !UnwindSafe for GraphicsPrefab&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Light","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DirectionalLight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointLight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpotLight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SunLight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LightPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextureOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaterialDefaults","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TexAlbedo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TexEmission","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TexNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TexMetallicRoughness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TexAmbientOcclusion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TexCavity","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for PipelineDescBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for PipelinesBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderToWindow","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for RenderBase3D&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderFlat2D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderDebugLines","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderSkybox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AmbientColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tint","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for ShapePrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ShapeUpload&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalShape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JointWeights","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JointIds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JointCombined","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JointTransforms","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JointTransformsPrefab","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SpriteSheetPrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteSheetLoadedSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteSheetReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteRenderPrefab","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SpriteScenePrefab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteSheet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sprite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextureCoordinates","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteRender","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpritePosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteGrid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sprites","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteSheetFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteVisibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteVisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for EnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for FlatEnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaterialId","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; UnwindSafe for MaterialSub&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SkinningSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextureId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for TextureSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; UnwindSafe for DynamicUniform&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; UnwindSafe for IndexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; UnwindSafe for VertexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, V, T&gt; UnwindSafe for DynamicVertexData&lt;B, V, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CameraGatherer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AmbientGatherer","synthetic":true,"types":[]},{"text":"impl&lt;B, G&gt; !UnwindSafe for RenderingSystem&lt;B, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for MeshProcessorSystem&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for TextureProcessorSystem&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transparent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackendVariant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mesh","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MeshData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextureData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundingSphere","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frustum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextureOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ViewArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VertexArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JointsOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SkinnedVertexArgs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointLight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DirectionalLight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpotLight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteArgs","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for LookupBuilder&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; !UnwindSafe for TapCountIterator&lt;'a, T, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeDetection","synthetic":true,"types":[]}];
implementors["amethyst_ui"] = [{"text":"impl UnwindSafe for BlinkSystem","synthetic":true,"types":[]},{"text":"impl&lt;T, C, W, G&gt; UnwindSafe for UiBundle&lt;T, C, W, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonActionType","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I&nbsp;=&nbsp;u32&gt; !UnwindSafe for UiButtonBuilderResources&lt;'a, G, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, I&gt; UnwindSafe for UiButtonBuilder&lt;G, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonActionRetrigger","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiButtonSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButtonSystemDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Draggable","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DragWidgetSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiEventType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interactable","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for UiMouseSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EventRetriggerSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EventRetriggerSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FontAsset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TtfFormat","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for UiGlyphsSystem&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for UiGlyphsSystemDesc&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiLabel","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&nbsp;=&nbsp;u32&gt; !UnwindSafe for UiLabelBuilderResources&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for UiLabelBuilder&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScaleMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stretch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiTransformSystemDesc","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiTransformSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderUi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawUiDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DrawUi&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for UiTransformData&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiTextData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEditingPrefab","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiImagePrefab","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiImageLoadPrefab","synthetic":true,"types":[]},{"text":"impl&lt;W&nbsp;=&nbsp;u32&gt; !UnwindSafe for UiButtonData&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;NoCustomUi, W&nbsp;=&nbsp;u32, G&nbsp;=&nbsp;()&gt; !UnwindSafe for UiWidget&lt;C, W, G&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoCustomUi","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for UiFormat&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&nbsp;=&nbsp;NoCustomUi, W&nbsp;=&nbsp;u32&gt; !UnwindSafe for UiLoader&lt;'a, C, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&nbsp;=&nbsp;NoCustomUi, W&nbsp;=&nbsp;u32&gt; !UnwindSafe for UiCreator&lt;'a, C, W&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiResize","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResizeSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for Selectable&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Selected","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; !UnwindSafe for SelectionKeyboardSystem&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for SelectionKeyboardSystemDesc&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; UnwindSafe for SelectionMouseSystemDesc&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; !UnwindSafe for SelectionMouseSystem&lt;G, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CachedSelectionOrder","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for CacheSelectionOrderSystem&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiPlaySoundAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiSoundRetrigger","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UiSoundSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiSoundSystemDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiText","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiMultipartText","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEditing","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TextEditingMouseSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEditingMouseSystemDesc","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TextEditingInputSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextEditingInputSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UiFinder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UiTransform","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; UnwindSafe for Widgets&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_utils"] = [{"text":"impl UnwindSafe for AutoFov","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AutoFovSystem","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for CircularBuffer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FpsCounter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FpsCounterSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FpsCounterBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CameraOrthoWorldCoordinates","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CameraOrtho","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CameraNormalizeMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CameraOrthoSystem","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Removal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&nbsp;=&nbsp;()&gt; !UnwindSafe for BasicScenePrefab&lt;V, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Tag&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for TagFinder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DestroyAtTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DestroyInTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DestroyAtTimeSystem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DestroyInTimeSystem","synthetic":true,"types":[]}];
implementors["amethyst_window"] = [{"text":"impl UnwindSafe for WindowBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisplayConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MonitorIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScreenDimensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowSystem","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EventsLoopSystem","synthetic":true,"types":[]}];
implementors["andrew"] = [{"text":"impl UnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sides","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rectangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FontConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endian","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Canvas&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; UnwindSafe for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; UnwindSafe for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; UnwindSafe for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; UnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; UnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; UnwindSafe for Atom&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AtomSetOnce&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrintFmt","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !UnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BacktraceSymbol","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesMut","synthetic":true,"types":[]}];
implementors["cassowary"] = [{"text":"impl !UnwindSafe for Solver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Term","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelationalOperator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedRelation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartialConstraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddConstraintError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoveConstraintError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEditVariableError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoveEditVariableError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SuggestValueError","synthetic":true,"types":[]}];
implementors["cgmath"] = [{"text":"impl&lt;S&gt; UnwindSafe for Matrix2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Matrix3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Matrix4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Quaternion&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Vector1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Vector2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Vector3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Vector4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Rad&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Deg&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Euler&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Point1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Point2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Point3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Basis2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Basis3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; UnwindSafe for Decomposed&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as VectorSpace&gt;::Scalar: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PerspectiveFov&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Perspective&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Ortho&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["claxon"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StereoSamples&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for FrameReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BufferedReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Bitstream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SeekPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SeekTable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VorbisComment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetadataBlock","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Tags&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for GetTag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for MetadataBlockReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for FlacReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlacReaderOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for FlacSamples&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["clipboard"] = [{"text":"impl UnwindSafe for Primary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Clipboard","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;Clipboard&gt; !UnwindSafe for X11ClipboardContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopClipboardContext","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl UnwindSafe for NeuQuant","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShouldColorize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHOULD_COLORIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Styles","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColoredString","synthetic":true,"types":[]}];
implementors["colorful"] = [{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colorado","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HSL","synthetic":true,"types":[]}];
implementors["cpal"] = [{"text":"impl UnwindSafe for HostUnavailable","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BackendSpecificError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DevicesError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceNameError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SupportedFormatsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultFormatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuildStreamError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlayStreamError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PauseStreamError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Devices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EventLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Devices","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EventLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SupportedInputFormats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SupportedOutputFormats","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleRate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SupportedFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for StreamData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for InputBuffer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for OutputBuffer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for UnknownTypeInputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UnknownTypeOutputBuffer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crc"] = [{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Digest","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; UnwindSafe for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; UnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; UnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !UnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; UnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !UnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !UnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; UnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dlib"] = [{"text":"impl UnwindSafe for DlError","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; UnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl UnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WriteStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimestampPrecision","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Builder","synthetic":true,"types":[]}];
implementors["erased_serde"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T&gt; UnwindSafe for Angle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Box2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Box3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for HomogeneousVector&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Unit&gt; UnwindSafe for Length&lt;T, Unit&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Unit: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NonEmpty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Point2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Point3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Rect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for RigidTransform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for Rotation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for Rotation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for Scale&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for SideOffsets2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Size2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Size3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for Transform2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for Transform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for Translation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; UnwindSafe for Translation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Vector2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Vector3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolVector2D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoolVector3D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnknownUnit","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl UnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fern"] = [{"text":"impl !UnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Panic","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for InitError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for FormatCallback&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WithFgColor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColoredLevelConfig","synthetic":true,"types":[]}];
implementors["fluent_bundle"] = [{"text":"impl&lt;'m&gt; UnwindSafe for FluentMessage&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FluentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolverError","synthetic":true,"types":[]},{"text":"impl&lt;'bundle, R, M&gt; !UnwindSafe for Scope&lt;'bundle, R, M&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FluentResource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FluentNumberStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FluentNumberCurrencyDisplayStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FluentNumberOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FluentNumber","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; UnwindSafe for DisplayableNodeType&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; UnwindSafe for DisplayableNode&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; !UnwindSafe for FluentValue&lt;'source&gt;","synthetic":true,"types":[]}];
implementors["fluent_langneg"] = [{"text":"impl UnwindSafe for NegotiationStrategy","synthetic":true,"types":[]}];
implementors["fluent_syntax"] = [{"text":"impl&lt;'ast&gt; UnwindSafe for Resource&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for ResourceEntry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Entry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Message&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Term&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Pattern&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for PatternElement&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Attribute&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Identifier&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Variant&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for VariantKey&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Comment&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for InlineExpression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for CallArguments&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for NamedArgument&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; UnwindSafe for Expression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["fmod_sys"] = [{"text":"impl UnwindSafe for FMOD_SYSTEM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SOUND","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CHANNELCONTROL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CHANNEL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CHANNELGROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SOUNDGROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_REVERB3D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSPCONNECTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_POLYGON","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_GEOMETRY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SYNCPOINT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_RESULT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CHANNELCONTROL_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_OUTPUTTYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DEBUG_MODE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SPEAKER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CHANNELORDER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_PLUGINTYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SOUND_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SOUND_FORMAT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_OPENSTATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_SOUNDGROUP_BEHAVIOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CHANNELCONTROL_CALLBACK_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CHANNELCONTROL_DSP_INDEX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_ERRORCALLBACK_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_RESAMPLER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSPCONNECTION_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_TAGTYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_TAGDATATYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_ASYNCREADINFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_VECTOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_3D_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_GUID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_PLUGINLIST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_TAG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CREATESOUNDEXINFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_REVERB_PROPERTIES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_ERRORCALLBACK_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CODEC_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CODEC_WAVEFORMAT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_CODEC_STATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_OSCILLATOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_LOWPASS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_ITLOWPASS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_HIGHPASS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_ECHO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_FADER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_FLANGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_DISTORTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_NORMALIZE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_LIMITER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMEQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_MULTIBAND_EQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PITCHSHIFT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_CHORUS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_ITECHO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_COMPRESSOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_SFXREVERB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_LOWPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_DELAY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_TREMOLO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_SEND","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_RETURN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_HIGHPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PAN_2D_STEREO_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PAN_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PAN_3D_ROLLOFF_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PAN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_THREE_EQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_FFT_WINDOW","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_FFT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_ENVELOPEFOLLOWER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_CONVOLUTION_REVERB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_CHANNELMIX_OUTPUT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_CHANNELMIX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_TRANSCEIVER_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_TRANSCEIVER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_OBJECTPAN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PROCESS_OPERATION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PAN_SURROUND_FLAGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_DATA_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_BUFFER_ARRAY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_COMPLEX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_FLOAT_MAPPING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_DESC_FLOAT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_DESC_INT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_DESC_BOOL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_DESC_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_DESC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_DESC__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_OVERALLGAIN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_3DATTRIBUTES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_SIDECHAIN","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_PARAMETER_FFT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_STATE_DFT_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_STATE_PAN_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_STATE_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_STATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_DSP_METERING_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_OUTPUT_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_OUTPUT_STATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_OUTPUT_OBJECT3DINFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_SYSTEM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_EVENTDESCRIPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_EVENTINSTANCE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_BUS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_VCA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_BANK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_COMMANDREPLAY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_LOADING_STATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_LOAD_MEMORY_MODE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_USER_PROPERTY_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_EVENT_PROPERTY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_PLAYBACK_STATE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_STOP_MODE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_BANK_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_PARAMETER_ID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_PARAMETER_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_USER_PROPERTY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_CPU_USAGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_BUFFER_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_BUFFER_USAGE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_SOUND_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_COMMAND_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FMOD_STUDIO_MEMORY_USAGE","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["font_kit"] = [{"text":"impl UnwindSafe for Canvas","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RasterizationOptions","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FontLoadingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphLoadingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectionError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Family&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FamilyHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FamilyName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HintingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FontTransform","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; UnwindSafe for FallbackResult&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; UnwindSafe for FallbackFont&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Font","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weight","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stretch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FontconfigSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemSource","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MultiSource","synthetic":true,"types":[]}];
implementors["fontconfig"] = [{"text":"impl UnwindSafe for struct__FcMatrix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for struct__FcObjectType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for struct__FcConstant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for struct__FcValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for struct__FcFontSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for struct__FcObjectSet","synthetic":true,"types":[]}];
implementors["freetype"] = [{"text":"impl&lt;T&gt; UnwindSafe for __BindgenUnionField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_MemoryRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_StreamRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_StreamDesc_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Vector_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_BBox_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Pixel_Mode_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Bitmap_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Outline_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Outline_Funcs_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Glyph_Format_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_RasterRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Span_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Raster_Params_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Raster_Funcs_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_UnitVector_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Matrix_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Data_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Generic_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_ListNodeRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_ListRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Glyph_Metrics_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Bitmap_Size_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_LibraryRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_ModuleRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_DriverRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_RendererRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_FaceRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_SizeRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_GlyphSlotRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_CharMapRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Encoding_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Face_InternalRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Size_InternalRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Size_Metrics_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_SubGlyphRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Slot_InternalRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Parameter_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Open_Args_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Size_Request_Type_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Size_RequestRec_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Render_Mode_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Kerning_Mode_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_LcdFilter_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Sfnt_Tag_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Module_Class_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_TrueTypeEngineType_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_Orientation_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TT_OS2","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl UnwindSafe for FxHasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FxHasher64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FxHasher32","synthetic":true,"types":[]}];
implementors["genmesh"] = [{"text":"impl&lt;'a, T, V&gt; UnwindSafe for SharedVertexIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, V&gt; UnwindSafe for IndexedPolygonIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; UnwindSafe for LruIndexer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Neighbors&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Quad&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Triangle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Polygon&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; UnwindSafe for VerticesIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Line&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; UnwindSafe for TriangulateIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Circle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cone","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cube","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cylinder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IcoSphere","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Plane","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SphereUv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Torus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vertex","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["gfx_backend_empty"] = [{"text":"impl UnwindSafe for Backend","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhysicalDevice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawCommandQueue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawCommandPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawCommandBuffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Surface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Swapchain","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Instance","synthetic":true,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl UnwindSafe for MemoryTypeId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AdapterInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Adapter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PhysicalDevice: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ViewCreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Usage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Access","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for IndexBufferView&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearDepthStencil","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttachmentClear","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageResolve","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageBlit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearColorRaw","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearDepthStencilRaw","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearValueRaw","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandBufferFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for CommandBufferInheritanceInfo&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Framebuffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubpassContents","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; UnwindSafe for RenderSubpassCommon&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !UnwindSafe for RenderPassInlineEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !UnwindSafe for RenderPassSecondaryEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, S, R&gt; UnwindSafe for SubpassCommandBuffer&lt;B, S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferCopy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageCopy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferImageCopy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OneShot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiShot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Primary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Secondary","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; UnwindSafe for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceLost","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SurfaceLost","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowInUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfMemory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OomOrDeviceLost","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitFor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShaderError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceCreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HostExecutionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aspects","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormatDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormatBits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Component","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Swizzle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFeature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferFeature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChannelType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SurfaceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BaseFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg4Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba4Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra4Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R5g6b5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for B5g6r5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R5g5b5a1Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for B5g5r5a1Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A1r5g5b5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R8Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R8Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R8Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R8Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg8Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg8Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg8Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg8Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb8Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb8Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb8Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb8Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr8Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr8Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr8Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr8Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba8Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba8Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba8Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba8Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra8Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra8Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra8Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra8Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr8Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr8Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr8Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr8Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2r10g10b10Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2r10g10b10Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2r10g10b10Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2r10g10b10Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2r10g10b10Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2r10g10b10Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2b10g10r10Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2b10g10r10Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2b10g10r10Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2b10g10r10Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2b10g10r10Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A2b10g10r10Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R16Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R16Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R16Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R16Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R16Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R16Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R16Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg16Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg16Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg16Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg16Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg16Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg16Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg16Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb16Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb16Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb16Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb16Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb16Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb16Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb16Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba16Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba16Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba16Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba16Sscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba16Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba16Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba16Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R32Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R32Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R32Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg32Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg32Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg32Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb32Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb32Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb32Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba32Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba32Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba32Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R64Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R64Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R64Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg64Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg64Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg64Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb64Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb64Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb64Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba64Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba64Sint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba64Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for B10g11r11Ufloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for E5b9g9r9Ufloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D16Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X8D24Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D32Sfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for S8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D16UnormS8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D24UnormS8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D32SfloatS8Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc1RgbUnorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc1RgbSrgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc1RgbaUnorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc1RgbaSrgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc2Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc2Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc3Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc3Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc4Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc4Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc5Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc6hUfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc6hSfloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc7Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bc7Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Etc2R8g8b8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Etc2R8g8b8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Etc2R8g8b8a1Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Etc2R8g8b8a1Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Etc2R8g8b8a8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Etc2R8g8b8a8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EacR11Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EacR11Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EacR11g11Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EacR11g11Snorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc4x4Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc4x4Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc5x4Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc5x4Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc5x5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc5x5Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc6x5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc6x5Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc6x6Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc6x6Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc8x5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc8x5Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc8x6Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc8x6Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc8x8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc8x8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x5Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x5Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x6Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x6Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x8Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x8Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x10Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc10x10Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc12x10Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc12x10Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc12x12Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Astc12x12Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Offset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tiling","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ViewError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LayerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anisotropic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CubeFace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ViewKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ViewCapabilities","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Usage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WrapMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PackedColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SamplerInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Access","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Subresource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubresourceLayers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubresourceRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormatProperties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubresourceFootprint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; UnwindSafe for Reader&lt;'a, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; !UnwindSafe for Writer&lt;'a, B, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dependencies","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Barrier&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Requirements","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttachmentLoadOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttachmentStoreOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttachmentOps","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attachment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubpassRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubpassDependency","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SubpassDesc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Subpass&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; UnwindSafe for CommandPool&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for ComputePipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ComputePipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorSetLayoutBinding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorRangeDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, WI&gt; UnwindSafe for DescriptorSetWrite&lt;'a, B, WI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;WI: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Descriptor&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::BufferView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for DescriptorSetCopy&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClearRect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Viewport","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for GraphicsShaderSet&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BakedStates","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for GraphicsPipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PolygonMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrontFace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepthBias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rasterizer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlendDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Multisampling","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VertexInputRate","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Element&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VertexBufferDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttributeDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimitiveRestart","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputAssemblerDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comparison","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Factor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlendOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlendState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorBlendDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepthTest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StencilOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StencilFace","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sided&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StencilTest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DepthStencilDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Face","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PipelineStage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShaderStageFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stage","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for EntryPoint&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PipelineCreationFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for BasePipeline&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecializationConstant","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Specialization&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for State&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for Query&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueryPool: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResultFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PipelineStatistic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for General","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Graphics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GraphicsOrCompute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueFamilyId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; UnwindSafe for QueueGroup&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Queues&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueType","synthetic":true,"types":[]},{"text":"impl&lt;Ic, Iw, Is&gt; UnwindSafe for Submission&lt;Ic, Iw, Is&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ic: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Is: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Iw: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; UnwindSafe for CommandQueue&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extent2D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SurfaceCapabilities","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PresentMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompositeAlpha","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SwapchainConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Suboptimal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PresentError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Features","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubmissionError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Gpu&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl UnwindSafe for DisposalMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryLimit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtensionData","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["glsl_layout"] = [{"text":"impl UnwindSafe for boolean","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bvec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bvec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bvec4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ivec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ivec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ivec4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for uvec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for uvec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for uvec4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for vec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for vec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for vec4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dvec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dvec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dvec4","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Element&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AsStd140&gt;::Align: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat2x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat2x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat2x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat3x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat3x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat3x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat4x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat4x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bmat4x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat2x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat2x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat2x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat3x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat3x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat3x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat4x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat4x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for imat4x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat2x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat2x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat2x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat3x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat3x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat3x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat4x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat4x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for umat4x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat2x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat2x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat2x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat3x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat3x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat3x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat4x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat4x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mat4x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat2x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat2x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat2x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat3x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat3x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat3x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat4x2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat4x3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dmat4x4","synthetic":true,"types":[]}];
implementors["gltf"] = [{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SparseIndicesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for SparseIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ItemIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Sparse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Accessor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Channels&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for I16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; UnwindSafe for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Rotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MorphTargetWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ReadOutputs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Animation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Channel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Target&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Glb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChunkType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for View&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Projection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Camera&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Orthographic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Perspective&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Image&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ExtensionsUsed&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ExtensionsRequired&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Accessors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Animations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Buffers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Views&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cameras&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Images&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Materials&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Meshes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Scenes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Skins&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Textures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Light&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Material&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PbrMetallicRoughness&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NormalTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for OcclusionTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MorphTargets&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Primitives&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbU8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbU16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbF32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbaU8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbaU16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbaF32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ReadColors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ReadIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ReadJoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ReadTexCoords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ReadWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; UnwindSafe for ReadMorphTargets&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bounds&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Mesh&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MorphTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Primitive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; UnwindSafe for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Children&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Scene&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Joints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; UnwindSafe for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Skin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Info&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Texture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gltf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Document","synthetic":true,"types":[]}];
implementors["gltf_json"] = [{"text":"impl UnwindSafe for Indices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sparse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Values","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ComponentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Accessor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexComponentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericComponentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interpolation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Property","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Animation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for View","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Camera","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Orthographic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Perspective","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Indices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sparse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Values","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Accessor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Animation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for View","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Camera","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Orthographic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Perspective","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NormalTexture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mesh","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Root","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Light","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scene","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Skin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Void","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MimeType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlphaMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NormalTexture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlphaCutoff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmissiveFactor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PbrBaseColorFactor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrengthFactor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mesh","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MorphTarget","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semantic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Index&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Root","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scene","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitQuaternion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Skin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MagFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WrappingMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Checked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["glyph_brush"] = [{"text":"impl&lt;'a, H&gt; UnwindSafe for GlyphBrushBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, V, H&gt; UnwindSafe for GlyphBrush&lt;'font, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphVertex","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for BrushAction&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BrushError","synthetic":true,"types":[]},{"text":"impl&lt;'font, H&gt; UnwindSafe for GlyphCalculator&lt;'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'brush, 'font, H&gt; UnwindSafe for GlyphCalculatorGuard&lt;'brush, 'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; UnwindSafe for GlyphCalculatorBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedVariedSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedSectionText","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariedSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Section&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["glyph_brush_layout"] = [{"text":"impl&lt;L&gt; UnwindSafe for Layout&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HorizontalAlign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerticalAlign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FontId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BuiltInLineBreaker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SectionGeometry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SectionText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphChange","synthetic":true,"types":[]}];
implementors["hibitset"] = [{"text":"impl UnwindSafe for AtomicBitSet","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for DrainBitIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for BitProducer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitSetAll","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitSet","synthetic":true,"types":[]}];
implementors["hound"] = [{"text":"impl&lt;R&gt; UnwindSafe for WavReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'wr, R, S&gt; !UnwindSafe for WavSamples&lt;'wr, R, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, S&gt; UnwindSafe for WavIntoSamples&lt;R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WavWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'parent, W&gt; !UnwindSafe for SampleWriter16&lt;'parent, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WavSpec","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormattedDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rfc3339Timestamp","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl !UnwindSafe for ImageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParameterError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for EnumeratePixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for EnumerateRowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for PixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for RowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NeuQuant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BiLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; UnwindSafe for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; UnwindSafe for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; UnwindSafe for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelDensity","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for JpegEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; UnwindSafe for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DynamicImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; UnwindSafe for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["inflate"] = [{"text":"impl&lt;W&gt; UnwindSafe for InflateWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoderBuf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InflateStream","synthetic":true,"types":[]}];
implementors["intl_memoizer"] = [{"text":"impl UnwindSafe for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntlMemoizer","synthetic":true,"types":[]}];
implementors["intl_pluralrules"] = [{"text":"impl UnwindSafe for PluralOperands","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PluralCategory","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PluralRuleType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PluralRules","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; UnwindSafe for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; UnwindSafe for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for TakeWhileRef&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; UnwindSafe for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; UnwindSafe for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !UnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; UnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !UnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; !UnwindSafe for ProcessResults&lt;'a, I, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; UnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; UnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; UnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl UnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedFeature","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["laminar"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkConditioner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeliveryGuarantee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrderingGuarantee","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Packet","synthetic":true,"types":[]}];
implementors["lewton"] = [{"text":"impl UnwindSafe for HeaderReadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdentHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommentHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetupHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AudioReadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreviousWindowRight","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OggStreamReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for InterleavedSamples&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for VorbisError","synthetic":true,"types":[]}];
implementors["lexical"] = [{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Result&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundingKind","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl UnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Symbol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;'lib, T&gt; UnwindSafe for Symbol&lt;'lib, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["line_drawing"] = [{"text":"impl&lt;T, I&gt; UnwindSafe for Steps&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Octant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bresenham&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; UnwindSafe for Midpoint&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; UnwindSafe for XiaolinWu&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for WalkGrid&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Supercover&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bresenham3d&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VoxelOrigin","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; UnwindSafe for WalkVoxels&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BresenhamCircle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; UnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entries&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; UnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !UnwindSafe for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseLevelError","synthetic":true,"types":[]}];
implementors["lyon_geom"] = [{"text":"impl&lt;S&gt; UnwindSafe for BezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for QuadraticBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Flattened&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for CubicBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SvgArc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Arc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArcFlags","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Triangle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for LineSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Line&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for LineEquation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Monotonic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lyon_path"] = [{"text":"impl UnwindSafe for SvgEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuadraticEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlattenedEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; UnwindSafe for PathSlice&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cursor","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; UnwindSafe for Iter&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;SvgIter&gt; UnwindSafe for PathEvents&lt;SvgIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SvgIter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for Flattened&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for SvgPathIter&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Transformed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for FromPolyline&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for BezierSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for LineSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; UnwindSafe for SvgPathBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; UnwindSafe for FlatteningBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FillRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VertexId","synthetic":true,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DecoderEarlyChange&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LsbReader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for LsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for MsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl UnwindSafe for MmapOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mmap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MmapMut","synthetic":true,"types":[]}];
implementors["minimp3"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]}];
implementors["minimp3_sys"] = [{"text":"impl UnwindSafe for __fsid_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mp3dec_frame_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for mp3dec_t","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl UnwindSafe for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InflateState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TINFLStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZFlush","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamResult","synthetic":true,"types":[]}];
implementors["minterpolate"] = [{"text":"impl&lt;T&gt; UnwindSafe for InterpolationFunction&lt;T&gt;","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl UnwindSafe for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dynamic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U17","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U18","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U19","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U20","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U21","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U22","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U23","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U24","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U25","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U26","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U27","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U28","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U29","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U30","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U31","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U33","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U34","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U35","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U36","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U37","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U38","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U39","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U40","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U41","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U42","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U43","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U44","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U45","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U46","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U47","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U48","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U49","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U50","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U51","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U52","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U53","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U54","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U55","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U56","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U57","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U58","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U59","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U60","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U61","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U62","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U63","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U65","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U66","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U67","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U68","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U69","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U70","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U71","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U72","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U73","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U74","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U75","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U76","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U77","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U78","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U79","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U80","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U81","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U82","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U83","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U84","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U85","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U86","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U87","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U88","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U89","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U90","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U91","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U92","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U93","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U94","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U95","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U96","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U97","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U98","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U99","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U100","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U101","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U102","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U103","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U104","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U105","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U106","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U107","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U108","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U109","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U110","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U111","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U112","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U113","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U114","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U115","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U116","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U117","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U118","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U119","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U120","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U121","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U122","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U123","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U124","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U125","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U126","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; UnwindSafe for MatrixIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !UnwindSafe for MatrixIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; UnwindSafe for RowIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !UnwindSafe for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; UnwindSafe for ColumnIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !UnwindSafe for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C, S&gt; UnwindSafe for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; UnwindSafe for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;R as DimName&gt;::Value as Mul&lt;&lt;C as DimName&gt;::Value&gt;&gt;::Output as ArrayLength&lt;N&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; UnwindSafe for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; !UnwindSafe for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; UnwindSafe for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LpNorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !UnwindSafe for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !UnwindSafe for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TGeneral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TProjective","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !UnwindSafe for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; UnwindSafe for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl UnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !UnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CmsgSpace&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysconfVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;I&gt; UnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; UnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl UnwindSafe for Sign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; UnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; UnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]}];
implementors["ogg"] = [{"text":"impl !UnwindSafe for OggReadError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OggPage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PageParser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasePacketReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PacketReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PacketWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PacketWriteEndInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Packet","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; UnwindSafe for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["palette"] = [{"text":"impl UnwindSafe for Equations","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Equation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parameter","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; UnwindSafe for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for Gradient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; UnwindSafe for Take&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; UnwindSafe for Slice&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; UnwindSafe for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ConeResponseMatrices&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Srgb","synthetic":true,"types":[]},{"text":"impl&lt;S, N&gt; UnwindSafe for Gamma&lt;S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for GammaFn&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F2p2","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Linear&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinearFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A","synthetic":true,"types":[]},{"text":"impl UnwindSafe for B","synthetic":true,"types":[]},{"text":"impl UnwindSafe for C","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D50","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D55","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D65","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D75","synthetic":true,"types":[]},{"text":"impl UnwindSafe for E","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D50Degree10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D55Degree10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D65Degree10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D75Degree10","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Color&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as RgbSpace&gt;::WhitePoint: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for OrderedMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl UnwindSafe for Decoded","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitDepth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelDimensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnimationControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transformations","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpanRange","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; UnwindSafe for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quickcheck"] = [{"text":"impl&lt;R&gt; UnwindSafe for StdGen&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdThreadGen","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; UnwindSafe for QuickCheck&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TestResult","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl UnwindSafe for UnitSphere","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitBall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitDisc","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Gamma&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for ChiSquared&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for FisherF&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherFError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for StudentT&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Beta&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BetaError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Normal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for LogNormal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Exp&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Pareto&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Pert&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PertError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Poisson&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Cauchy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Dirichlet&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Triangular&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TriangularError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Weibull&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl UnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; UnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; UnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; UnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; UnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; UnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; UnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; !UnwindSafe for SplitMut&lt;'data, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !UnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !UnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]}];
implementors["relevant"] = [{"text":"impl UnwindSafe for Relevant","synthetic":true,"types":[]}];
implementors["rendy_chain"] = [{"text":"impl&lt;R&gt; UnwindSafe for Link&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for LinkNode&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Chain&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsynchronized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Chains","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for State&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Family&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Queue&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubmissionId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Submission&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Schedule&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Signal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Barrier&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Guard","synthetic":true,"types":[]},{"text":"impl&lt;S, W&gt; UnwindSafe for SyncData&lt;S, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]}];
implementors["rendy_command"] = [{"text":"impl UnwindSafe for DrawCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawIndexedCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispatchCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; !UnwindSafe for EncoderCommon&lt;'a, B, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !UnwindSafe for RenderPassEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !UnwindSafe for RenderPassInlineEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !UnwindSafe for RenderPassSecondaryEncoder&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C, L&gt; !UnwindSafe for Encoder&lt;'a, B, C, L&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrimaryLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondaryLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndividualReset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoIndividualReset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitialState","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; UnwindSafe for RecordingState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; UnwindSafe for ExecutableState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for PendingState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidState","synthetic":true,"types":[]},{"text":"impl&lt;B, S, L, P&gt; UnwindSafe for Submit&lt;B, S, L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OneShot","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for MultiShot&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimultaneousUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoSimultaneousUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderPassContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutsideRenderPass","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; UnwindSafe for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Execute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Graphics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for General","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Queue&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, W, C, S&gt; UnwindSafe for Submission&lt;B, W, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FamilyId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; UnwindSafe for Family&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Families&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FenceEpoch","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Fence&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C, R&gt; UnwindSafe for CommandPool&lt;B, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_descriptor"] = [{"text":"impl&lt;B&gt; UnwindSafe for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DescriptorAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorPool: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorRanges","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for DescriptorRangesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_factory"] = [{"text":"impl&lt;B&gt; UnwindSafe for Barriers&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Blitter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlitRegion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlitImageState","synthetic":true,"types":[]},{"text":"impl&lt;D, H, Q&gt; UnwindSafe for Config&lt;D, H, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OneGraphicsQueue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SavedQueueConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicHeapsConfigure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SavedHeapsConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicDevicesConfigure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for Factory&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageStateOrLayout","synthetic":true,"types":[]}];
implementors["rendy_frame"] = [{"text":"impl&lt;'a, T, I&nbsp;=&nbsp;T, P&nbsp;=&nbsp;T&gt; !UnwindSafe for CirqueRef&lt;'a, T, I, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&nbsp;=&nbsp;T, P&nbsp;=&nbsp;T&gt; !UnwindSafe for InitialRef&lt;'a, T, I, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&nbsp;=&nbsp;T, P&nbsp;=&nbsp;T&gt; !UnwindSafe for ReadyRef&lt;'a, T, I, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; UnwindSafe for Cirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; UnwindSafe for DependentCirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompleteFrame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FramesRange","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Frames&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_graph"] = [{"text":"impl&lt;B, T&gt; !UnwindSafe for Graph&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for GraphContext&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !UnwindSafe for GraphBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for PresentNode&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Semaphore: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for PresentBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; UnwindSafe for SimpleRenderGroup&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SimpleRenderGroupDesc&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !UnwindSafe for SubpassBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !UnwindSafe for RenderPassNodeBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrepareResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferAccess","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferBarrier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeBuffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageAccess","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageBarrier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeImage","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized, N&gt; UnwindSafe for DescBuilder&lt;B, T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NodeId","synthetic":true,"types":[]}];
implementors["rendy_memory"] = [{"text":"impl&lt;B&gt; UnwindSafe for DedicatedBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DedicatedAllocator","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DynamicBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DynamicConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DynamicAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for LinearBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinearConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for LinearAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeapsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeapsConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Heaps&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for MemoryBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NonCoherent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Coherent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaybeCoherent","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; UnwindSafe for MappedRange&lt;'a, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Memory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dynamic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Upload","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Download","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryUsageValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryUtilization","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryHeapUtilization","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemoryTypeUtilization","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TotalMemoryUtilization","synthetic":true,"types":[]}];
implementors["rendy_mesh"] = [{"text":"impl UnwindSafe for VertexBufferLayout","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for IndexBuffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MeshBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Mesh&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Incompatible","synthetic":true,"types":[]}];
implementors["rendy_resource"] = [{"text":"impl UnwindSafe for BufferInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Buffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Escape&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Terminal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Handle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Image&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageViewInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ImageView&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DescriptorSetInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DescriptorSetLayout&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ResourceTracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for SamplerCache&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Sampler&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_shader"] = [{"text":"impl UnwindSafe for SpirvShader","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ShaderSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecConstantSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShaderSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for ShaderStorage&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_texture"] = [{"text":"impl UnwindSafe for Repr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextureKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageTextureConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Int","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Iscaled","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Srgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for R","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgba","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bgra","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abgr","synthetic":true,"types":[]},{"text":"impl&lt;C, S, T&gt; UnwindSafe for Pixel&lt;C, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as PixelRepr&lt;S, T&gt;&gt;::Repr: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Texture&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MipLevels","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TextureBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_util"] = [{"text":"impl UnwindSafe for AttrUuid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tangent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TexCoord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VertexFormat","synthetic":true,"types":[]},{"text":"impl&lt;N, I&gt; UnwindSafe for AttrGenIter&lt;N, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosNorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosColorNorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosTex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosNormTex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosNormTangTex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Model","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLayout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InstanceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !UnwindSafe for Instance&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Device&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_wsi"] = [{"text":"impl&lt;B&gt; UnwindSafe for Surface&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for Target&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; UnwindSafe for NextImages&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rental"] = [{"text":"impl UnwindSafe for SimpleRef","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; UnwindSafe for SimpleRef_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; !UnwindSafe for SimpleRef_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SimpleMut","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; UnwindSafe for SimpleMut_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; !UnwindSafe for SimpleMut_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleRefDebug","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; UnwindSafe for SimpleRefDebug_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; !UnwindSafe for SimpleRefDebug_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleRefClone","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; UnwindSafe for SimpleRefClone_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; !UnwindSafe for SimpleRefClone_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleRefDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; UnwindSafe for SimpleRefDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; !UnwindSafe for SimpleRefDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SimpleMutDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; UnwindSafe for SimpleMutDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; !UnwindSafe for SimpleMutDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleRefCovariant","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; UnwindSafe for SimpleRefCovariant_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; !UnwindSafe for SimpleRefCovariant_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SimpleRefMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; UnwindSafe for SimpleRefMap_Borrow&lt;'head, 'iref, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; !UnwindSafe for SimpleRefMap_BorrowMut&lt;'head, 'iref, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for RentRef&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; UnwindSafe for RentRef_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentRef_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !UnwindSafe for RentMut&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; UnwindSafe for RentMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !UnwindSafe for RentRefCell&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentRefCell_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentRefCell_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !UnwindSafe for RentRefCellMut&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentRefCellMut_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentRefCellMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for RentMutex&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; UnwindSafe for RentMutex_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentMutex_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for RentRwLock&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; UnwindSafe for RentRwLock_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentRwLock_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for RentRwLockMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; UnwindSafe for RentRwLockMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !UnwindSafe for RentRwLockMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E, H&gt; UnwindSafe for RentalError&lt;E, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rodio"] = [{"text":"impl UnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpatialSink","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecoderError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for DynamicMixerController&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for DynamicMixer&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SourcesQueueInput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for SourcesQueueOutput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Amplify&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for BltFilter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Buffered&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ChannelVolume&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Delay&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Done&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Empty&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FadeIn&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FromFactoryIter&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FromIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; UnwindSafe for Mix&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I1 as Iterator&gt;::Item: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I2 as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Pausable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for PeriodicAccess&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Repeat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; UnwindSafe for SamplesConverter&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SineWave","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Spatial&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Speed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Stoppable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TakeDuration&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; UnwindSafe for UniformSourceIterator&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Zero&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for StaticSamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ron"] = [{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'de&gt; UnwindSafe for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PrettyConfig","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for Compound&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Map","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extensions","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl UnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_version"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionMeta","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N&gt; UnwindSafe for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Curve","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; UnwindSafe for Cache&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheReadErr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheWriteErr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CachedBy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for FontCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SharedBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Codepoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Glyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SharedGlyphData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ScaledGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PositionedGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IntoFontsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, I&gt; UnwindSafe for GlyphIter&lt;'a, 'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for LayoutIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Segment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Contour","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl UnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl !UnwindSafe for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; !UnwindSafe for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SemVerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WildcardVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Op","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Predicate","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl UnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ByteBuf","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]}];
implementors["shred"] = [{"text":"impl UnwindSafe for InvalidBorrow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Ref&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RefMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrustCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for AsyncDispatcher&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchAccessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for BatchUncheckedWorld&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DefaultBatchControllerSystem&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DispatcherBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Dispatcher&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for Par&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; UnwindSafe for ParSeq&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for Seq&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MetaIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MetaIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for MetaTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;?Sized&gt; UnwindSafe for AccessorCow&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as System&lt;'a&gt;&gt;::SystemData as DynamicSystemData&lt;'a&gt;&gt;::Accessor: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RunningTime","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StaticAccessor&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&nbsp;=&nbsp;DefaultProvider&gt; !UnwindSafe for Read&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&nbsp;=&nbsp;DefaultProvider&gt; !UnwindSafe for Write&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Fetch&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for FetchMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResourceId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for World","synthetic":true,"types":[]}];
implementors["shrev"] = [{"text":"impl&lt;T&gt; !UnwindSafe for ReaderId&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for StorageIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for EventChannel&lt;E&gt;","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; UnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slice_deque"] = [{"text":"impl&lt;T&gt; UnwindSafe for Buffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SliceDeque&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; UnwindSafe for Splice&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; !UnwindSafe for DrainFilter&lt;'a, T, F&gt;","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl UnwindSafe for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl !UnwindSafe for DataDevice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DndEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DataOffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadPipe","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DataSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataSourceEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WritePipe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyRepeatKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RMLVO","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyRepeatEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputMgr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThemeManager","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThemedPointer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AutoThemer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AutoPointer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DoubleMemPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MemPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BasicFrame","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConceptFrame","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !UnwindSafe for Window&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for FrameRequest","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Environment","synthetic":true,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; UnwindSafe for ChangeSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxedErr","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WrongGeneration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoError","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; UnwindSafe for JoinParIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; UnwindSafe for MaybeJoin&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; UnwindSafe for JoinIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Mask: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Value: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ComponentEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DefaultVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DenseVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&nbsp;=&nbsp;DenseVecStorage&lt;C&gt;&gt; !UnwindSafe for FlaggedStorage&lt;C, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HashMapStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NullStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entity","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LazyUpdate","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for Entries&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for OccupiedEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for VacantEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for StorageEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SequentialRestriction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImmutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl&lt;'rf, 'st, C, S, B, Restrict&gt; !UnwindSafe for RestrictedStorage&lt;'rf, 'st, C, S, B, Restrict&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BTreeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for AntiStorage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MaskedStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Component&gt;::Storage: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'e, T, D&gt; !UnwindSafe for Storage&lt;'e, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CreateIterAtomic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntitiesRes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EntityResBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LazyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CreateIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for EntityBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["specs_hierarchy"] = [{"text":"impl UnwindSafe for HierarchyEvent","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !UnwindSafe for Hierarchy&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for SubHierarchyIterator&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for ParentData&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for HierarchySystem&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data&gt; UnwindSafe for FontInfo&lt;Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vertex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VertexType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VMetrics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeEid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MicrosoftEid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacEid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MicrosoftLang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacLang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlatformEncodingLanguageId","synthetic":true,"types":[]},{"text":"impl&lt;'a, Data&gt; UnwindSafe for FontNameIter&lt;'a, Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Apostrophe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CapSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Catch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Self_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprInPlace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIfLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhileLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntSuffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatSuffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArgName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PathTokens&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl UnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl UnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferWriter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseColorError","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tiff"] = [{"text":"impl UnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gray16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMYK8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rational","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for DirectoryEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; !UnwindSafe for ImageEncoder&lt;'a, W, C&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TiffError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TiffFormatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tinystr"] = [{"text":"impl UnwindSafe for TinyStr16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TinyStr4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TinyStr8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TinyStrAuto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl UnwindSafe for XxHash64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XxHash32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RandomXxHashBuilder32","synthetic":true,"types":[]}];
implementors["tynm"] = [{"text":"impl&lt;'s&gt; UnwindSafe for TypeNameDisplay&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for TypeName&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["type_map"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TypeMap","synthetic":true,"types":[]}];
implementors["unic_langid_impl"] = [{"text":"impl UnwindSafe for LanguageIdentifierError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterDirection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LanguageIdentifier","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl UnwindSafe for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl UnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wavefront_obj"] = [{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MtlSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Illumination","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ObjSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Geometry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vertex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TVertex","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl UnwindSafe for ConnectError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Display","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EventQueue","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for QueueToken","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GlobalManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlobalEvent","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !UnwindSafe for Proxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for NewProxy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CursorTheme","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CursorImageBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlEglSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProxyMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlDisplay","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlRegistry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlCallback","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlCompositor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlShmPool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlShm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlBuffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlDataOffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlDataSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlDataDevice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DndAction","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlShell","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Resize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlShellSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlSeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AxisSource","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlPointer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeymapFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlKeyboard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlTouch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Subpixel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlOutput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlRegion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WlSubsurface","synthetic":true,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl&lt;Meta&gt; UnwindSafe for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; UnwindSafe for ObjectMap&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BufferedSocket","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UserData","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UserDataMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgumentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Argument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageWriteError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnonymousObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoMessage","synthetic":true,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl UnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PresentMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreeditStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextDirection","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChangeCause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgShell","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CancelReason","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Layer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WpPresentation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgWmBase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgPositioner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgToplevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WpViewporter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WpViewport","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl UnwindSafe for wl_message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_interface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_list","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_array","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_argument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_proxy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_display","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_event_queue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaylandClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAYLAND_CLIENT_OPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAYLAND_CLIENT_HANDLE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_egl_window","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaylandEgl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAYLAND_EGL_OPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAYLAND_EGL_HANDLE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_cursor_theme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_cursor_image","synthetic":true,"types":[]},{"text":"impl UnwindSafe for wl_cursor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaylandCursor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAYLAND_CURSOR_OPTION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WAYLAND_CURSOR_HANDLE","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl UnwindSafe for LogicalPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogicalSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PhysicalSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyboardInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TouchPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Touch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElementState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BadIcon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Icon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XNotSupported","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowType","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MonitorId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaylandTheme","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EventsLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlow","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WindowBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseCursor","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WindowAttributes","synthetic":true,"types":[]}];
implementors["x11_clipboard"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Atoms","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Clipboard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]}];
implementors["x11_dl"] = [{"text":"impl UnwindSafe for OpenError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xlib","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XDisplay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XGC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XIC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XIM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XRegion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XOC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XOM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XrmHashBucketRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcmsCCC","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XcmsColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcmsColorSpace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcmsFunctionSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbBounds","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbChanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbClientMapRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbComponentList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbComponentNames","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbControls","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbControlsChanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbControlsNotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbDeviceChanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbDeviceInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbDeviceLedInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbDoodad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbExtensionDeviceNotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbGeometry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbGeometrySizes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbIndicatorMapRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbKeyType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbMapChanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbMods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbNameChanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbNamesNotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbOutline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbOverlay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbOverlayKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbOverlayRow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbProperty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbRow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbSection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbServerMapRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbShape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbSymInterpretRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XAnyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XButtonEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XCirculateEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XCirculateRequestEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XClientMessageEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XColormapEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XConfigureEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XConfigureRequestEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XCreateWindowEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XCrossingEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XDestroyWindowEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XErrorEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XExposeEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XFocusChangeEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XGraphicsExposeEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XGravityEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XKeyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XKeymapEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XMapEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XMappingEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XMapRequestEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XMotionEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XNoExposeEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XPropertyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XReparentEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XResizeRequestEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XSelectionClearEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XSelectionEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XSelectionRequestEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XUnmapEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XVisibilityEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbCompatMapRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbIndicatorRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbKeyAliasRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbKeyNameRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbNamesRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbStateRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbAnyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbNewKeyboardNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbStateNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbControlsNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbIndicatorNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbNamesNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbCompatMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbBellNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbActionMessageEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbAccessXNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XkbExtensionDeviceNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XkbKbdDpyStateRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Depth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Screen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScreenFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XArc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XChar2b","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XCharStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XClassHint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XComposeStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XExtCodes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XExtData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XFontProp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XFontSetExtents","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XFontStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XGCValues","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XGenericEventCookie","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XHostAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIconSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XKeyboardControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XKeyboardState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XmbTextItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XModifierKeymap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XOMCharSetList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XPixmapFormatValues","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRectangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XrmOptionDescRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XrmValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XSetWindowAttributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XSizeHints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XStandardColormap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XTextItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XTextItem16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XTextProperty","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XTimeCoord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XVisualInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XwcTextItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XWindowAttributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XWindowChanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XWMHints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIMCallback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIMCaretDirection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIMCaretStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIMPreeditDrawCallbackStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIMPreeditCaretCallbackStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIMTextString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIMText","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XICCallback","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AspectRatio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientMessageData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFns","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Glx","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __GLXcontextRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __GLXFBConfigRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xcursor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorAnimate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorChunkHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorComment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorCursors","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorFile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorFileHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorFileToc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XcursorImages","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XF86VidModeGamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XF86VidModeModeInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XF86VidModeModeLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XF86VidModeMonitor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XF86VidModeSyncRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XF86VidModeNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FT_FaceRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FcCharSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FcPattern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FcEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FcResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xft","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftFontInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftFont","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftDraw","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftCharSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftCharFontSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftFontSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftGlyphSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftGlyphFontSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XftPattern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xlib","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XineramaScreenInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XPanoramiXInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XAnyClassinfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XDevice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XDeviceControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XDeviceInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XDeviceState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XDeviceTimeCoord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XExtensionVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XFeedbackControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XFeedbackState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XInputClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XInputClassInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XInput2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIAddMasterInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIRemoveMasterInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIAttachSlaveInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIDetachSlaveInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIAnyHierarchyChangeInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIModifierState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIButtonState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIValuatorState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIEventMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIAnyClassInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIButtonClassInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIKeyClassInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIValuatorClassInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIScrollClassInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XITouchClassInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIDeviceInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIGrabModifiers","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIBarrierReleasePointerInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIHierarchyInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIHierarchyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIDeviceChangedEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIDeviceEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIRawEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIEnterEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIPropertyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XITouchOwnershipEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XIBarrierEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xmu","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _AtomRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XmuArea","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XmuDisplayQueue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XmuDisplayQueueEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XmuScanline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XmuSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XmuWidgetNode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRecordClientInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRecordExtRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRecordInterceptData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRecordRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRecordRange8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRecordRange16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRecordState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xrender","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XAnimCursor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XConicalGradient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XFilters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XGlyphElt8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XGlyphElt16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XGlyphElt32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XGlyphInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XIndexValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XLinearGradient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XLineFixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XPointDouble","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XPointFixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XRadialGradient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRenderColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRenderDirectFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRenderPictFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XRenderPictureAttributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XSpanFix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XTrap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XTrapezoid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XTriangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XTransform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xss","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XScreenSaverInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XScreenSaverNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubstitutionRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _TranslationData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _WidgetClassRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _WidgetRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XtActionsRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XtAppStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XtCallbackRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XtCheckpointTokenRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XtConvertArgRec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _XtResource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XtWidgetGeometry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xlib_xcb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xrandr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRScreenSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRScreenConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRModeInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRScreenResources","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRROutputInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRPropertyInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRCrtcInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRCrtcGamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRCrtcTransformAttributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRPanning","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRProviderResources","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRProviderInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRMonitorInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRScreenChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRROutputChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRCrtcChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRROutputPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRProviderChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRProviderPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XRRResourceChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Xrandr_2_2_0","synthetic":true,"types":[]}];
implementors["xcb"] = [{"text":"impl&lt;'a, T&gt; UnwindSafe for StructPtr&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Event&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Cookie&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Reply&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Connection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for QueryExtensionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValueError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixmapError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtomError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CursorError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FontError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawableError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AllocError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColormapError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GContextError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IdChoiceError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NameError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LengthError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplementationError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Char2b","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Point","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rectangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visualtype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timecoord","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fontprop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Charinfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Segment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Coloritem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rgb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PictFormatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PictureError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PictOpError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphSetError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlyphError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Directformat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pictforminfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pictvisual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Indexvalue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pointfix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Linefix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trapezoid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Glyphinfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Animcursorelt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spanfix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BadRegionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_connection_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_extension_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_special_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_generic_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_generic_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_generic_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_ge_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_generic_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_void_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_auth_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_char2b_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_char2b_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_window_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_pixmap_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_cursor_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_font_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_gcontext_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_colormap_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_atom_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_drawable_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_fontable_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_visualid_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_timestamp_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_keysym_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_keycode_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_button_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_point_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_point_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_rectangle_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_rectangle_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_arc_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_arc_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_format_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_format_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_visualtype_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_visualtype_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_depth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_depth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_screen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_screen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_setup_request_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_setup_request_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_setup_failed_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_setup_failed_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_setup_authenticate_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_setup_authenticate_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_setup_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_setup_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_key_press_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_button_press_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_motion_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_enter_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_focus_in_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_keymap_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_expose_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_graphics_exposure_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_no_exposure_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_visibility_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_create_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_destroy_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_unmap_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_map_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_map_request_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_reparent_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_configure_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_configure_request_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_gravity_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_resize_request_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_circulate_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_property_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_selection_clear_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_selection_request_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_colormap_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_client_message_data_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_client_message_data_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_client_message_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_mapping_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_ge_generic_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_request_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_value_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_create_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_window_attributes_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_window_attributes_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_destroy_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_destroy_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_reparent_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_map_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_map_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_unmap_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_unmap_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_configure_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_circulate_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_geometry_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_geometry_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_geometry_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_tree_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_tree_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_tree_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_intern_atom_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_intern_atom_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_intern_atom_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_atom_name_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_atom_name_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_atom_name_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_property_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_delete_property_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_property_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_property_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_property_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_properties_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_properties_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_properties_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_selection_owner_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_selection_owner_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_convert_selection_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_send_event_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_ungrab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_button_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_ungrab_button_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_active_pointer_grab_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_keyboard_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_keyboard_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_ungrab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_key_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_ungrab_key_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_allow_events_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_grab_server_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_ungrab_server_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_pointer_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_timecoord_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_timecoord_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_motion_events_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_motion_events_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_motion_events_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_translate_coordinates_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_translate_coordinates_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_translate_coordinates_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_warp_pointer_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_input_focus_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_input_focus_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_keymap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_keymap_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_keymap_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_open_font_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_close_font_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_fontprop_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_fontprop_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_charinfo_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_charinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_font_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_font_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_font_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_text_extents_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_text_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_text_extents_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_str_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_str_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_fonts_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_fonts_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_fonts_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_fonts_with_info_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_fonts_with_info_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_fonts_with_info_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_font_path_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_font_path_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_font_path_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_font_path_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_create_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_free_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_create_gc_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_gc_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_copy_gc_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_dashes_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_free_gc_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_clear_area_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_copy_area_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_copy_plane_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_point_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_line_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_segment_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_segment_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_segment_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_arc_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_fill_poly_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_fill_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_fill_arc_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_put_image_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_image_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_image_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_image_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_text_8_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_poly_text_16_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_image_text_8_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_image_text_16_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_create_colormap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_free_colormap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_copy_colormap_and_free_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_install_colormap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_uninstall_colormap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_installed_colormaps_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_installed_colormaps_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_installed_colormaps_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_named_color_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_named_color_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_named_color_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_cells_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_cells_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_cells_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_planes_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_planes_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_alloc_color_planes_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_free_colors_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_coloritem_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_coloritem_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_store_colors_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_store_named_color_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_rgb_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_rgb_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_colors_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_colors_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_colors_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_lookup_color_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_lookup_color_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_lookup_color_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_create_glyph_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_free_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_recolor_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_best_size_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_best_size_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_best_size_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_extension_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_extension_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_query_extension_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_extensions_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_extensions_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_extensions_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_keyboard_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_keyboard_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_keyboard_control_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_keyboard_control_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_bell_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_pointer_control_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_pointer_control_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_screen_saver_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_screen_saver_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_change_hosts_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_host_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_host_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_hosts_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_hosts_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_list_hosts_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_access_control_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_close_down_mode_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_kill_client_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_rotate_properties_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_force_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_set_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_get_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_no_operation_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_big_requests_enable_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_big_requests_enable_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_big_requests_enable_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_version_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_version_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_version_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_xid_range_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_xid_range_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_xid_range_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_xid_list_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_xid_list_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xc_misc_get_xid_list_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_glyph_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_glyphset_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_picture_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pictformat_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_fixed_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pict_format_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_picture_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pict_op_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_glyph_set_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_glyph_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_directformat_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_directformat_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pictforminfo_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pictforminfo_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pictvisual_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pictvisual_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pictdepth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_render_pictdepth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pictscreen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for xcb_render_pictscreen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_indexvalue_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_indexvalue_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_color_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_color_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pointfix_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_pointfix_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_linefix_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_linefix_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_triangle_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_triangle_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_trapezoid_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_trapezoid_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_glyphinfo_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_glyphinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_version_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_pict_formats_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_pict_formats_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_pict_formats_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_pict_index_values_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_pict_index_values_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_pict_index_values_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_picture_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_change_picture_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_set_picture_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_free_picture_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_composite_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_trapezoids_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_triangles_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_tri_strip_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_tri_fan_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_reference_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_free_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_add_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_free_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_composite_glyphs_8_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_composite_glyphs_16_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_composite_glyphs_32_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_fill_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_transform_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_transform_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_set_picture_transform_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_filters_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_filters_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_query_filters_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_set_picture_filter_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_animcursorelt_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_animcursorelt_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_anim_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_spanfix_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_spanfix_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_trap_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_trap_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_add_traps_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_solid_fill_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_linear_gradient_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_radial_gradient_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_render_create_conical_gradient_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_op_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_kind_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_query_version_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_mask_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_combine_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_offset_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_query_extents_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_query_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_query_extents_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_select_input_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_input_selected_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_input_selected_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_input_selected_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_get_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_get_rectangles_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_shape_get_rectangles_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_query_version_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_select_selection_input_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_cursor_notify_event_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_select_cursor_input_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_image_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_image_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_image_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_region_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_bad_region_error_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_create_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_create_region_from_bitmap_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_create_region_from_window_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_create_region_from_gc_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_create_region_from_picture_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_destroy_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_set_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_copy_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_union_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_intersect_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_subtract_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_invert_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_translate_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_region_extents_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_fetch_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_fetch_region_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_fetch_region_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_set_gc_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_set_window_shape_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_set_picture_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_set_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_name_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_name_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_image_and_name_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_image_and_name_cookie_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_get_cursor_image_and_name_reply_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_change_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_change_cursor_by_name_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_expand_region_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_hide_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_show_cursor_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_barrier_iterator_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_create_pointer_barrier_request_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for xcb_xfixes_delete_pointer_barrier_request_t","synthetic":true,"types":[]}];
implementors["xdg"] = [{"text":"impl UnwindSafe for BaseDirectories","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BaseDirectoriesError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileFindIterator","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()