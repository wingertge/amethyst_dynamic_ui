(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl RefUnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]}];
implementors["alga"] = [{"text":"impl&lt;O&gt; RefUnwindSafe for Id&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Additive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Multiplicative","synthetic":true,"types":[]}];
implementors["alsa_sys"] = [{"text":"impl RefUnwindSafe for snd_dlsym_link","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_async_handler_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_shm_area","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_input_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_output_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_config_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct__snd_config_iterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_config_update_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_devname_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_hw_params_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_sw_params_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_status_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_access_mask_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_format_mask_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_subformat_mask_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_channel_area_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_sync_id_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_scope_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_chmap_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_chmap_query_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_hook_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_pcm_scope_ops_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_rawmidi_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_rawmidi_params_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_rawmidi_status_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_rawmidi_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_id_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_ginfo_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_gparams_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_gstatus_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_params_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_status_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_read_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_tread_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_query_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_timer_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_hwdep_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_hwdep_dsp_status_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_hwdep_dsp_image_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_hwdep_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_aes_iec958_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_ctl_card_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_ctl_elem_id_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_ctl_elem_list_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_ctl_elem_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_ctl_elem_value_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_ctl_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_ctl_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_sctl_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_hctl_elem_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_hctl_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_mixer_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_mixer_class_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_mixer_elem_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_mixer_selem_regopt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_mixer_selem_id_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_addr_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_connect_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_real_time_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_timestamp_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_ev_note_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_ev_ctrl_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_ev_raw8_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_ev_raw32_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_ev_ext_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_result_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_queue_skew_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_ev_queue_control_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union_Unnamed9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union_Unnamed10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_system_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_client_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_client_pool_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_port_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_port_subscribe_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_query_subscribe_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_queue_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_queue_status_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_queue_tempo_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_queue_timer_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_seq_remove_events_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for snd_midi_event_t","synthetic":true,"types":[]},{"text":"impl&lt;Storage, Align&gt; RefUnwindSafe for __BindgenBitfieldUnit&lt;Storage, Align&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Align: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Storage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _snd_pcm_audio_tstamp_config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _snd_pcm_audio_tstamp_report","synthetic":true,"types":[]}];
implementors["amethyst"] = [{"text":"impl&lt;'a, T, E&nbsp;=&nbsp;StateEvent&lt;StringBindings&gt;, R&nbsp;=&nbsp;StateEventReader&lt;StringBindings&gt;&gt; !RefUnwindSafe for CoreApplication&lt;'a, T, E, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T, E, R&gt; !RefUnwindSafe for ApplicationBuilder&lt;S, T, E, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CallbackQueue","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for GameData&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for GameDataBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdoutLog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LoggerConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for StateData&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; !RefUnwindSafe for Trans&lt;T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, E&gt; !RefUnwindSafe for StateMachine&lt;'a, T, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StateEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;StringBindings&gt; !RefUnwindSafe for StateEventReader&lt;T&gt;","synthetic":true,"types":[]}];
implementors["amethyst_animation"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for VertexSkinningBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for SamplingBundle&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, T&gt; RefUnwindSafe for AnimationBundle&lt;'a, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaterialPrimitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaterialChannel","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AnimationPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for AnimationSetPrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AnimationHierarchyPrefab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for AnimatablePrefab&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sampler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RestState&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AnimationHierarchy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Animation&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EndControl","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SamplerControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SamplerControlSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepDirection","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AnimationCommand&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AnimationControl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeferStartRelation","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for AnimationControlSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for AnimationSet&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Joint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Skin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JointPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SkinPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SkinnablePrefab","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VertexSkinningSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteRenderPrimitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteRenderChannel","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for AnimationControlSystem&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SamplerInterpolationSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Channel: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AnimationSampling&gt;::Primitive: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransformChannel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiTransformChannel","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SamplerPrimitive&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_assets"] = [{"text":"impl&lt;D&gt; !RefUnwindSafe for FormatValue&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Cache&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RonFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !RefUnwindSafe for AssetLoaderSystemData&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Loader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PrefabLoaderSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for PrefabLoaderSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Prefab&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, F&gt; RefUnwindSafe for AssetPrefab&lt;A, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for PrefabLoader&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Completion","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProgressCounter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HotReloadBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HotReloadStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HotReloadSystem","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for SingleFile&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Directory","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !RefUnwindSafe for AssetStorage&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ProcessingState&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Asset&gt;::Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Processor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized&gt; RefUnwindSafe for Handle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for WeakHandle&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_audio"] = [{"text":"impl RefUnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioBundle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AudioEmitter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WavFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OggFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlacFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mp3Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioSink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioSystemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; RefUnwindSafe for DjSystemDesc&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, R&gt; RefUnwindSafe for DjSystem&lt;F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecoderError","synthetic":true,"types":[]}];
implementors["amethyst_config"] = [{"text":"impl !RefUnwindSafe for ConfigError","synthetic":true,"types":[]}];
implementors["amethyst_controls"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for FlyControlBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ArcBallControlBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlyControlTag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArcBallControlTag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlTagPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowFocus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HideCursor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FlyMovementSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FlyMovementSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArcBallRotationSystem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FreeRotationSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FreeRotationSystemDesc","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MouseFocusUpdateSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseFocusUpdateSystemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CursorHideSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CursorHideSystemDesc","synthetic":true,"types":[]}];
implementors["amethyst_core"] = [{"text":"impl RefUnwindSafe for AddBarrier","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for AddSystem&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; RefUnwindSafe for AddSystemDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for AddThreadLocal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, S&gt; RefUnwindSafe for AddThreadLocalDesc&lt;SD, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for AddBundle&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameRateLimitStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameRateLimitConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameLimiter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Plane&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stopwatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TransformBundle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransformSystemDesc","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TransformSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hidden","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HiddenPropagate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HideHierarchySystemDesc","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HideHierarchySystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Named","synthetic":true,"types":[]},{"text":"impl&lt;S, V&gt; RefUnwindSafe for Pausable&lt;S, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_dynamic_ui"] = [{"text":"impl !RefUnwindSafe for Fonts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Textures","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for DynamicUiBundle&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WidgetConstraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PaddableConstraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WidgetConstraintBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PaddableConstraintBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CenteredLayout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearLayoutData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemAlignment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearLayout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LayoutVars","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VarType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExactFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for VariableEditable&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EditVariable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LAYOUT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtraButtonData","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiCachedImage","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiCachedText","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FontFamilyPrefab","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for HtmlTextData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CalculatedDimensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LayoutIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tinted","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for DynamicUiFormat&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicLayout","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DynamicLayoutData","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&nbsp;=&nbsp;NoCustomElements&gt; !RefUnwindSafe for DynamicUiLoader&lt;'a, C&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiTextPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonTintAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonTintActionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonTintRetrigger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LimnSolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LayoutManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SoundEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiFmodRetrigger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiFmodSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiFmodSystemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Styles","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HtmlText","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiButtonTintSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonTintSystemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeConstraints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ModalData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoCustomElements","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiExtraTextData","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ImageButtonData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I18nData","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;NoCustomElements&gt; !RefUnwindSafe for LayoutElement&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rect","synthetic":true,"types":[]}];
implementors["amethyst_error"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Causes&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["amethyst_fmod"] = [{"text":"impl RefUnwindSafe for FmodBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventInstance","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StopMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioSystem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SoundBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for System","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attributes3D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CoreSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DriverInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bank","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]}];
implementors["amethyst_input"] = [{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringBindings","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bindings&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BindingError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InputBundle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for BindingsFileError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Button","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControllerAxis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControllerButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControllerEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InputEvent&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InputHandler&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseAxis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScrollDirection","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InputSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Action: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BindingTypes&gt;::Axis: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for InputSystem&lt;T&gt;","synthetic":true,"types":[]}];
implementors["amethyst_locale"] = [{"text":"impl RefUnwindSafe for LocaleFormat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Locale","synthetic":true,"types":[]}];
implementors["amethyst_network"] = [{"text":"impl !RefUnwindSafe for NetworkSimulationEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeliveryRequirement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UrgencyRequirement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkSimulationTimeSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetworkSimulationTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LaminarNetworkBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LaminarSocketResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNetworkBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpStreamManagementSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpConnectionListenerSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNetworkResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpNetworkBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpNetworkSendSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpNetworkRecvSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpSocketResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransportResource","synthetic":true,"types":[]}];
implementors["amethyst_rendy"] = [{"text":"impl&lt;B, T&gt; RefUnwindSafe for DrawBase3DDesc&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; RefUnwindSafe for DrawBase3D&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Base3DPassDef&gt;::TextureSet: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; RefUnwindSafe for DrawBase3DTransparentDesc&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; RefUnwindSafe for DrawBase3DTransparent&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrawDebugLinesDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DrawDebugLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlatPassDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrawFlat2DDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DrawFlat2D&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrawFlat2DTransparentDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DrawFlat2DTransparent&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PbrPassDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShadedPassDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrawSkyboxDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DrawSkybox&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, C&gt; RefUnwindSafe for TwoLevelBatch&lt;PK, SK, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, SK, D&gt; RefUnwindSafe for OrderedTwoLevelBatch&lt;PK, SK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SK: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; RefUnwindSafe for OneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;PK, D&gt; RefUnwindSafe for OrderedOneLevelBatch&lt;PK, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;PK: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for RenderingBundle&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for RenderPlan&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetMetadata","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; !RefUnwindSafe for TargetPlanContext&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TargetImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageOptions","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for OutputColor&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for TargetPlanOutputs&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for RenderableAction&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderOrder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Camera","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ActiveCamera","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CameraPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ActiveCameraPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugLinesParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugLinesComponent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DebugLines","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjFormat","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; !RefUnwindSafe for MeshPrefab&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MaterialPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TexturePrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureGenerator","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; !RefUnwindSafe for GraphicsPrefab&lt;V&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Light","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirectionalLight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointLight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpotLight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SunLight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LightPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaterialDefaults","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TexAlbedo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TexEmission","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TexNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TexMetallicRoughness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TexAmbientOcclusion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TexCavity","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for PipelineDescBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for PipelinesBuilder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderToWindow","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; RefUnwindSafe for RenderBase3D&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderFlat2D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderDebugLines","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderSkybox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AmbientColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tint","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for ShapePrefab&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ShapeUpload&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalShape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JointWeights","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JointIds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JointCombined","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JointTransforms","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JointTransformsPrefab","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SpriteSheetPrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteSheetLoadedSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteSheetReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteRenderPrefab","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SpriteScenePrefab","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteSheet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sprite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureCoordinates","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteRender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpritePosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteGrid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sprites","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteSheetFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteVisibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteVisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for EnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for FlatEnvironmentSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaterialId","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; RefUnwindSafe for MaterialSub&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SkinningSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for TextureSub&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; RefUnwindSafe for DynamicUniform&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; RefUnwindSafe for IndexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; RefUnwindSafe for VertexData&lt;B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, V, T&gt; RefUnwindSafe for DynamicVertexData&lt;B, V, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CameraGatherer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AmbientGatherer","synthetic":true,"types":[]},{"text":"impl&lt;B, G&gt; !RefUnwindSafe for RenderingSystem&lt;B, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for MeshProcessorSystem&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for TextureProcessorSystem&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transparent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackendVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mesh","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MeshData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisibilitySortingSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundingSphere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frustum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ViewArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JointsOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SkinnedVertexArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PointLight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirectionalLight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpotLight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpriteArgs","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for LookupBuilder&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I&gt; RefUnwindSafe for TapCountIterator&lt;'a, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeDetection","synthetic":true,"types":[]}];
implementors["amethyst_ui"] = [{"text":"impl RefUnwindSafe for BlinkSystem","synthetic":true,"types":[]},{"text":"impl&lt;T, C, W, G&gt; RefUnwindSafe for UiBundle&lt;T, C, W, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonActionType","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I&nbsp;=&nbsp;u32&gt; !RefUnwindSafe for UiButtonBuilderResources&lt;'a, G, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G, I&gt; RefUnwindSafe for UiButtonBuilder&lt;G, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonActionRetrigger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiButtonSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButtonSystemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Draggable","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DragWidgetSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiEventType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interactable","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for UiMouseSystem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EventRetriggerSystemDesc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for EventRetriggerSystem&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontAsset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TtfFormat","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for UiGlyphsSystem&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for UiGlyphsSystemDesc&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiLabel","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&nbsp;=&nbsp;u32&gt; !RefUnwindSafe for UiLabelBuilderResources&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for UiLabelBuilder&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScaleMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stretch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiTransformSystemDesc","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiTransformSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderUi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrawUiDesc","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DrawUi&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for UiTransformData&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiTextData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextEditingPrefab","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiImagePrefab","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiImageLoadPrefab","synthetic":true,"types":[]},{"text":"impl&lt;W&nbsp;=&nbsp;u32&gt; !RefUnwindSafe for UiButtonData&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&nbsp;=&nbsp;NoCustomUi, W&nbsp;=&nbsp;u32, G&nbsp;=&nbsp;()&gt; !RefUnwindSafe for UiWidget&lt;C, W, G&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoCustomUi","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for UiFormat&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&nbsp;=&nbsp;NoCustomUi, W&nbsp;=&nbsp;u32&gt; !RefUnwindSafe for UiLoader&lt;'a, C, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&nbsp;=&nbsp;NoCustomUi, W&nbsp;=&nbsp;u32&gt; !RefUnwindSafe for UiCreator&lt;'a, C, W&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiResize","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResizeSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for Selectable&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Selected","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; !RefUnwindSafe for SelectionKeyboardSystem&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for SelectionKeyboardSystemDesc&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; RefUnwindSafe for SelectionMouseSystemDesc&lt;G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, T&gt; !RefUnwindSafe for SelectionMouseSystem&lt;G, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CachedSelectionOrder","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for CacheSelectionOrderSystem&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiPlaySoundAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiSoundRetrigger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UiSoundSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiSoundSystemDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiText","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiMultipartText","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextEditing","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TextEditingMouseSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextEditingMouseSystemDesc","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TextEditingInputSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextEditingInputSystemDesc","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for UiFinder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UiTransform","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; RefUnwindSafe for Widgets&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["amethyst_utils"] = [{"text":"impl RefUnwindSafe for AutoFov","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AutoFovSystem","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for CircularBuffer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FpsCounter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FpsCounterSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FpsCounterBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CameraOrthoWorldCoordinates","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CameraOrtho","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CameraNormalizeMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CameraOrthoSystem","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Removal&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&nbsp;=&nbsp;()&gt; !RefUnwindSafe for BasicScenePrefab&lt;V, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Tag&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for TagFinder&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DestroyAtTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DestroyInTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DestroyAtTimeSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DestroyInTimeSystem","synthetic":true,"types":[]}];
implementors["amethyst_window"] = [{"text":"impl RefUnwindSafe for WindowBundle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisplayConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MonitorIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScreenDimensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowSystem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventsLoopSystem","synthetic":true,"types":[]}];
implementors["andrew"] = [{"text":"impl RefUnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sides","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rectangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endian","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Canvas&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; RefUnwindSafe for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; RefUnwindSafe for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; RefUnwindSafe for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; RefUnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; RefUnwindSafe for Atom&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for AtomSetOnce&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["backtrace"] = [{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SymbolName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BytesOrWideString&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for BacktraceFmt&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrintFmt","synthetic":true,"types":[]},{"text":"impl&lt;'fmt, 'a, 'b&gt; !RefUnwindSafe for BacktraceFrameFmt&lt;'fmt, 'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BacktraceSymbol","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesMut","synthetic":true,"types":[]}];
implementors["cassowary"] = [{"text":"impl !RefUnwindSafe for Solver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Term","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RelationalOperator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedRelation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PartialConstraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddConstraintError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveConstraintError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEditVariableError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveEditVariableError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SuggestValueError","synthetic":true,"types":[]}];
implementors["cgmath"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for Matrix2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Matrix3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Matrix4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Quaternion&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Vector1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Vector2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Vector3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Vector4&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Rad&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Deg&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Euler&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Point1&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Point2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Point3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Basis2&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Basis3&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, R&gt; RefUnwindSafe for Decomposed&lt;V, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as VectorSpace&gt;::Scalar: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for PerspectiveFov&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Perspective&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Ortho&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["claxon"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StereoSamples&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FrameReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufferedReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Bitstream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SeekTable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VorbisComment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetadataBlock","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Tags&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for GetTag&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for MetadataBlockReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FlacReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlacReaderOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for FlacSamples&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["clipboard"] = [{"text":"impl RefUnwindSafe for Primary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Clipboard","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;Clipboard&gt; !RefUnwindSafe for X11ClipboardContext&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NopClipboardContext","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl RefUnwindSafe for NeuQuant","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShouldColorize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SHOULD_COLORIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Styles","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColoredString","synthetic":true,"types":[]}];
implementors["colorful"] = [{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colorado","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Symbol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HSL","synthetic":true,"types":[]}];
implementors["cpal"] = [{"text":"impl RefUnwindSafe for HostUnavailable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BackendSpecificError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DevicesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceNameError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SupportedFormatsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultFormatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuildStreamError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlayStreamError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PauseStreamError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Devices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Devices","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SupportedInputFormats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SupportedOutputFormats","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleRate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SupportedFormat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StreamData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for InputBuffer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for OutputBuffer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnknownTypeInputBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UnknownTypeOutputBuffer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crc"] = [{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; RefUnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; RefUnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SegQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !RefUnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !RefUnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; RefUnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dlib"] = [{"text":"impl RefUnwindSafe for DlError","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; RefUnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl !RefUnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampPrecision","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]}];
implementors["erased_serde"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["euclid"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Angle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Box2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Box3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for HomogeneousVector&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Unit&gt; RefUnwindSafe for Length&lt;T, Unit&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Unit: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NonEmpty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Point2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Point3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Rect&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for RigidTransform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for Rotation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for Rotation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for Scale&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for SideOffsets2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Size2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Size3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for Transform2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for Transform3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for Translation2D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Src, Dst&gt; RefUnwindSafe for Translation3D&lt;T, Src, Dst&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dst: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Src: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Vector2D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Vector3D&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolVector2D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoolVector3D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownUnit","synthetic":true,"types":[]}];
implementors["failure"] = [{"text":"impl !RefUnwindSafe for Backtrace","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Compat&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for Context&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SyncFailure&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !RefUnwindSafe for Causes&lt;'f&gt;","synthetic":true,"types":[]}];
implementors["fern"] = [{"text":"impl !RefUnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Panic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InitError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for FormatCallback&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WithFgColor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColoredLevelConfig","synthetic":true,"types":[]}];
implementors["fluent_bundle"] = [{"text":"impl&lt;'m&gt; RefUnwindSafe for FluentMessage&lt;'m&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FluentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolverError","synthetic":true,"types":[]},{"text":"impl&lt;'bundle, R, M&gt; !RefUnwindSafe for Scope&lt;'bundle, R, M&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FluentResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FluentNumberStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FluentNumberCurrencyDisplayStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FluentNumberOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FluentNumber","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; RefUnwindSafe for DisplayableNodeType&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; RefUnwindSafe for DisplayableNode&lt;'source&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'source&gt; !RefUnwindSafe for FluentValue&lt;'source&gt;","synthetic":true,"types":[]}];
implementors["fluent_langneg"] = [{"text":"impl RefUnwindSafe for NegotiationStrategy","synthetic":true,"types":[]}];
implementors["fluent_syntax"] = [{"text":"impl&lt;'ast&gt; RefUnwindSafe for Resource&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for ResourceEntry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Entry&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Message&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Term&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Pattern&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for PatternElement&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Attribute&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Identifier&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Variant&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for VariantKey&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Comment&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for InlineExpression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for CallArguments&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for NamedArgument&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ast&gt; RefUnwindSafe for Expression&lt;'ast&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]}];
implementors["fmod_sys"] = [{"text":"impl RefUnwindSafe for FMOD_SYSTEM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SOUND","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CHANNELCONTROL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CHANNEL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CHANNELGROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SOUNDGROUP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_REVERB3D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSPCONNECTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_POLYGON","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_GEOMETRY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SYNCPOINT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_RESULT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CHANNELCONTROL_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_OUTPUTTYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DEBUG_MODE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SPEAKER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CHANNELORDER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_PLUGINTYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SOUND_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SOUND_FORMAT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_OPENSTATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_SOUNDGROUP_BEHAVIOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CHANNELCONTROL_CALLBACK_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CHANNELCONTROL_DSP_INDEX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_ERRORCALLBACK_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_RESAMPLER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSPCONNECTION_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_TAGTYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_TAGDATATYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_ASYNCREADINFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_VECTOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_3D_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_GUID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_PLUGINLIST","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_TAG","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CREATESOUNDEXINFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_REVERB_PROPERTIES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_ERRORCALLBACK_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CODEC_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CODEC_WAVEFORMAT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_CODEC_STATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_OSCILLATOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_LOWPASS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_ITLOWPASS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_HIGHPASS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_ECHO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_FADER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_FLANGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_DISTORTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_NORMALIZE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_LIMITER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMEQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_MULTIBAND_EQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PITCHSHIFT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_CHORUS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_ITECHO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_COMPRESSOR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_SFXREVERB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_LOWPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_DELAY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_TREMOLO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_SEND","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_RETURN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_HIGHPASS_SIMPLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PAN_2D_STEREO_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PAN_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PAN_3D_ROLLOFF_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PAN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_THREE_EQ","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_FFT_WINDOW","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_FFT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_ENVELOPEFOLLOWER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_CONVOLUTION_REVERB","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_CHANNELMIX_OUTPUT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_CHANNELMIX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_TRANSCEIVER_SPEAKERMODE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_TRANSCEIVER","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_OBJECTPAN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PROCESS_OPERATION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PAN_SURROUND_FLAGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_DATA_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_BUFFER_ARRAY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_COMPLEX","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_FLOAT_MAPPING","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_DESC_FLOAT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_DESC_INT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_DESC_BOOL","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_DESC_DATA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_DESC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_DESC__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_OVERALLGAIN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_3DATTRIBUTES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_SIDECHAIN","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_PARAMETER_FFT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_STATE_DFT_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_STATE_PAN_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_STATE_FUNCTIONS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_STATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_DSP_METERING_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_OUTPUT_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_OUTPUT_STATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_OUTPUT_OBJECT3DINFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_SYSTEM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_EVENTDESCRIPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_EVENTINSTANCE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_BUS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_VCA","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_BANK","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_COMMANDREPLAY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_LOADING_STATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_LOAD_MEMORY_MODE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_PARAMETER_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_USER_PROPERTY_TYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_EVENT_PROPERTY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_PLAYBACK_STATE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_STOP_MODE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_INSTANCETYPE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_BANK_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_PARAMETER_ID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_PARAMETER_DESCRIPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_USER_PROPERTY","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_ADVANCEDSETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_CPU_USAGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_BUFFER_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_BUFFER_USAGE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_SOUND_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_COMMAND_INFO","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FMOD_STUDIO_MEMORY_USAGE","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["font_kit"] = [{"text":"impl RefUnwindSafe for Canvas","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RasterizationOptions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FontLoadingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlyphLoadingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectionError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Family&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FamilyHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FamilyName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HintingOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontTransform","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; RefUnwindSafe for FallbackResult&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Font&gt; RefUnwindSafe for FallbackFont&lt;Font&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Font: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Font","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stretch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontconfigSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MultiSource","synthetic":true,"types":[]}];
implementors["fontconfig"] = [{"text":"impl RefUnwindSafe for struct__FcMatrix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for struct__FcObjectType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for struct__FcConstant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for struct__FcValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for struct__FcFontSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for struct__FcObjectSet","synthetic":true,"types":[]}];
implementors["freetype"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for __BindgenUnionField&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_MemoryRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_StreamRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_StreamDesc_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Vector_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_BBox_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Pixel_Mode_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Bitmap_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Outline_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Outline_Funcs_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Glyph_Format_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_RasterRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Span_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Raster_Params_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Raster_Funcs_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_UnitVector_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Matrix_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Data_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Generic_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_ListNodeRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_ListRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _bindgen_ty_2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Glyph_Metrics_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Bitmap_Size_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_LibraryRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_ModuleRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_DriverRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_RendererRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_FaceRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_SizeRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_GlyphSlotRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_CharMapRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Encoding_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Face_InternalRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Size_InternalRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Size_Metrics_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_SubGlyphRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Slot_InternalRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Parameter_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Open_Args_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Size_Request_Type_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Size_RequestRec_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Render_Mode_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Kerning_Mode_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_LcdFilter_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Sfnt_Tag_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Module_Class_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_TrueTypeEngineType_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_Orientation_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TT_OS2","synthetic":true,"types":[]}];
implementors["fxhash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxHasher64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxHasher32","synthetic":true,"types":[]}];
implementors["genmesh"] = [{"text":"impl&lt;'a, T, V&gt; RefUnwindSafe for SharedVertexIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, V&gt; RefUnwindSafe for IndexedPolygonIterator&lt;'a, T, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; RefUnwindSafe for LruIndexer&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Neighbors&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Quad&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Triangle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Polygon&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; RefUnwindSafe for VerticesIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Line&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SRC, V&gt; RefUnwindSafe for TriangulateIterator&lt;SRC, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SRC: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Circle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cone","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cube","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cylinder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IcoSphere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Plane","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SphereUv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Torus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vertex","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["gfx_backend_empty"] = [{"text":"impl RefUnwindSafe for Backend","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhysicalDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawCommandQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Device","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawCommandPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawCommandBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Surface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Swapchain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance","synthetic":true,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl RefUnwindSafe for MemoryTypeId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AdapterInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Adapter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PhysicalDevice: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ViewCreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Usage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Access","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for IndexBufferView&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearDepthStencil","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttachmentClear","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageResolve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageBlit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearColorRaw","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearDepthStencilRaw","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearValueRaw","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandBufferFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for CommandBufferInheritanceInfo&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Framebuffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubpassContents","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; RefUnwindSafe for RenderSubpassCommon&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for RenderPassInlineEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for RenderPassSecondaryEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, S, R&gt; RefUnwindSafe for SubpassCommandBuffer&lt;B, S, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferCopy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageCopy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferImageCopy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OneShot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MultiShot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Primary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Secondary","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; RefUnwindSafe for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceLost","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SurfaceLost","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowInUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfMemory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OomOrDeviceLost","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitFor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShaderError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceCreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HostExecutionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aspects","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatBits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Component","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Swizzle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFeature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferFeature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChannelType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SurfaceType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaseFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg4Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba4Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra4Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R5g6b5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for B5g6r5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R5g5b5a1Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for B5g5r5a1Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A1r5g5b5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg8Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg8Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg8Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg8Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb8Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb8Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb8Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb8Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr8Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr8Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr8Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr8Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba8Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba8Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba8Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba8Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra8Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra8Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra8Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra8Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr8Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr8Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr8Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr8Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2r10g10b10Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2r10g10b10Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2r10g10b10Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2r10g10b10Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2r10g10b10Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2r10g10b10Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2b10g10r10Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2b10g10r10Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2b10g10r10Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2b10g10r10Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2b10g10r10Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A2b10g10r10Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R16Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg16Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg16Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg16Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg16Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg16Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg16Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg16Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb16Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb16Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb16Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb16Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb16Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb16Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb16Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba16Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba16Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba16Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba16Sscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba16Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba16Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba16Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R32Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R32Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R32Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg32Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg32Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg32Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb32Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb32Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb32Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba32Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba32Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba32Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R64Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R64Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R64Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg64Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg64Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg64Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb64Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb64Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb64Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba64Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba64Sint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba64Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for B10g11r11Ufloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for E5b9g9r9Ufloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D16Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for X8D24Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D32Sfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for S8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D16UnormS8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D24UnormS8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D32SfloatS8Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc1RgbUnorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc1RgbSrgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc1RgbaUnorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc1RgbaSrgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc2Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc2Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc3Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc3Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc4Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc4Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc5Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc6hUfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc6hSfloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc7Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bc7Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Etc2R8g8b8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Etc2R8g8b8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Etc2R8g8b8a1Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Etc2R8g8b8a1Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Etc2R8g8b8a8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Etc2R8g8b8a8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EacR11Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EacR11Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EacR11g11Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EacR11g11Snorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc4x4Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc4x4Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc5x4Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc5x4Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc5x5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc5x5Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc6x5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc6x5Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc6x6Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc6x6Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc8x5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc8x5Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc8x6Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc8x6Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc8x8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc8x8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x5Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x5Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x6Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x6Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x8Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x8Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x10Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc10x10Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc12x10Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc12x10Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc12x12Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Astc12x12Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Offset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tiling","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ViewError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LayerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anisotropic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CubeFace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ViewKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ViewCapabilities","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Usage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WrapMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PackedColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SamplerInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Access","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subresource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubresourceLayers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubresourceRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormatProperties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubresourceFootprint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; RefUnwindSafe for Reader&lt;'a, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, T&gt; RefUnwindSafe for Writer&lt;'a, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Properties","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dependencies","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for Barrier&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Requirements","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttachmentLoadOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttachmentStoreOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttachmentOps","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attachment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubpassRef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubpassDependency","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SubpassDesc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for Subpass&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommandPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; RefUnwindSafe for CommandPool&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for ComputePipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ComputePipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorSetLayoutBinding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorRangeDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, WI&gt; RefUnwindSafe for DescriptorSetWrite&lt;'a, B, WI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;WI: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for Descriptor&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::BufferView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for DescriptorSetCopy&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorPoolCreateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClearRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Viewport","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for GraphicsShaderSet&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BakedStates","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for GraphicsPipelineDesc&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::RenderPass: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PolygonMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrontFace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepthBias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rasterizer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Multisampling","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexInputRate","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Element&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexBufferDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttributeDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimitiveRestart","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputAssemblerDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comparison","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Factor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorBlendDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepthTest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StencilOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StencilFace","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Sided&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StencilTest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DepthStencilDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Face","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PipelineStage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShaderStageFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stage","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for EntryPoint&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PipelineCreationFlags","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for BasePipeline&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecializationConstant","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Specialization&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for State&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for Query&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueryPool: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResultFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PipelineStatistic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for General","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Graphics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GraphicsOrCompute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueFamilyId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; RefUnwindSafe for QueueGroup&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Queues&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueType","synthetic":true,"types":[]},{"text":"impl&lt;Ic, Iw, Is&gt; RefUnwindSafe for Submission&lt;Ic, Iw, Is&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ic: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Is: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Iw: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; RefUnwindSafe for CommandQueue&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extent2D","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SurfaceCapabilities","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresentMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompositeAlpha","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwapchainConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suboptimal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresentError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Features","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmissionError","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Gpu&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::QueueFamily: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl RefUnwindSafe for DisposalMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extension","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryLimit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionData","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["glsl_layout"] = [{"text":"impl RefUnwindSafe for boolean","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bvec2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bvec3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bvec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ivec2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ivec3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ivec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for uvec2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for uvec3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for uvec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for vec2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for vec3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for vec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dvec2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dvec3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dvec4","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Element&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as AsStd140&gt;::Align: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat2x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat2x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat2x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat3x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat3x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat3x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat4x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat4x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bmat4x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat2x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat2x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat2x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat3x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat3x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat3x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat4x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat4x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for imat4x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat2x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat2x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat2x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat3x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat3x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat3x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat4x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat4x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for umat4x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat2x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat2x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat2x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat3x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat3x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat3x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat4x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat4x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mat4x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat2x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat2x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat2x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat3x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat3x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat3x4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat4x2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat4x3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dmat4x4","synthetic":true,"types":[]}];
implementors["gltf"] = [{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SparseIndicesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for SparseIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ItemIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Sparse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Accessor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Channels&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for I16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; RefUnwindSafe for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Rotations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MorphTargetWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadOutputs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Animation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Channel&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Target&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Glb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChunkType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for View&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Projection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Camera&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Orthographic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Perspective&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Source&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Image&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExtensionsUsed&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ExtensionsRequired&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Accessors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Animations&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Buffers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Views&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cameras&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Images&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Lights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Materials&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Meshes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Samplers&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Scenes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Skins&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Textures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Light&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Material&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PbrMetallicRoughness&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NormalTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OcclusionTexture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MorphTargets&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Primitives&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RgbU8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RgbU16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RgbF32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RgbaU8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RgbaU16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RgbaF32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CastingIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F32","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadColors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadJoints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadTexCoords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadWeights&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; RefUnwindSafe for ReadMorphTargets&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bounds&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Mesh&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MorphTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Primitive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; RefUnwindSafe for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Nodes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Children&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Node&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Scene&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Joints&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 's, F&gt; RefUnwindSafe for Reader&lt;'a, 's, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Skin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Info&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Sampler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Texture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gltf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Document","synthetic":true,"types":[]}];
implementors["gltf_json"] = [{"text":"impl RefUnwindSafe for Indices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sparse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Values","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComponentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Accessor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexComponentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericComponentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interpolation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Property","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Animation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for View","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Camera","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Orthographic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Perspective","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Indices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sparse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Values","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Accessor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Animation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Asset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for View","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Camera","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Orthographic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Perspective","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NormalTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mesh","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Root","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KhrLightsPunctual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Light","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scene","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Skin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MimeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlphaMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PbrMetallicRoughness","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NormalTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OcclusionTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlphaCutoff","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmissiveFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PbrBaseColorFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrengthFactor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mesh","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MorphTarget","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semantic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Index&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Root","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scene","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitQuaternion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Skin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MagFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MinFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WrappingMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sampler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Checked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["glyph_brush"] = [{"text":"impl&lt;'a, H&gt; RefUnwindSafe for GlyphBrushBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font, V, H&gt; RefUnwindSafe for GlyphBrush&lt;'font, V, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlyphVertex","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for BrushAction&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BrushError","synthetic":true,"types":[]},{"text":"impl&lt;'font, H&gt; RefUnwindSafe for GlyphCalculator&lt;'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'brush, 'font, H&gt; RefUnwindSafe for GlyphCalculatorGuard&lt;'brush, 'font, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; RefUnwindSafe for GlyphCalculatorBuilder&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedVariedSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedSectionText","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariedSection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Section&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["glyph_brush_layout"] = [{"text":"impl&lt;L&gt; RefUnwindSafe for Layout&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HorizontalAlign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerticalAlign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LineBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BuiltInLineBreaker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SectionGeometry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SectionText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlyphChange","synthetic":true,"types":[]}];
implementors["hibitset"] = [{"text":"impl RefUnwindSafe for AtomicBitSet","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for DrainBitIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BitParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for BitProducer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BitIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitSetAll","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitSet","synthetic":true,"types":[]}];
implementors["hound"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for WavReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'wr, R, S&gt; RefUnwindSafe for WavSamples&lt;'wr, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, S&gt; RefUnwindSafe for WavIntoSamples&lt;R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WavWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'parent, W&gt; RefUnwindSafe for SampleWriter16&lt;'parent, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WavSpec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormattedDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rfc3339Timestamp","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl !RefUnwindSafe for ImageError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParameterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LimitError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumeratePixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for EnumerateRowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for PixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for RowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NeuQuant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BiLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; RefUnwindSafe for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; RefUnwindSafe for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; RefUnwindSafe for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelDensity","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for JpegEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; RefUnwindSafe for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; RefUnwindSafe for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["inflate"] = [{"text":"impl&lt;W&gt; RefUnwindSafe for InflateWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoderBuf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InflateStream","synthetic":true,"types":[]}];
implementors["intl_memoizer"] = [{"text":"impl RefUnwindSafe for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntlLangMemoizer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntlMemoizer","synthetic":true,"types":[]}];
implementors["intl_pluralrules"] = [{"text":"impl RefUnwindSafe for PluralOperands","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluralCategory","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluralRuleType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PluralRules","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; RefUnwindSafe for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; RefUnwindSafe for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !RefUnwindSafe for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !RefUnwindSafe for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !RefUnwindSafe for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !RefUnwindSafe for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; RefUnwindSafe for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; RefUnwindSafe for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; RefUnwindSafe for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; RefUnwindSafe for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; RefUnwindSafe for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl RefUnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnsupportedFeature","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["laminar"] = [{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkConditioner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeliveryGuarantee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrderingGuarantee","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Packet","synthetic":true,"types":[]}];
implementors["lewton"] = [{"text":"impl RefUnwindSafe for HeaderReadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommentHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetupHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioReadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreviousWindowRight","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for OggStreamReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for InterleavedSamples&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VorbisError","synthetic":true,"types":[]}];
implementors["lexical"] = [{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Result&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundingKind","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl RefUnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Symbol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;'lib, T&gt; RefUnwindSafe for Symbol&lt;'lib, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["line_drawing"] = [{"text":"impl&lt;T, I&gt; RefUnwindSafe for Steps&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Octant","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bresenham&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; RefUnwindSafe for Midpoint&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; RefUnwindSafe for XiaolinWu&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WalkGrid&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Supercover&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Bresenham3d&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VoxelOrigin","synthetic":true,"types":[]},{"text":"impl&lt;I, O&gt; RefUnwindSafe for WalkVoxels&lt;I, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BresenhamCircle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]}];
implementors["lyon_geom"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for BezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for QuadraticBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flattened&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for CubicBezierSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SvgArc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Arc&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArcFlags","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Triangle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for LineSegment&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Line&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for LineEquation&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Monotonic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lyon_path"] = [{"text":"impl RefUnwindSafe for SvgEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuadraticEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlattenedEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; RefUnwindSafe for PathSlice&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cursor","synthetic":true,"types":[]},{"text":"impl&lt;'l&gt; RefUnwindSafe for Iter&lt;'l&gt;","synthetic":true,"types":[]},{"text":"impl&lt;SvgIter&gt; RefUnwindSafe for PathEvents&lt;SvgIter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SvgIter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for Flattened&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for SvgPathIter&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Transformed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for FromPolyline&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for BezierSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for LineSegments&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; RefUnwindSafe for SvgPathBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Builder&gt; RefUnwindSafe for FlatteningBuilder&lt;Builder&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Builder: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FillRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexId","synthetic":true,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DecoderEarlyChange&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LsbReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for LsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for MsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl RefUnwindSafe for MmapOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mmap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapMut","synthetic":true,"types":[]}];
implementors["minimp3"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]}];
implementors["minimp3_sys"] = [{"text":"impl RefUnwindSafe for __fsid_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mp3dec_frame_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mp3dec_t","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl RefUnwindSafe for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InflateState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TINFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamResult","synthetic":true,"types":[]}];
implementors["minterpolate"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for InterpolationFunction&lt;T&gt;","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl RefUnwindSafe for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dynamic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U5","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U9","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U12","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U14","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U17","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U18","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U19","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U20","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U21","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U22","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U23","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U24","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U25","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U26","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U27","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U28","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U29","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U30","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U31","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U33","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U34","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U35","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U36","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U37","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U38","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U39","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U40","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U41","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U42","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U43","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U44","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U45","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U46","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U47","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U48","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U49","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U50","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U51","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U52","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U53","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U54","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U55","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U56","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U57","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U58","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U59","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U60","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U61","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U62","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U63","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U65","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U66","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U67","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U68","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U69","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U70","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U71","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U72","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U73","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U74","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U75","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U76","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U77","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U78","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U79","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U80","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U81","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U82","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U83","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U84","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U85","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U86","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U87","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U88","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U89","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U90","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U91","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U92","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U93","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U94","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U95","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U96","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U97","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U98","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U99","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U100","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U101","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U102","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U103","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U104","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U105","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U106","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U107","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U108","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U109","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U110","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U111","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U112","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U113","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U114","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U115","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U116","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U117","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U118","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U119","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U120","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U121","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U122","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U123","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U124","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U125","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U126","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; RefUnwindSafe for MatrixIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; RefUnwindSafe for MatrixIterMut&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; RefUnwindSafe for RowIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; RefUnwindSafe for RowIterMut&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; RefUnwindSafe for ColumnIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; RefUnwindSafe for ColumnIterMut&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C, S&gt; RefUnwindSafe for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; RefUnwindSafe for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;R as DimName&gt;::Value as Mul&lt;&lt;C as DimName&gt;::Value&gt;&gt;::Output as ArrayLength&lt;N&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; RefUnwindSafe for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; RefUnwindSafe for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; RefUnwindSafe for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LpNorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !RefUnwindSafe for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !RefUnwindSafe for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TGeneral","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TProjective","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !RefUnwindSafe for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; RefUnwindSafe for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe + Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !RefUnwindSafe for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !RefUnwindSafe for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !RefUnwindSafe for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !RefUnwindSafe for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !RefUnwindSafe for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !RefUnwindSafe for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !RefUnwindSafe for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl RefUnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CmsgSpace&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; RefUnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl RefUnwindSafe for Sign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BigUint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]}];
implementors["ogg"] = [{"text":"impl !RefUnwindSafe for OggReadError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OggPage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PageParser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasePacketReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PacketReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PacketWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PacketWriteEndInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Packet","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["palette"] = [{"text":"impl RefUnwindSafe for Equations","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Equation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parameter","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; RefUnwindSafe for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for Gradient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; RefUnwindSafe for Take&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; RefUnwindSafe for Slice&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; RefUnwindSafe for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; RefUnwindSafe for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; RefUnwindSafe for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; RefUnwindSafe for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; RefUnwindSafe for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ConeResponseMatrices&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Srgb","synthetic":true,"types":[]},{"text":"impl&lt;S, N&gt; RefUnwindSafe for Gamma&lt;S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for GammaFn&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F2p2","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Linear&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for A","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for B","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for C","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D50","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D55","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D65","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D75","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for E","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F7","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for F11","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D50Degree10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D55Degree10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D65Degree10","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for D75Degree10","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for Color&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as RgbSpace&gt;::WhitePoint: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl RefUnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl RefUnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for OrderedMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl RefUnwindSafe for Decoded","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BitDepth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixelDimensions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FrameControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnimationControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transformations","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Diagnostic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpanRange","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; RefUnwindSafe for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["quickcheck"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for StdGen&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdThreadGen","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; RefUnwindSafe for QuickCheck&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestResult","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl RefUnwindSafe for UnitSphere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitBall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitDisc","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Gamma&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for ChiSquared&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for FisherF&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherFError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for StudentT&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Beta&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BetaError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Normal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for LogNormal&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Exp&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Pareto&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Pert&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PertError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Poisson&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Cauchy&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Dirichlet&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Triangular&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TriangularError","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Weibull&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl RefUnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; RefUnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; RefUnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; RefUnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; RefUnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; RefUnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; RefUnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; RefUnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; RefUnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; RefUnwindSafe for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; RefUnwindSafe for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; RefUnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; RefUnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !RefUnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !RefUnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !RefUnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]}];
implementors["relevant"] = [{"text":"impl RefUnwindSafe for Relevant","synthetic":true,"types":[]}];
implementors["rendy_chain"] = [{"text":"impl&lt;R&gt; RefUnwindSafe for Link&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for LinkNode&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Chain&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsynchronized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Chains","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for State&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Usage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Node","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Family&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Queue&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmissionId","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Submission&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Schedule&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Signal&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Wait&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Barrier&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Access: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as Resource&gt;::Layout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Guard","synthetic":true,"types":[]},{"text":"impl&lt;S, W&gt; RefUnwindSafe for SyncData&lt;S, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]}];
implementors["rendy_command"] = [{"text":"impl RefUnwindSafe for DrawCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrawIndexedCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DispatchCommand","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; RefUnwindSafe for EncoderCommon&lt;'a, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for RenderPassEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for RenderPassInlineEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for RenderPassSecondaryEncoder&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C, L&gt; RefUnwindSafe for Encoder&lt;'a, B, C, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimaryLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondaryLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndividualReset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoIndividualReset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitialState","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; RefUnwindSafe for RecordingState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, P&gt; RefUnwindSafe for ExecutableState&lt;U, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for PendingState&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidState","synthetic":true,"types":[]},{"text":"impl&lt;B, S, L, P&gt; RefUnwindSafe for Submit&lt;B, S, L, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OneShot","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for MultiShot&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimultaneousUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoSimultaneousUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderPassContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutsideRenderPass","synthetic":true,"types":[]},{"text":"impl&lt;B, C, S, L, R&gt; RefUnwindSafe for CommandBuffer&lt;B, C, S, L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Execute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Graphics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for General","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Queue&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, W, C, S&gt; RefUnwindSafe for Submission&lt;B, W, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FamilyId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QueueId","synthetic":true,"types":[]},{"text":"impl&lt;B, C&gt; RefUnwindSafe for Family&lt;B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Families&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandQueue: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FenceEpoch","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Fence&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, C, R&gt; RefUnwindSafe for CommandPool&lt;B, C, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_descriptor"] = [{"text":"impl&lt;B&gt; RefUnwindSafe for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DescriptorAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorPool: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorRanges","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DescriptorRangesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_factory"] = [{"text":"impl&lt;B&gt; RefUnwindSafe for Barriers&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for Blitter&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlitRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlitImageState","synthetic":true,"types":[]},{"text":"impl&lt;D, H, Q&gt; RefUnwindSafe for Config&lt;D, H, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OneGraphicsQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SavedQueueConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicHeapsConfigure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SavedHeapsConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicDevicesConfigure","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for Factory&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageStateOrLayout","synthetic":true,"types":[]}];
implementors["rendy_frame"] = [{"text":"impl&lt;'a, T, I, P&gt; RefUnwindSafe for CirqueRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; RefUnwindSafe for InitialRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, I, P&gt; RefUnwindSafe for ReadyRef&lt;'a, T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; RefUnwindSafe for Cirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I, P&gt; RefUnwindSafe for DependentCirque&lt;T, I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompleteFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FramesRange","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Frames&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Fence: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_graph"] = [{"text":"impl&lt;B, T&gt; !RefUnwindSafe for Graph&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for GraphContext&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !RefUnwindSafe for GraphBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for PresentNode&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandBuffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::CommandPool: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Semaphore: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for PresentBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pipeline","synthetic":true,"types":[]},{"text":"impl&lt;B, P&gt; RefUnwindSafe for SimpleRenderGroup&lt;B, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::GraphicsPipeline: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::PipelineLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for SimpleRenderGroupDesc&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !RefUnwindSafe for SubpassBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, T&gt; !RefUnwindSafe for RenderPassNodeBuilder&lt;B, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrepareResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferAccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferBarrier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageAccess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageBarrier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeImage","synthetic":true,"types":[]},{"text":"impl&lt;B, T:&nbsp;?Sized, N&gt; RefUnwindSafe for DescBuilder&lt;B, T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeId","synthetic":true,"types":[]}];
implementors["rendy_memory"] = [{"text":"impl&lt;B&gt; RefUnwindSafe for DedicatedBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DedicatedAllocator","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DynamicBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DynamicConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DynamicAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for LinearBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinearConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for LinearAllocator&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeapsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeapsConfig","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Heaps&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for MemoryBlock&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NonCoherent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Coherent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MaybeCoherent","synthetic":true,"types":[]},{"text":"impl&lt;'a, B, C&gt; RefUnwindSafe for MappedRange&lt;'a, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Memory&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dynamic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Upload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Download","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryUsageValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryUtilization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryHeapUtilization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemoryTypeUtilization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TotalMemoryUtilization","synthetic":true,"types":[]}];
implementors["rendy_mesh"] = [{"text":"impl RefUnwindSafe for VertexBufferLayout","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for IndexBuffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Indices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MeshBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Mesh&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Incompatible","synthetic":true,"types":[]}];
implementors["rendy_resource"] = [{"text":"impl RefUnwindSafe for BufferInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Buffer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Buffer: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Escape&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Terminal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Handle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Image&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageViewInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ImageView&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DescriptorSetInfo","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DescriptorSetLayout&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for DescriptorSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSet: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::DescriptorSetLayout: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ResourceTracker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SamplerCache&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Sampler&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_shader"] = [{"text":"impl RefUnwindSafe for SpirvShader","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ShaderSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecConstantSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShaderSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ShaderStorage&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ShaderModule: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_texture"] = [{"text":"impl RefUnwindSafe for Repr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextureKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageTextureConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Int","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Iscaled","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Srgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for R","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgba","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bgra","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abgr","synthetic":true,"types":[]},{"text":"impl&lt;C, S, T&gt; RefUnwindSafe for Pixel&lt;C, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as PixelRepr&lt;S, T&gt;&gt;::Repr: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Texture&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::ImageView: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MipLevels","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TextureBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["rendy_util"] = [{"text":"impl RefUnwindSafe for AttrUuid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tangent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TexCoord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexFormat","synthetic":true,"types":[]},{"text":"impl&lt;N, I&gt; RefUnwindSafe for AttrGenIter&lt;N, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosNorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosColorNorm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosTex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosNormTex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosNormTangTex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Model","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLayout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Layout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstanceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for Instance&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceId","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Device&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Device: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rendy_wsi"] = [{"text":"impl&lt;B&gt; RefUnwindSafe for Surface&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Target&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; RefUnwindSafe for NextImages&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Image: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Memory: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Surface: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Backend&gt;::Swapchain: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rental"] = [{"text":"impl RefUnwindSafe for SimpleRef","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRef_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRef_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleMut","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleMut_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleMut_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleRefDebug","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefDebug_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefDebug_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleRefClone","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefClone_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefClone_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleRefDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleMutDeref","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleMutDeref_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleMutDeref_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SimpleRefCovariant","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefCovariant_Borrow&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref&gt; RefUnwindSafe for SimpleRefCovariant_BorrowMut&lt;'head, 'iref&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SimpleRefMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; RefUnwindSafe for SimpleRefMap_Borrow&lt;'head, 'iref, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'iref, T&gt; RefUnwindSafe for SimpleRefMap_BorrowMut&lt;'head, 'iref, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; RefUnwindSafe for RentRef&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentRef_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentRef_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; RefUnwindSafe for RentMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentMut_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !RefUnwindSafe for RentRefCell&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !RefUnwindSafe for RentRefCell_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !RefUnwindSafe for RentRefCell_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; !RefUnwindSafe for RentRefCellMut&lt;H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !RefUnwindSafe for RentRefCellMut_Borrow&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; !RefUnwindSafe for RentRefCellMut_BorrowMut&lt;'head, 'suffix, H, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; RefUnwindSafe for RentMutex&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentMutex_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentMutex_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; RefUnwindSafe for RentRwLock&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentRwLock_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentRwLock_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; RefUnwindSafe for RentRwLockMut&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentRwLockMut_Borrow&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'head, 'suffix, H, T&gt; RefUnwindSafe for RentRwLockMut_BorrowMut&lt;'head, 'suffix, H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;H as Deref&gt;::Target: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, H&gt; RefUnwindSafe for RentalError&lt;E, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rodio"] = [{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpatialSink","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecoderError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for DynamicMixerController&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for DynamicMixer&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for SourcesQueueInput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SourcesQueueOutput&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Amplify&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for BltFilter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Buffered&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for ChannelVolume&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Delay&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Done&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Empty&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for FadeIn&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FromFactoryIter&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for FromIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I1, I2&gt; RefUnwindSafe for Mix&lt;I1, I2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I1 as Iterator&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I2 as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Pausable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; RefUnwindSafe for PeriodicAccess&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Repeat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; RefUnwindSafe for SamplesConverter&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SineWave","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Spatial&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Speed&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Stoppable&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for TakeDuration&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, D&gt; RefUnwindSafe for UniformSourceIterator&lt;I, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Zero&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for StaticSamplesBuffer&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ron"] = [{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl&lt;'de&gt; RefUnwindSafe for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrettyConfig","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for Compound&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Map","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extensions","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["rustc_version"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Channel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionMeta","synthetic":true,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N&gt; RefUnwindSafe for Point&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Vector&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Line","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Curve","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for Rect&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'font&gt; RefUnwindSafe for Cache&lt;'font&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CacheBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CacheReadErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CacheWriteErr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CachedBy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FontCollection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Font&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SharedBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Codepoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlyphId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Glyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SharedGlyphData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMetrics","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ScaledGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PositionedGlyph&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scale","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IntoFontsIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, I&gt; RefUnwindSafe for GlyphIter&lt;'a, 'b, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for LayoutIter&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Segment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Contour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["scoped_threadpool"] = [{"text":"impl !RefUnwindSafe for Pool","synthetic":true,"types":[]},{"text":"impl&lt;'pool, 'scope&gt; !RefUnwindSafe for Scope&lt;'pool, 'scope&gt;","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SemVerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VersionReq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WildcardVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Op","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Predicate","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_bytes"] = [{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ByteBuf","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]}];
implementors["shred"] = [{"text":"impl RefUnwindSafe for InvalidBorrow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Ref&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for RefMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for TrustCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for AsyncDispatcher&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BatchAccessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for BatchUncheckedWorld&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for DefaultBatchControllerSystem&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for DispatcherBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Dispatcher&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; RefUnwindSafe for Par&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; RefUnwindSafe for ParSeq&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; RefUnwindSafe for Seq&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MetaIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MetaIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; RefUnwindSafe for MetaTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;?Sized&gt; RefUnwindSafe for AccessorCow&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as System&lt;'a&gt;&gt;::SystemData as DynamicSystemData&lt;'a&gt;&gt;::Accessor: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunningTime","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StaticAccessor&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&nbsp;=&nbsp;DefaultProvider&gt; !RefUnwindSafe for Read&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&nbsp;=&nbsp;DefaultProvider&gt; !RefUnwindSafe for Write&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DefaultProvider","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PanicHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Fetch&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for FetchMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for World","synthetic":true,"types":[]}];
implementors["shrev"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for ReaderId&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for StorageIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !RefUnwindSafe for EventChannel&lt;E&gt;","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["slice_deque"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Buffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SliceDeque&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; RefUnwindSafe for Splice&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; RefUnwindSafe for DrainFilter&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl RefUnwindSafe for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smithay_client_toolkit"] = [{"text":"impl !RefUnwindSafe for DataDevice","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DndEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReadPipe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataSourceEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WritePipe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRepeatKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RMLVO","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRepeatEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputMgr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThemeManager","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThemedPointer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AutoThemer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AutoPointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DoubleMemPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MemPool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BasicFrame","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConceptFrame","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; !RefUnwindSafe for Window&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FrameRequest","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Environment","synthetic":true,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for ChangeSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoxedErr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WrongGeneration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoError","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; RefUnwindSafe for JoinParIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; RefUnwindSafe for MaybeJoin&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; RefUnwindSafe for JoinIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Mask: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Value: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ComponentEvent","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DefaultVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DenseVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&nbsp;=&nbsp;DenseVecStorage&lt;C&gt;&gt; !RefUnwindSafe for FlaggedStorage&lt;C, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for HashMapStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for NullStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for VecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entity","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LazyUpdate","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !RefUnwindSafe for Entries&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !RefUnwindSafe for VacantEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !RefUnwindSafe for StorageEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SequentialRestriction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImmutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl&lt;'rf, 'st, C, S, B, Restrict&gt; !RefUnwindSafe for RestrictedStorage&lt;'rf, 'st, C, S, B, Restrict&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BTreeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AntiStorage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for MaskedStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Component&gt;::Storage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'e, T, D&gt; !RefUnwindSafe for Storage&lt;'e, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CreateIterAtomic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntitiesRes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EntityResBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LazyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CreateIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for EntityBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["specs_hierarchy"] = [{"text":"impl RefUnwindSafe for HierarchyEvent","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; !RefUnwindSafe for Hierarchy&lt;P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !RefUnwindSafe for SubHierarchyIterator&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !RefUnwindSafe for ParentData&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for HierarchySystem&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data&gt; RefUnwindSafe for FontInfo&lt;Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vertex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VMetrics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeEid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MicrosoftEid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacEid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MicrosoftLang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacLang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlatformEncodingLanguageId","synthetic":true,"types":[]},{"text":"impl&lt;'a, Data&gt; RefUnwindSafe for FontNameIter&lt;'a, Data&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Data: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Apostrophe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CapSelf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Catch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Self_","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprInPlace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIfLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhileLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LitVerbatim","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntSuffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FloatSuffix","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BareFnArgName","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for PathTokens&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["synstructure"] = [{"text":"impl RefUnwindSafe for AddBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindStyle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BindingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantAst&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VariantInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Structure&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl RefUnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseColorError","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gray8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gray16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGB8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGB16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGBA8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RGBA16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CMYK8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rational","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for DirectoryEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; RefUnwindSafe for ImageEncoder&lt;'a, W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TiffError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TiffFormatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorType","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tinystr"] = [{"text":"impl RefUnwindSafe for TinyStr16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TinyStr4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TinyStr8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TinyStrAuto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["twox_hash"] = [{"text":"impl RefUnwindSafe for XxHash64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XxHash32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RandomXxHashBuilder64","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RandomXxHashBuilder32","synthetic":true,"types":[]}];
implementors["tynm"] = [{"text":"impl&lt;'s&gt; RefUnwindSafe for TypeNameDisplay&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for TypeName&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["type_map"] = [{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMap","synthetic":true,"types":[]}];
implementors["unic_langid_impl"] = [{"text":"impl RefUnwindSafe for LanguageIdentifierError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LanguageIdentifier","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl RefUnwindSafe for Void","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["wavefront_obj"] = [{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MtlSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Illumination","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Geometry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Primitive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vertex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TVertex","synthetic":true,"types":[]}];
implementors["wayland_client"] = [{"text":"impl RefUnwindSafe for ConnectError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Display","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventQueue","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for QueueToken","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadEventsGuard","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobalManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlobalEvent","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !RefUnwindSafe for Proxy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for NewProxy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CursorTheme","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CursorImageBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlEglSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProxyMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDisplay","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlRegistry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlCallback","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlCompositor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShmPool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataSource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DndAction","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlDataDeviceManager","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Resize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FullscreenMethod","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlShellSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AxisSource","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlPointer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeymapFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlKeyboard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlTouch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Subpixel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlOutput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSubcompositor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WlSubsurface","synthetic":true,"types":[]}];
implementors["wayland_commons"] = [{"text":"impl&lt;Meta&gt; RefUnwindSafe for Object&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Meta&gt; RefUnwindSafe for ObjectMap&lt;Meta&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Meta: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedSocket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UserData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserDataMap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgumentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Argument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageWriteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AnonymousObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoMessage","synthetic":true,"types":[]}];
implementors["wayland_protocols"] = [{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresentMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpFullscreenShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpFullscreenShellModeFeedbackV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpIdleInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpIdleInhibitorV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputMethodContextV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputMethodV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputPanelV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputPanelSurfaceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputTimestampsManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpInputTimestampsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpKeyboardShortcutsInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpKeyboardShortcutsInhibitorV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxDmabufV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxBufferParamsV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxExplicitSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxSurfaceSynchronizationV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLinuxBufferReleaseV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerConstraintsV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpLockedPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpConfinedPointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerGesturesV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerGestureSwipeV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPointerGesturePinchV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionDeviceManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionDeviceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionOfferV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpPrimarySelectionSourceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpRelativePointerManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpRelativePointerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletSeatV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletToolV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletManagerV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletSeatV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Capability","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletToolV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadRingV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Source","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadStripV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadGroupV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTabletPadV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreeditStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextDirection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeCause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentPurpose","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputV3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpTextInputManagerV3","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgDecorationManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgToplevelDecorationV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExporterV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImporterV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExportedV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImportedV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExporterV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImporterV2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgExportedV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgImportedV2","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgOutputManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgOutputV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgShell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgShellV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgPositionerV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgSurfaceV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgToplevelV6","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZxdgPopupV6","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpXwaylandKeyboardGrabManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwpXwaylandKeyboardGrabV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlManagerV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlDeviceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlSourceV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrDataControlOfferV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrExportDmabufManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancelReason","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrExportDmabufFrameV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrForeignToplevelManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrForeignToplevelHandleV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrGammaControlManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrGammaControlV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrInputInhibitManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrInputInhibitorV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Layer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrLayerShellV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrLayerSurfaceV1","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrScreencopyManagerV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ZwlrScreencopyFrameV1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpPresentation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpPresentationFeedback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgWmBase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gravity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstraintAdjustment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgPositioner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResizeEdge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for State","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgToplevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XdgPopup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpViewporter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WpViewport","synthetic":true,"types":[]}];
implementors["wayland_sys"] = [{"text":"impl RefUnwindSafe for wl_message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_interface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_list","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_array","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_argument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_proxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_display","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_event_queue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CLIENT_OPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CLIENT_HANDLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_egl_window","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandEgl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_EGL_OPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_EGL_HANDLE","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_cursor_theme","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_cursor_image","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for wl_cursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandCursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CURSOR_OPTION","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WAYLAND_CURSOR_HANDLE","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl RefUnwindSafe for LogicalPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhysicalPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogicalSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PhysicalSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyboardInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TouchPhase","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Touch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ElementState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BadIcon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Icon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XNotSupported","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowType","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AvailableMonitorsIter","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for MonitorId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaylandTheme","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceId","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventsLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlow","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EventsLoopProxy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventsLoopClosed","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WindowBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MouseCursor","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WindowAttributes","synthetic":true,"types":[]}];
implementors["x11_clipboard"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Atoms","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Clipboard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]}];
implementors["x11_dl"] = [{"text":"impl RefUnwindSafe for OpenError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xlib","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XDisplay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XIC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XIM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XRegion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XOC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XOM","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XrmHashBucketRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcmsCCC","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XcmsColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcmsColorSpace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcmsFunctionSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbBounds","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbClientMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbComponentList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbComponentNames","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControls","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControlsChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControlsNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDeviceChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDeviceInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDeviceLedInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDoodad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbExtensionDeviceNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbGeometry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbGeometrySizes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbIndicatorMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKeyType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbMapChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbMods","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNameChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNamesNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOutline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOverlay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOverlayKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbOverlayRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbProperty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbRow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbSection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbServerMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbShape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbSymInterpretRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XAnyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XButtonEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCirculateEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCirculateRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XClientMessageEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XColormapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XConfigureEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XConfigureRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCreateWindowEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCrossingEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDestroyWindowEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XErrorEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExposeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFocusChangeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGraphicsExposeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGravityEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeymapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMappingEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMapRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XMotionEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XNoExposeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPropertyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XReparentEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XResizeRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSelectionClearEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSelectionEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSelectionRequestEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XUnmapEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XVisibilityEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbCompatMapRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbIndicatorRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKeyAliasRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbKeyNameRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNamesRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbStateRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbAnyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbNewKeyboardNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbStateNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbControlsNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbIndicatorNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbNamesNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbCompatMapNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbBellNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbActionMessageEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbAccessXNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XkbExtensionDeviceNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XkbKbdDpyStateRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Depth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Screen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScreenFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XArc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XChar2b","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XCharStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XClassHint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XComposeStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExtCodes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExtData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFontProp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFontSetExtents","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFontStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGCValues","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XGenericEventCookie","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XHostAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIconSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeyboardControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XKeyboardState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmbTextItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XModifierKeymap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XOMCharSetList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPixmapFormatValues","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRectangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XrmOptionDescRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XrmValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSetWindowAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XSizeHints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XStandardColormap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTextItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTextItem16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTextProperty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XTimeCoord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XVisualInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XwcTextItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XWindowAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XWindowChanges","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XWMHints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMCaretDirection","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMCaretStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMPreeditDrawCallbackStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMPreeditCaretCallbackStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMTextString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIMText","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XICCallback","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AspectRatio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientMessageData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImageFns","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Glx","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLXcontextRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for __GLXFBConfigRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xcursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorAnimate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorChunkHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorComment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorCursors","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorFileHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorFileToc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XcursorImages","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeGamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeModeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeModeLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeMonitor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeSyncRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XF86VidModeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FT_FaceRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcCharSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcPattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FcResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xft","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftFontInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftFont","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftDraw","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftCharSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftCharFontSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftFontSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftGlyphSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftGlyphFontSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XftPattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xlib","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XineramaScreenInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XPanoramiXInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XAnyClassinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XDeviceTimeCoord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XExtensionVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFeedbackControl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XFeedbackState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInputClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInputClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XInput2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAddMasterInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIRemoveMasterInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAttachSlaveInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDetachSlaveInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAnyHierarchyChangeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIModifierState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIButtonState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIValuatorState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIEventMask","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIAnyClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIButtonClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIKeyClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIValuatorClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIScrollClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XITouchClassInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDeviceInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIGrabModifiers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIBarrierReleasePointerInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIHierarchyInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIHierarchyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDeviceChangedEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIDeviceEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIRawEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIEnterEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIPropertyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XITouchOwnershipEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XIBarrierEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xmu","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _AtomRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuArea","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuDisplayQueue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuDisplayQueueEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuScanline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XmuWidgetNode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordClientInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordExtRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordInterceptData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordRange8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordRange16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRecordState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xrender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XAnimCursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XConicalGradient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XFilters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphElt8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphElt16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphElt32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XGlyphInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XIndexValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XLinearGradient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XLineFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XPointDouble","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XPointFixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XRadialGradient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRenderColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRenderDirectFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRenderPictFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XRenderPictureAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XSpanFix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTrap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTrapezoid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTriangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xss","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XScreenSaverInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XScreenSaverNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubstitutionRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _TranslationData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _WidgetClassRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _WidgetRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtActionsRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtAppStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtCallbackRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtCheckpointTokenRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XtConvertArgRec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _XtResource","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XtWidgetGeometry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xf86vmode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xlib_xcb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xrandr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenSize","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRModeInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenResources","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRROutputInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRPropertyInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcGamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcTransformAttributes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRPanning","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderResources","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRMonitorInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRScreenChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRROutputChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRCrtcChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRROutputPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRProviderPropertyNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XRRResourceChangeNotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Xrandr_2_2_0","synthetic":true,"types":[]}];
implementors["xcb"] = [{"text":"impl&lt;'a, T&gt; RefUnwindSafe for StructPtr&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Event&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Cookie&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Reply&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConnError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Connection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for QueryExtensionData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RequestError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ValueError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WindowError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PixmapError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtomError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CursorError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FontError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DrawableError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllocError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColormapError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GContextError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdChoiceError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NameError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplementationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Char2b","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Point","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rectangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Format","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visualtype","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timecoord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fontprop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Charinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Segment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Coloritem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rgb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PictFormatError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PictureError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PictOpError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlyphSetError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlyphError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Directformat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pictforminfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pictvisual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Indexvalue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pointfix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trapezoid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Glyphinfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Animcursorelt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spanfix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trap","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BadRegionError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_connection_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_extension_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_special_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_generic_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_generic_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_generic_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_ge_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_generic_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_void_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_auth_info_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_char2b_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_char2b_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_window_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_pixmap_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_cursor_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_font_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_gcontext_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_colormap_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_atom_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_drawable_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_fontable_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_visualid_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_timestamp_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_keysym_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_keycode_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_button_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_point_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_point_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_rectangle_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_rectangle_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_arc_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_arc_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_format_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_format_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_visualtype_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_visualtype_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_depth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_depth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_screen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_screen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_setup_request_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_setup_request_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_setup_failed_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_setup_failed_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_setup_authenticate_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_setup_authenticate_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_setup_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_setup_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_key_press_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_button_press_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_motion_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_enter_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_focus_in_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_keymap_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_expose_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_graphics_exposure_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_no_exposure_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_visibility_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_create_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_destroy_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_unmap_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_map_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_map_request_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_reparent_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_configure_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_configure_request_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_gravity_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_resize_request_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_circulate_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_property_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_selection_clear_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_selection_request_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_colormap_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_client_message_data_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_client_message_data_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_client_message_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_mapping_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_ge_generic_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_request_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_value_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_create_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_window_attributes_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_window_attributes_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_window_attributes_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_destroy_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_destroy_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_reparent_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_map_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_map_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_unmap_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_unmap_subwindows_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_configure_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_circulate_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_geometry_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_geometry_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_geometry_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_tree_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_tree_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_tree_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_intern_atom_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_intern_atom_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_intern_atom_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_atom_name_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_atom_name_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_atom_name_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_property_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_delete_property_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_property_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_property_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_property_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_properties_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_properties_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_properties_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_selection_owner_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_selection_owner_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_selection_owner_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_convert_selection_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_send_event_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_ungrab_pointer_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_button_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_ungrab_button_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_active_pointer_grab_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_keyboard_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_keyboard_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_ungrab_keyboard_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_key_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_ungrab_key_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_allow_events_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_grab_server_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_ungrab_server_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_pointer_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_pointer_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_pointer_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_timecoord_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_timecoord_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_motion_events_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_motion_events_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_motion_events_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_translate_coordinates_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_translate_coordinates_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_translate_coordinates_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_warp_pointer_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_input_focus_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_input_focus_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_input_focus_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_keymap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_keymap_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_keymap_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_open_font_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_close_font_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_fontprop_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_fontprop_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_charinfo_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_charinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_font_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_font_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_font_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_text_extents_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_text_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_text_extents_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_str_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_str_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_fonts_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_fonts_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_fonts_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_fonts_with_info_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_fonts_with_info_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_fonts_with_info_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_font_path_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_font_path_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_font_path_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_font_path_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_create_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_free_pixmap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_create_gc_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_gc_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_copy_gc_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_dashes_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_free_gc_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_clear_area_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_copy_area_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_copy_plane_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_point_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_line_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_segment_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_segment_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_segment_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_arc_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_fill_poly_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_fill_rectangle_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_fill_arc_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_put_image_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_image_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_image_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_image_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_text_8_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_poly_text_16_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_image_text_8_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_image_text_16_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_create_colormap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_free_colormap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_copy_colormap_and_free_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_install_colormap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_uninstall_colormap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_installed_colormaps_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_installed_colormaps_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_installed_colormaps_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_named_color_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_named_color_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_named_color_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_cells_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_cells_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_cells_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_planes_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_planes_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_alloc_color_planes_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_free_colors_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_coloritem_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_coloritem_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_store_colors_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_store_named_color_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_rgb_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_rgb_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_colors_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_colors_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_colors_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_lookup_color_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_lookup_color_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_lookup_color_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_create_glyph_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_free_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_recolor_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_best_size_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_best_size_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_best_size_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_extension_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_extension_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_query_extension_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_extensions_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_extensions_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_extensions_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_keyboard_mapping_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_keyboard_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_keyboard_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_keyboard_control_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_keyboard_control_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_keyboard_control_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_bell_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_pointer_control_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_pointer_control_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_pointer_control_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_screen_saver_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_screen_saver_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_change_hosts_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_host_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_host_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_hosts_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_hosts_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_list_hosts_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_access_control_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_close_down_mode_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_kill_client_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_rotate_properties_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_force_screen_saver_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_pointer_mapping_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_pointer_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_pointer_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_set_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_modifier_mapping_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_modifier_mapping_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_get_modifier_mapping_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_no_operation_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_big_requests_enable_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_big_requests_enable_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_big_requests_enable_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_version_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_version_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_version_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_xid_range_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_xid_range_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_xid_range_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_xid_list_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_xid_list_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xc_misc_get_xid_list_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_glyph_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_glyphset_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_picture_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pictformat_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_fixed_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pict_format_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_picture_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pict_op_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_glyph_set_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_glyph_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_directformat_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_directformat_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pictforminfo_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pictforminfo_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pictvisual_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pictvisual_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pictdepth_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_render_pictdepth_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pictscreen_t","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for xcb_render_pictscreen_iterator_t&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_indexvalue_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_indexvalue_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_color_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_color_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pointfix_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_pointfix_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_linefix_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_linefix_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_triangle_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_triangle_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_trapezoid_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_trapezoid_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_glyphinfo_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_glyphinfo_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_version_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_pict_formats_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_pict_formats_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_pict_formats_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_pict_index_values_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_pict_index_values_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_pict_index_values_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_picture_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_change_picture_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_set_picture_clip_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_free_picture_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_composite_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_trapezoids_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_triangles_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_tri_strip_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_tri_fan_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_reference_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_free_glyph_set_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_add_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_free_glyphs_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_composite_glyphs_8_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_composite_glyphs_16_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_composite_glyphs_32_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_fill_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_transform_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_transform_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_set_picture_transform_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_filters_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_filters_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_query_filters_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_set_picture_filter_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_animcursorelt_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_animcursorelt_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_anim_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_spanfix_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_spanfix_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_trap_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_trap_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_add_traps_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_solid_fill_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_linear_gradient_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_radial_gradient_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_render_create_conical_gradient_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_op_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_kind_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_query_version_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_mask_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_combine_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_offset_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_query_extents_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_query_extents_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_query_extents_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_select_input_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_input_selected_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_input_selected_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_input_selected_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_get_rectangles_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_get_rectangles_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_shape_get_rectangles_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_query_version_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_query_version_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_query_version_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_change_save_set_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_selection_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_select_selection_input_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_cursor_notify_event_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_select_cursor_input_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_image_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_image_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_image_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_region_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_bad_region_error_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_create_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_create_region_from_bitmap_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_create_region_from_window_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_create_region_from_gc_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_create_region_from_picture_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_destroy_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_set_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_copy_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_union_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_intersect_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_subtract_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_invert_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_translate_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_region_extents_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_fetch_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_fetch_region_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_fetch_region_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_set_gc_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_set_window_shape_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_set_picture_clip_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_set_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_name_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_name_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_name_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_image_and_name_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_image_and_name_cookie_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_get_cursor_image_and_name_reply_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_change_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_change_cursor_by_name_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_expand_region_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_hide_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_show_cursor_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_barrier_iterator_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_create_pointer_barrier_request_t","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for xcb_xfixes_delete_pointer_barrier_request_t","synthetic":true,"types":[]}];
implementors["xdg"] = [{"text":"impl RefUnwindSafe for BaseDirectories","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for BaseDirectoriesError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileFindIterator","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()