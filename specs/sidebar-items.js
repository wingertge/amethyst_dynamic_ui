initSidebarItems({"derive":[["Component",""],["ConvertSaveload",""],["SystemData",""]],"enum":[["AccessorCow",""],["RunningTime",""]],"mod":[["changeset","Provides a changeset that can be collected from an iterator."],["error","Specs errors"],["join","Joining of components for iteration over entities with specific components."],["prelude","Prelude module"],["storage","Component storage types, implementations for component joins, etc."],["world","Entities, resources, components, and general world management."]],"struct":[["AsyncDispatcher",""],["BatchAccessor",""],["BatchUncheckedWorld",""],["BitSet",""],["DefaultBatchControllerSystem",""],["DefaultVecStorage","Vector storage, like `VecStorage`, but allows safe access to the interior slices because unused slots are always initialized."],["DenseVecStorage","Dense vector storage. Has a redirection 2-way table between entities and components, allowing to leave no gaps within the data."],["Dispatcher",""],["DispatcherBuilder",""],["Entity","`Entity` type, as seen by the user."],["FlaggedStorage","Wrapper storage that tracks modifications, insertions, and removals of components through an `EventChannel`."],["HashMapStorage","`HashMap`-based storage. Best suited for rare components."],["LazyUpdate","Lazy updates can be used for world updates that need to borrow a lot of resources and as such should better be done at the end. They work lazily in the sense that they are dispatched when calling `world.maintain()`."],["NullStorage","A null storage type, used for cases where the component doesn't contain any data and instead works as a simple flag."],["Read",""],["ReaderId",""],["StaticAccessor",""],["VecStorage","Vector storage. Uses a simple `Vec`. Supposed to have maximum performance for the components mostly present in entities."],["World",""],["Write",""]],"trait":[["Accessor",""],["BatchController",""],["Component","Abstract component type. Doesn't have to be Copy or even Clone."],["ParJoin","The purpose of the `ParJoin` trait is to provide a way to access multiple storages in parallel at the same time with the merged bit set."],["RunNow",""],["System",""],["SystemData",""],["Tracked","`UnprotectedStorage`s that track modifications, insertions, and removals of components."],["WorldExt","This trait provides some extension methods to make working with shred's [World] easier."]],"type":[["Entities","A wrapper for a read `Entities` resource. Note that this is just `Read<Entities>`, so you can easily use it in your system:"],["ReadExpect",""],["ReadStorage","A storage with read access."],["WriteExpect",""],["WriteStorage","A storage with read and write access."]]});